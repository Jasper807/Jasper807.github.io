<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java集合框架｜Map体系和Collections工具类</title>
      <link href="/articles/9b17f4c4.html"/>
      <url>/articles/9b17f4c4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h1><h2 id="Map的方法"><a href="#Map的方法" class="headerlink" title="Map的方法"></a>Map的方法</h2><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/mapmethod.png" style="zoom:50%;" /><h2 id="Map的案例实现"><a href="#Map的案例实现" class="headerlink" title="Map的案例实现"></a>Map的案例实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,Student&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;----put----&quot;</span>);</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        map.put(<span class="number">1</span>,s1);</span><br><span class="line">        map.put(<span class="number">2</span>,s2);</span><br><span class="line">        map.put(<span class="number">3</span>,s3);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----get----&quot;</span>);</span><br><span class="line">        System.out.println(map.get(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----replace----&quot;</span>);</span><br><span class="line">        map.replace(<span class="number">1</span>,<span class="keyword">new</span> Student(<span class="string">&quot;孙七&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----遍历----&quot;</span>);</span><br><span class="line">        <span class="comment">//1.使用keySet</span></span><br><span class="line">        Set&lt;Integer&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Integer i : set) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key=&quot;</span>+i+<span class="string">&quot;value=&quot;</span>+map.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用entrySet</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Student&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Student&gt; i : entrySet) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key=&quot;</span>+i.getKey()+<span class="string">&quot;value=&quot;</span>+i.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----remove----&quot;</span>);</span><br><span class="line">        map.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----containsKey/containsValue----&quot;</span>);</span><br><span class="line">        System.out.println(map.containsKey(<span class="number">1</span>));</span><br><span class="line">        System.out.println(map.containsValue(s2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">----replace----</span><br><span class="line">&#123;<span class="number">1</span>=Student&#123;name=<span class="string">&#x27;孙七&#x27;</span>, age=<span class="number">22</span>&#125;, <span class="number">2</span>=Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, <span class="number">3</span>=Student&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">20</span>&#125;&#125;</span><br><span class="line">----遍历----</span><br><span class="line">key=1value=Student&#123;name=<span class="string">&#x27;孙七&#x27;</span>, age=<span class="number">22</span>&#125;</span><br><span class="line">key=2value=Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;</span><br><span class="line">key=3value=Student&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">20</span>&#125;</span><br><span class="line">-----------</span><br><span class="line">key=1value=Student&#123;name=<span class="string">&#x27;孙七&#x27;</span>, age=<span class="number">22</span>&#125;</span><br><span class="line">key=2value=Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;</span><br><span class="line">key=3value=Student&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">20</span>&#125;</span><br><span class="line">----remove----</span><br><span class="line">&#123;<span class="number">2</span>=Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, <span class="number">3</span>=Student&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">20</span>&#125;&#125;</span><br><span class="line">----containsKey/containsValue----</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="Map接口的实现类"><a href="#Map接口的实现类" class="headerlink" title="Map接口的实现类"></a>Map接口的实现类</h2><h3 id="HashMap案例实现"><a href="#HashMap案例实现" class="headerlink" title="HashMap案例实现"></a>HashMap案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法和map接口差不多</span></span><br><span class="line">        Hashmap&lt;Integer,Student&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        map.put(<span class="number">1</span>,s1);</span><br><span class="line">        map.put(<span class="number">2</span>,s2);</span><br><span class="line">        map.put(<span class="number">3</span>,s3);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//之前hashset已经讲过，hashmap先通过hashcode找到相应位置，然后通过equals进行比较</span></span><br><span class="line">        <span class="comment">//重写hashcode和equals方法就能通过比较属性值删除元素</span></span><br><span class="line">        map.remove(<span class="number">1</span>,<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">&#123;<span class="number">1</span>=Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;, <span class="number">2</span>=Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, <span class="number">3</span>=Student&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">20</span>&#125;&#125;</span><br><span class="line">&#123;<span class="number">2</span>=Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, <span class="number">3</span>=Student&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">20</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="TreeMap案例实现"><a href="#TreeMap案例实现" class="headerlink" title="TreeMap案例实现"></a>TreeMap案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeMap&lt;Student,String&gt; treeMap=<span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> n1=o1.getAge()-o2.getAge();</span><br><span class="line">                <span class="keyword">int</span> n2=o1.getName().compareTo(o2.getName());</span><br><span class="line">                <span class="keyword">return</span> n1!=<span class="number">0</span>?n1:n2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        treeMap.put(<span class="keyword">new</span> Student(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">23</span>),<span class="string">&quot;1号选手&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="keyword">new</span> Student(<span class="string">&quot;lisi&quot;</span>,<span class="number">19</span>),<span class="string">&quot;2号选手&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="keyword">new</span> Student(<span class="string">&quot;wangwu&quot;</span>,<span class="number">20</span>),<span class="string">&quot;3号选手&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="keyword">new</span> Student(<span class="string">&quot;sunliu&quot;</span>,<span class="number">20</span>),<span class="string">&quot;4号选手&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="keyword">new</span> Student(<span class="string">&quot;zhaoqi&quot;</span>,<span class="number">11</span>),<span class="string">&quot;5号选手&quot;</span>);</span><br><span class="line">        System.out.println(treeMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----firstKey/lastKey-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;firstKey:&quot;</span>+treeMap.firstKey());</span><br><span class="line">        System.out.println(<span class="string">&quot;lastKey:&quot;</span>+treeMap.lastKey());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----firstEntry/lastEntry-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;firstEntry:&quot;</span>+treeMap.firstEntry().getKey()+<span class="string">&quot;-&quot;</span>+treeMap.firstEntry().getValue());</span><br><span class="line">        System.out.println(<span class="string">&quot;lastEntry:&quot;</span>+treeMap.lastEntry().getKey()+<span class="string">&quot;-&quot;</span>+treeMap.lastEntry().getValue());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----pollFirstEntry/pollLastEntry-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;pollFirstEntry:&quot;</span>+treeMap.pollFirstEntry());</span><br><span class="line">        System.out.println(treeMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;pollLastEntry:&quot;</span>+treeMap.pollLastEntry());</span><br><span class="line">        System.out.println(treeMap);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----descendingMap-----&quot;</span>);</span><br><span class="line">        NavigableMap&lt;Student, String&gt; map = treeMap.descendingMap();</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">&#123;Student&#123;name=<span class="string">&#x27;zhaoqi&#x27;</span>, age=<span class="number">11</span>&#125;=<span class="number">5</span>号选手, Student&#123;name=<span class="string">&#x27;lisi&#x27;</span>, age=<span class="number">19</span>&#125;=<span class="number">2</span>号选手, Student&#123;name=<span class="string">&#x27;sunliu&#x27;</span>, age=<span class="number">20</span>&#125;=<span class="number">4</span>号选手, Student&#123;name=<span class="string">&#x27;wangwu&#x27;</span>, age=<span class="number">20</span>&#125;=<span class="number">3</span>号选手, Student&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">23</span>&#125;=<span class="number">1</span>号选手&#125;</span><br><span class="line">-----firstKey/lastKey-----</span><br><span class="line">firstKey:Student&#123;name=<span class="string">&#x27;zhaoqi&#x27;</span>, age=<span class="number">11</span>&#125;</span><br><span class="line">lastKey:Student&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">23</span>&#125;</span><br><span class="line">-----firstEntry/lastEntry-----</span><br><span class="line">firstEntry:Student&#123;name=<span class="string">&#x27;zhaoqi&#x27;</span>, age=<span class="number">11</span>&#125;-<span class="number">5</span>号选手</span><br><span class="line">lastEntry:Student&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">23</span>&#125;-<span class="number">1</span>号选手</span><br><span class="line">-----pollFirstEntry/pollLastEntry-----</span><br><span class="line">pollFirstEntry:Student&#123;name=<span class="string">&#x27;zhaoqi&#x27;</span>, age=<span class="number">11</span>&#125;=<span class="number">5</span>号选手</span><br><span class="line">&#123;Student&#123;name=<span class="string">&#x27;lisi&#x27;</span>, age=<span class="number">19</span>&#125;=<span class="number">2</span>号选手, Student&#123;name=<span class="string">&#x27;sunliu&#x27;</span>, age=<span class="number">20</span>&#125;=<span class="number">4</span>号选手, Student&#123;name=<span class="string">&#x27;wangwu&#x27;</span>, age=<span class="number">20</span>&#125;=<span class="number">3</span>号选手, Student&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">23</span>&#125;=<span class="number">1</span>号选手&#125;</span><br><span class="line">pollLastEntry:Student&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">23</span>&#125;=<span class="number">1</span>号选手</span><br><span class="line">&#123;Student&#123;name=<span class="string">&#x27;lisi&#x27;</span>, age=<span class="number">19</span>&#125;=<span class="number">2</span>号选手, Student&#123;name=<span class="string">&#x27;sunliu&#x27;</span>, age=<span class="number">20</span>&#125;=<span class="number">4</span>号选手, Student&#123;name=<span class="string">&#x27;wangwu&#x27;</span>, age=<span class="number">20</span>&#125;=<span class="number">3</span>号选手&#125;</span><br><span class="line">-----descendingMap-----</span><br><span class="line">&#123;Student&#123;name=<span class="string">&#x27;wangwu&#x27;</span>, age=<span class="number">20</span>&#125;=<span class="number">3</span>号选手, Student&#123;name=<span class="string">&#x27;sunliu&#x27;</span>, age=<span class="number">20</span>&#125;=<span class="number">4</span>号选手, Student&#123;name=<span class="string">&#x27;lisi&#x27;</span>, age=<span class="number">19</span>&#125;=<span class="number">2</span>号选手&#125;</span><br></pre></td></tr></table></figure><h1 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h1><h2 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    list.add(-<span class="number">2</span>);</span><br><span class="line">    list.add(<span class="number">9</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(-<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">//输出：[3, -2, 9, 5, -1, 6]</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合元素的次序反转</span></span><br><span class="line">    Collections.reverse(list);</span><br><span class="line">    <span class="comment">//输出：[6, -1, 5, 9, -2, 3]</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序：按照升序排序</span></span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    <span class="comment">//[-2, -1, 3, 5, 6, 9]</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据下标进行交换</span></span><br><span class="line">    Collections.swap(list, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//输出：[-2, -1, 9, 5, 6, 3]</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后两个整体移动到前边</span></span><br><span class="line">    Collections.rotate(list, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//输出：[6, 3, -2, -1, 9, 5]</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机排序</span></span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    <span class="comment">//每次输出的次序不固定</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找替换操作"><a href="#查找替换操作" class="headerlink" title="查找替换操作"></a>查找替换操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    list.add(-<span class="number">2</span>);</span><br><span class="line">    list.add(<span class="number">9</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(-<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">//[3, -2, 9, 5, -1, 6]</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出最大元素9</span></span><br><span class="line">    System.out.println(Collections.max(list));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出最小元素：-2</span></span><br><span class="line">    System.out.println(Collections.min(list));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将list中的-2用1来代替</span></span><br><span class="line">    System.out.println(Collections.replaceAll(list, -<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">//[3, 1, 9, 5, -1, 6]</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    list.add(<span class="number">9</span>);</span><br><span class="line">    <span class="comment">//判断9在集合中出现的次数，返回2</span></span><br><span class="line">    System.out.println(Collections.frequency(list, <span class="number">9</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对集合进行排序</span></span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    <span class="comment">//[-1, 1, 3, 5, 6, 9, 9]</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有排序后的List集合才可用二分法查询，输出2</span></span><br><span class="line">    System.out.println(Collections.binarySearch(list, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置不可变集合"><a href="#设置不可变集合" class="headerlink" title="设置不可变集合"></a>设置不可变集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个空的、不可改变的List对象</span></span><br><span class="line">    List&lt;String&gt; unmodifiableList = Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//unmodifiableList.add(&quot;java&quot;);</span></span><br><span class="line">    <span class="comment">//添加出现异常：java.lang.UnsupportedOperationException</span></span><br><span class="line">    System.out.println(unmodifiableList);<span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个只有一个元素，且不可改变的Set对象</span></span><br><span class="line">    Set unmodifiableSet = Collections.singleton(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    <span class="comment">//[java]</span></span><br><span class="line">    System.out.println(unmodifiableSet);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个普通Map对象</span></span><br><span class="line">    Map scores = <span class="keyword">new</span> HashMap();</span><br><span class="line">    scores.put(<span class="string">&quot;语文&quot;</span> , <span class="number">80</span>);</span><br><span class="line">    scores.put(<span class="string">&quot;Java&quot;</span> , <span class="number">82</span>);</span><br><span class="line">    <span class="comment">//返回普通Map对象对应的不可变版本</span></span><br><span class="line"></span><br><span class="line">    Map unmodifiableMap = Collections.unmodifiableMap(scores);</span><br><span class="line">    <span class="comment">//下面任意一行代码都将引发UnsupportedOperationException异常</span></span><br><span class="line">    <span class="comment">//unmodifiableList.add(&quot;Hello&quot;);</span></span><br><span class="line">    <span class="comment">//unmodifiableSet.add(&quot;Hello&quot;);</span></span><br><span class="line">    <span class="comment">//unmodifiableMap.put(&quot;Hello&quot;,1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架｜Collection体系的Set分支详解</title>
      <link href="/articles/8979a916.html"/>
      <url>/articles/8979a916.html</url>
      
        <content type="html"><![CDATA[<h1 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h1><h2 id="Set的特点"><a href="#Set的特点" class="headerlink" title="Set的特点"></a>Set的特点</h2><ul><li>无序、无下标和元素不能重复。</li></ul><h2 id="Set的方法实现"><a href="#Set的方法实现" class="headerlink" title="Set的方法实现"></a>Set的方法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Character</span>&lt;<span class="title">T</span>,<span class="title">K</span>&gt;</span>&#123;</span><br><span class="line">    T name;</span><br><span class="line">    K age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Character</span><span class="params">(T name, K age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Character&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&quot;</span> + name +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----add(string)-----&quot;</span>);</span><br><span class="line">        <span class="comment">//Set集合的特点：无序、无下标和元素不能重复</span></span><br><span class="line">        Set set1=<span class="keyword">new</span> HashSet();</span><br><span class="line">        set1.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        set1.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        set1.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        System.out.println(set1);</span><br><span class="line">        set1.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(set1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----add(obj)-----&quot;</span>);</span><br><span class="line">        Set&lt;Character&gt; set2=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Character&lt;String,Integer&gt; c1=<span class="keyword">new</span> Character&lt;&gt;(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Character&lt;String,Integer&gt; c2=<span class="keyword">new</span> Character&lt;&gt;(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        Character&lt;String,Integer&gt; c3=<span class="keyword">new</span> Character&lt;&gt;(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        set2.add(c1);</span><br><span class="line">        set2.add(c2);</span><br><span class="line">        set2.add(c3);</span><br><span class="line">        System.out.println(set2);</span><br><span class="line">        set2.add(c3);</span><br><span class="line">        System.out.println(set2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----remove(obj)-----&quot;</span>);</span><br><span class="line">        set2.remove(c3);</span><br><span class="line">        System.out.println(set2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----contains(obj)-----&quot;</span>);</span><br><span class="line">        System.out.println(set2.contains(c2));</span><br><span class="line">        System.out.println(set2.contains(c3));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----遍历-----&quot;</span>);</span><br><span class="line">        <span class="comment">//和list差不多，这里主要举iterator迭代器</span></span><br><span class="line">        Iterator&lt;Character&gt; iterator = set2.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Character next = iterator.next();</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s &quot;</span>,next.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">----add(string)-----</span><br><span class="line">[李四, 张三, 王五]</span><br><span class="line">[李四, 张三, 王五]</span><br><span class="line">----add(obj)-----</span><br><span class="line">[Character&#123;name=王五, age=<span class="number">20</span>&#125;, Character&#123;name=李四, age=<span class="number">19</span>&#125;, Character&#123;name=张三, age=<span class="number">18</span>&#125;]</span><br><span class="line">[Character&#123;name=王五, age=<span class="number">20</span>&#125;, Character&#123;name=李四, age=<span class="number">19</span>&#125;, Character&#123;name=张三, age=<span class="number">18</span>&#125;]</span><br><span class="line">----remove(obj)-----</span><br><span class="line">[Character&#123;name=李四, age=<span class="number">19</span>&#125;, Character&#123;name=张三, age=<span class="number">18</span>&#125;]</span><br><span class="line">----contains(obj)-----</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">----遍历-----</span><br><span class="line">李四 张三 </span><br></pre></td></tr></table></figure><h1 id="HashSet实现类"><a href="#HashSet实现类" class="headerlink" title="HashSet实现类"></a>HashSet实现类</h1><h2 id="HashSet的方法实现"><a href="#HashSet的方法实现" class="headerlink" title="HashSet的方法实现"></a>HashSet的方法实现</h2><ul><li>HashSet是基于HashMap实现的，比如HashSet中add方法调用的是底层HashMap中的put()方法。HashSet中的元素都存放在HashMap的key上面，而value中的值都是统一的一个固定对象private static final Object PRESENT = new Object()。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleNumber</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SimpleNumber&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;number=&quot;</span> + number +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        SimpleNumber that = (SimpleNumber) o;</span><br><span class="line">        <span class="keyword">return</span> number == that.number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//HashSet的方法和Set接口的方法差不多</span></span><br><span class="line">        HashSet hashSet=<span class="keyword">new</span> HashSet();</span><br><span class="line">        SimpleNumber s1=<span class="keyword">new</span> SimpleNumber(<span class="number">8</span>);</span><br><span class="line">        SimpleNumber s2=<span class="keyword">new</span> SimpleNumber(<span class="number">3</span>);</span><br><span class="line">        SimpleNumber s3=<span class="keyword">new</span> SimpleNumber(<span class="number">4</span>);</span><br><span class="line">        hashSet.add(s1);</span><br><span class="line">        hashSet.add(s2);</span><br><span class="line">        hashSet.add(s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;原来的:&quot;</span>+hashSet);</span><br><span class="line">        hashSet.add(s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加s3:&quot;</span>+hashSet);</span><br><span class="line">        <span class="comment">//如果重写了该类的hashCode方法和equals方法，那么就不会添加新的对象元素</span></span><br><span class="line">        <span class="comment">//如果没有重写或者只重写其中一个，新的元素还是会被添加进来</span></span><br><span class="line">        <span class="comment">//类似：[SimpleNumber&#123;number=3&#125;,SimpleNumber&#123;number=4&#125;, SimpleNumber&#123;number=4&#125;, SimpleNumber&#123;number=8&#125;]</span></span><br><span class="line">        hashSet.add(<span class="keyword">new</span> SimpleNumber(<span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;添加新的对象:&quot;</span>+hashSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果重写了该类的hashCode方法和equals方法，那么就会在集合中删除该元素</span></span><br><span class="line">        <span class="comment">//如果没有重写或者只重写其中一个，不会删除任何元素</span></span><br><span class="line">        hashSet.remove(<span class="keyword">new</span> SimpleNumber(<span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除操作：&quot;</span>+hashSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">原来的:[SimpleNumber&#123;number=<span class="number">3</span>&#125;, SimpleNumber&#123;number=<span class="number">4</span>&#125;, SimpleNumber&#123;number=<span class="number">8</span>&#125;]</span><br><span class="line">添加s3:[SimpleNumber&#123;number=<span class="number">3</span>&#125;, SimpleNumber&#123;number=<span class="number">4</span>&#125;, SimpleNumber&#123;number=<span class="number">8</span>&#125;]</span><br><span class="line">添加新的对象:[SimpleNumber&#123;number=<span class="number">3</span>&#125;, SimpleNumber&#123;number=<span class="number">4</span>&#125;, SimpleNumber&#123;number=<span class="number">8</span>&#125;]</span><br><span class="line">删除操作：[SimpleNumber&#123;number=<span class="number">3</span>&#125;, SimpleNumber&#123;number=<span class="number">8</span>&#125;]</span><br></pre></td></tr></table></figure><h1 id="TreeSet实现类"><a href="#TreeSet实现类" class="headerlink" title="TreeSet实现类"></a>TreeSet实现类</h1><ul><li><p>TreeSet是基于TreeMap实现的，内部维持了一个简化版的TreeMap。</p></li><li><p>TreeSet实现了SortedSet接口，能对集合元素自动排序。</p></li><li><p>TreeSet元素对象的类型实现Comparable接口，指定排序规则。</p></li></ul><h2 id="TreeSet的方法实现"><a href="#TreeSet的方法实现" class="headerlink" title="TreeSet的方法实现"></a>TreeSet的方法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet&lt;Integer&gt; numbers = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        numbers.add(<span class="number">5</span>);</span><br><span class="line">        numbers.add(<span class="number">2</span>);</span><br><span class="line">        numbers.add(<span class="number">9</span>);</span><br><span class="line">        numbers.add(<span class="number">4</span>);</span><br><span class="line">        numbers.add(<span class="number">6</span>);</span><br><span class="line">        numbers.add(<span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 first() 方法</span></span><br><span class="line">        <span class="keyword">int</span> first = numbers.first();</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个数字: &quot;</span> + first);</span><br><span class="line">        <span class="comment">// 使用 last() 方法</span></span><br><span class="line">        <span class="keyword">int</span> last = numbers.last();</span><br><span class="line">        System.out.println(<span class="string">&quot;最后一个数字: &quot;</span> + last);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 higher() 返回大于指定元素(element)的最小元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用 higher: &quot;</span> + numbers.higher(<span class="number">4</span>));</span><br><span class="line">        <span class="comment">// 使用 lower() 返回小于指定元素(element)的最大元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用 lower: &quot;</span> + numbers.lower(<span class="number">4</span>));</span><br><span class="line">        <span class="comment">// 使用 ceiling() 返回大于指定元素(element)的那些元素中的最小元素。如果传递的元素(element)存在于树集中，则返回作为参数传递的元素(element)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用 ceiling: &quot;</span> + numbers.ceiling(<span class="number">4</span>));</span><br><span class="line">        <span class="comment">// 使用 floor() 返回小于指定元素(element)的元素中最大的元素。如果传递的元素(element)存在于树集中，则返回作为参数传递的元素(element)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用 floor: &quot;</span> + numbers.floor(<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 pollFirst() 返回并从集合中删除第一个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除第一个元素: &quot;</span> + numbers.pollFirst());</span><br><span class="line">        <span class="comment">// 使用 pollLast() 返回并从集合中删除最后一个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除最后一个元素: &quot;</span> + numbers.pollLast());</span><br><span class="line">        System.out.println(<span class="string">&quot;新的TreeSet: &quot;</span> + numbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           headSet(element,booleanValue)</span></span><br><span class="line"><span class="comment">           headSet()方法返回指定元素（作为参数传递）之前的树集的所有元素</span></span><br><span class="line"><span class="comment">           booleanValue参数是可选的。默认值为false</span></span><br><span class="line"><span class="comment">           如果booleanValue的值为true，则该方法返回指定元素之前的所有元素，包括指定元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 headSet()使用默认的布尔值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;headSet()使用默认的布尔值: &quot;</span> + numbers.headSet(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">// 使用 headSet()使用指定的布尔值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;headSet()带有布尔值: &quot;</span> + numbers.headSet(<span class="number">5</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           tailSet(element,booleanValue)</span></span><br><span class="line"><span class="comment">           tailSet()方法返回包含指定元素的指定元素（作为参数传递）之后的树集的所有元素。</span></span><br><span class="line"><span class="comment">           booleanValue参数是可选的。默认值为true。</span></span><br><span class="line"><span class="comment">           如果false作为a传递booleanValue，则该方法将返回指定后的所有元素，element而不包括指定的element</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 tailSet()使用默认的布尔值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tailSet()使用默认的布尔值: &quot;</span> + numbers.tailSet(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">// 使用 tailSet()使用指定的布尔值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tailSet()带有布尔值: &quot;</span> + numbers.tailSet(<span class="number">5</span>, <span class="keyword">false</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           subSet(e1,bv1,e2,bv2)</span></span><br><span class="line"><span class="comment">           subSet()方法返回e1和e2之间的所有元素，包括e1。</span></span><br><span class="line"><span class="comment">           bv1和bv2是可选参数。  bv1的默认值为true，bv2的默认值为false。</span></span><br><span class="line"><span class="comment">           如果将false作为bv1传递，则该方法返回e1和e2之间的所有元素，而不包括e1。</span></span><br><span class="line"><span class="comment">           如果将true作为bv2传递，则该方法返回e1和e2之间的所有元素，包括e1。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 使用 subSet()使用默认的布尔值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;subSet()使用默认布尔值: &quot;</span> + numbers.subSet(<span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line">        <span class="comment">// 使用 subSet()使用指定的布尔值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;subSet()使用指定的布尔值: &quot;</span> + numbers.subSet(<span class="number">4</span>, <span class="keyword">false</span>, <span class="number">6</span>, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">TreeSet: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">第一个数字: <span class="number">2</span></span><br><span class="line">最后一个数字: <span class="number">9</span></span><br><span class="line">------------</span><br><span class="line">使用 higher: <span class="number">5</span></span><br><span class="line">使用 lower: <span class="number">2</span></span><br><span class="line">使用 ceiling: <span class="number">4</span></span><br><span class="line">使用 floor: <span class="number">2</span></span><br><span class="line">------------</span><br><span class="line">删除第一个元素: <span class="number">2</span></span><br><span class="line">删除最后一个元素: <span class="number">9</span></span><br><span class="line">新的TreeSet: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">------------</span><br><span class="line">headSet()使用默认的布尔值: [<span class="number">4</span>]</span><br><span class="line">headSet()带有布尔值: [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">------------</span><br><span class="line">tailSet()使用默认的布尔值: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">tailSet()带有布尔值: [<span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">------------</span><br><span class="line">subSet()使用默认布尔值: [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">subSet()使用指定的布尔值: [<span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h2 id="实现Comparable接口"><a href="#实现Comparable接口" class="headerlink" title="实现Comparable接口"></a>实现Comparable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Actor</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Actor&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//先按姓名排序，姓名相同再按年龄排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Actor o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//name升序 反过来写降序</span></span><br><span class="line">        <span class="keyword">int</span> n1=<span class="keyword">this</span>.getName().compareTo(o.getName());</span><br><span class="line">        <span class="comment">//age降序 反过来写升序</span></span><br><span class="line">        <span class="keyword">int</span> n2=o.getAge()-<span class="keyword">this</span>.getAge();</span><br><span class="line">        <span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet&lt;Actor&gt; treeSet=<span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        Actor a1=<span class="keyword">new</span> Actor(<span class="string">&quot;jasper&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Actor a2=<span class="keyword">new</span> Actor(<span class="string">&quot;mike&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        Actor a3=<span class="keyword">new</span> Actor(<span class="string">&quot;tom&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        Actor a4=<span class="keyword">new</span> Actor(<span class="string">&quot;tom&quot;</span>,<span class="number">11</span>);</span><br><span class="line">        treeSet.add(a1);</span><br><span class="line">        treeSet.add(a2);</span><br><span class="line">        treeSet.add(a3);</span><br><span class="line">        treeSet.add(a4);</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">        <span class="comment">//因为实现了Comparable接口，所以即使添加新的对象，只要比对的属性相同，就无法添加进去</span></span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Actor(<span class="string">&quot;tom&quot;</span>,<span class="number">11</span>));</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">        <span class="comment">//因为实现了Comparable接口，所以即使删除新的对象，只要比对的属性相同，就能删除</span></span><br><span class="line">        treeSet.remove(<span class="keyword">new</span> Actor(<span class="string">&quot;mike&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">[Actor&#123;name=<span class="string">&#x27;jasper&#x27;</span>, age=<span class="number">18</span>&#125;, Actor&#123;name=<span class="string">&#x27;mike&#x27;</span>, age=<span class="number">19</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">20</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">11</span>&#125;]</span><br><span class="line">[Actor&#123;name=<span class="string">&#x27;jasper&#x27;</span>, age=<span class="number">18</span>&#125;, Actor&#123;name=<span class="string">&#x27;mike&#x27;</span>, age=<span class="number">19</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">20</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">11</span>&#125;]</span><br><span class="line">[Actor&#123;name=<span class="string">&#x27;jasper&#x27;</span>, age=<span class="number">18</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">20</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">11</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="实现Comparator定制比较"><a href="#实现Comparator定制比较" class="headerlink" title="实现Comparator定制比较"></a>实现Comparator定制比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Waiter</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Waiter&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet&lt;Actor&gt; treeSet=<span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Actor&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Actor o1, Actor o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//name升序 反过来写降序</span></span><br><span class="line">                <span class="keyword">int</span> n1=o1.getName().compareTo(o2.getName());</span><br><span class="line">                <span class="comment">//age降序 反过来写升序</span></span><br><span class="line">                <span class="keyword">int</span> n2=o2.getAge()-o1.getAge();</span><br><span class="line">                <span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Actor a1=<span class="keyword">new</span> Actor(<span class="string">&quot;jasper&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Actor a2=<span class="keyword">new</span> Actor(<span class="string">&quot;mike&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        Actor a3=<span class="keyword">new</span> Actor(<span class="string">&quot;tom&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        Actor a4=<span class="keyword">new</span> Actor(<span class="string">&quot;tom&quot;</span>,<span class="number">11</span>);</span><br><span class="line">        treeSet.add(a1);</span><br><span class="line">        treeSet.add(a2);</span><br><span class="line">        treeSet.add(a3);</span><br><span class="line">        treeSet.add(a4);</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Actor(<span class="string">&quot;tom&quot;</span>,<span class="number">11</span>));</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">        treeSet.remove(<span class="keyword">new</span> Actor(<span class="string">&quot;mike&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">[Actor&#123;name=<span class="string">&#x27;jasper&#x27;</span>, age=<span class="number">18</span>&#125;, Actor&#123;name=<span class="string">&#x27;mike&#x27;</span>, age=<span class="number">19</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">20</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">11</span>&#125;]</span><br><span class="line">[Actor&#123;name=<span class="string">&#x27;jasper&#x27;</span>, age=<span class="number">18</span>&#125;, Actor&#123;name=<span class="string">&#x27;mike&#x27;</span>, age=<span class="number">19</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">20</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">11</span>&#125;]</span><br><span class="line">[Actor&#123;name=<span class="string">&#x27;jasper&#x27;</span>, age=<span class="number">18</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">20</span>&#125;, Actor&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">11</span>&#125;]</span><br></pre></td></tr></table></figure><h1 id="HashSet和TreeSet的区别"><a href="#HashSet和TreeSet的区别" class="headerlink" title="HashSet和TreeSet的区别"></a>HashSet和TreeSet的区别</h1><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul><li>HashSet内部的数据结构是哈希表(数组+链表+红黑树)，是线程不安全的。</li><li>HashSet集合元素可以是null，但只能放入一个null。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashSet hashSet=<span class="keyword">new</span> HashSet();</span><br><span class="line">hashSet.add(<span class="keyword">null</span>);</span><br><span class="line">hashSet.add(<span class="keyword">null</span>);<span class="comment">//add了两次但只能存一个null</span></span><br></pre></td></tr></table></figure><ul><li>HashSet存放对象时，通过对象的hashCode和equals方法来完成对象唯一性的判断。通过hashcode方法找到该对象存放的位置，然后通过equals方法进行比较，如果相同则不添加。</li><li>HashSet如果同一个类向HashSet添加不同的对象，可以覆盖hashCode方法和equals方法，使其通过比较对象属性值来判断。</li></ul><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li>TreeSet内部的数据结构是红黑树，是线程不安全的。</li><li>TreeSet集合元素不允许放入null值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TreeSet treeSet=<span class="keyword">new</span> TreeSet();</span><br><span class="line">treeSet.add(<span class="keyword">null</span>);<span class="comment">//运行错误 java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure><ul><li><p>TreeSet可以实现Comparable接口，并覆盖其compareTo方法进行排序。TreeSet也可以实现Comparator接口，并覆盖其compare方法进行排序。</p></li><li><p>TreeSet存放对象时，是根据对象的compareTo方法判断两个对象是否相等，并进行比较。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架｜泛型知识点全面详解</title>
      <link href="/articles/8d31dba3.html"/>
      <url>/articles/8d31dba3.html</url>
      
        <content type="html"><![CDATA[<h1 id="泛型的概念"><a href="#泛型的概念" class="headerlink" title="泛型的概念"></a>泛型的概念</h1><ul><li>泛型，即”参数化类型”，也就是说所操作的数据类型被指定为一个参数。</li></ul><h1 id="泛型的特性"><a href="#泛型的特性" class="headerlink" title="泛型的特性"></a>泛型的特性</h1><ul><li>泛型只是在java的编译期会产生错误，但是在java的运行期(已经生成字节码文件后)是会被擦除的，这个期间并没泛型的存在。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入的类型需与泛型的类型参数相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//list.add(&quot;HelloWorld&quot;); 编译报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//获取ArrayList的字节码文件</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;java.util.ArrayList&quot;</span>);</span><br><span class="line">        <span class="comment">//获取add() 方法，Object.class 代表任意对象类型的数据</span></span><br><span class="line">        Method m = clazz.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">        m.invoke(list,<span class="string">&quot;HelloWorld&quot;</span>);<span class="comment">//通过反射添加字符串类型元素数据</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：[1, 2, HelloWorld]</span></span><br></pre></td></tr></table></figure><h1 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h1><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><h3 id="泛型类的基本格式"><a href="#泛型类的基本格式" class="headerlink" title="泛型类的基本格式"></a>泛型类的基本格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名称 &lt;泛型标识&gt;</span>&#123;</span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类的注意事项"><a href="#泛型类的注意事项" class="headerlink" title="泛型类的注意事项"></a>泛型类的注意事项</h3><ul><li>在Java泛型中，T 是类型形参，当我们调用的时候，则传入的是类型实参。</li><li>T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</li><li>在实例化泛型类时，必须指定T的具体类型。</li><li>在使用泛型的时候如果传入泛型实参，则会根据传入的泛型实参做相应的限制，此时泛型才会起到本应起到的限制作用。如果不传入泛型类型实参的话，在泛型类中使用泛型的方法或成员变量定义的类型可以为任何的类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T height;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(T height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(T height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//因为是Integer类型 所以传入的实参应该是int类型。下面同理</span></span><br><span class="line">        Person&lt;Integer&gt; person1=<span class="keyword">new</span> Person&lt;&gt;(<span class="number">180</span>);</span><br><span class="line">        Person&lt;String&gt; person2=<span class="keyword">new</span> Person&lt;&gt;(<span class="string">&quot;180&quot;</span>);</span><br><span class="line">        <span class="comment">//在使用泛型类的时候不一定要传入泛型实参</span></span><br><span class="line">        Person person3=<span class="keyword">new</span> Person(<span class="number">180.5</span>);</span><br><span class="line">        System.out.println(person3.getHeight());</span><br><span class="line">        Person person4=<span class="keyword">new</span> Person(<span class="string">&quot;180厘米&quot;</span>);</span><br><span class="line">        System.out.println(person4.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><h3 id="泛型接口的基本格式"><a href="#泛型接口的基本格式" class="headerlink" title="泛型接口的基本格式"></a>泛型接口的基本格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称 &lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型接口的注意事项"><a href="#泛型接口的注意事项" class="headerlink" title="泛型接口的注意事项"></a>泛型接口的注意事项</h3><ul><li>在子类定义的时候继续使用泛型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">behavior</span> &lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    String cry= <span class="string">&quot;正在哭&quot;</span>;</span><br><span class="line">    <span class="comment">//T run = &quot;正在跑&quot;; 编译报错，因为在接口中，public static final常量需赋值，所以必须确定类型</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">(T key)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>&lt;<span class="title">T</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">behavior</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    V name;</span><br><span class="line">    T age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(V name, T age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;姓名:&quot;</span>+name+<span class="string">&quot;，年龄:&quot;</span>+age+<span class="string">&quot;，行为:&quot;</span>+key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">    Animal&lt;String,String&gt; animal=<span class="keyword">new</span> Animal&lt;&gt;(<span class="string">&quot;小狗&quot;</span>,<span class="string">&quot;6岁&quot;</span>);</span><br><span class="line">    animal.shout(<span class="string">&quot;正在大叫&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">姓名:小狗，年龄:<span class="number">6</span>岁，行为:正在大叫</span><br></pre></td></tr></table></figure><ul><li>在子类实现接口的时候明确给出类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">behavior</span> &lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    String cry= <span class="string">&quot;正在哭&quot;</span>;</span><br><span class="line">    <span class="comment">//T run = &quot;正在跑&quot;; 编译报错，因为在接口中，public static final常量需赋值，所以必须确定类型</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">(T key)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">behavior</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    V name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(V name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在&quot;</span>+key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Teacher&lt;String&gt; teacher=<span class="keyword">new</span> Teacher&lt;&gt;(<span class="string">&quot;赵老师&quot;</span>);</span><br><span class="line">        teacher.shout(<span class="string">&quot;上课&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">赵老师正在上课</span><br></pre></td></tr></table></figure><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h3><h4 id="协变、逆变和不变"><a href="#协变、逆变和不变" class="headerlink" title="协变、逆变和不变"></a>协变、逆变和不变</h4><ul><li>逆变与协变用来描述类型转换（type transformation）后的继承关系，其定义：如果A、B表示类型，f(⋅)表示类型转换，≤表示继承关系（比如，A≤B表示A是由B派生出来的子类）<ul><li>f(⋅)是<strong>逆变（contravariant）</strong>的，当A≤B时有f(B)≤f(A)成立；</li><li>f(⋅)是<strong>协变（covariant）</strong>的，当A≤B时有f(A)≤f(B)成立； </li><li>f(⋅)是<strong>不变（invariant）</strong>的，当A≤B时上述两个式子均不成立，即f(A)与f(B)相互之间没有继承关系。</li></ul></li></ul><h4 id="数组的协变"><a href="#数组的协变" class="headerlink" title="数组的协变"></a>数组的协变</h4><ul><li>可以把数组的协变看成是多态，因为B是A的子类，所以相当于B[ ]是A[ ]的子类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> A[] a1=<span class="keyword">new</span> B[<span class="number">10</span>]; <span class="comment">//和多态一样，子类对象数组可以向上转型为父类对象数组的引用</span></span><br><span class="line">        B[] b=(B[])a1;</span><br><span class="line">        <span class="comment">//D[] d=(D[])a1; java.lang.ClassCastException 类型转换错误</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//只能向数组b赋值B类</span></span><br><span class="line">        b[<span class="number">0</span>]=<span class="keyword">new</span> B();</span><br><span class="line">        <span class="comment">//b[1]=new D();</span></span><br><span class="line">        <span class="comment">//b[2]=new A();</span></span><br><span class="line">        <span class="comment">//b[3]=new C();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组a1的各个元素可以赋值以B或者B的子类</span></span><br><span class="line">        a1[<span class="number">0</span>]=<span class="keyword">new</span> B();</span><br><span class="line">        a1[<span class="number">1</span>]=<span class="keyword">new</span> D();</span><br><span class="line">        <span class="comment">//a1[2]=new A(); java.lang.ArrayStoreException 将错误类型的对象存储到一个对象数组时抛出的异常</span></span><br><span class="line">        <span class="comment">//a1[3]=new C(); java.lang.ArrayStoreException 将错误类型的对象存储到一个对象数组时抛出的异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组a2的各个元素可以赋值以A或者A的子类</span></span><br><span class="line">        A[] a2=<span class="keyword">new</span> A[<span class="number">10</span>];</span><br><span class="line">        a2[<span class="number">0</span>]=<span class="keyword">new</span> B();</span><br><span class="line">        a2[<span class="number">1</span>]=<span class="keyword">new</span> C();</span><br><span class="line">        a2[<span class="number">2</span>]=<span class="keyword">new</span> D();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型的不变"><a href="#泛型的不变" class="headerlink" title="泛型的不变"></a>泛型的不变</h4><ul><li>泛型是不变的，也就是说虽然B是A的子类，但是ArrayList&lt; A &gt;和ArrayList&lt; B &gt;之间并没有内建的协变类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;A&gt; list1=<span class="keyword">new</span> ArrayList&lt;A&gt;();</span><br><span class="line"><span class="comment">//ArrayList&lt;A&gt; list2=new ArrayList&lt;B&gt;(); 编译报错</span></span><br></pre></td></tr></table></figure><h4 id="通配符的协变和逆变"><a href="#通配符的协变和逆变" class="headerlink" title="通配符的协变和逆变"></a>通配符的协变和逆变</h4><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/extends.png"></p><h5 id="协变-lt-extends-T-gt"><a href="#协变-lt-extends-T-gt" class="headerlink" title="协变 &lt;? extends T&gt;"></a>协变 &lt;? extends T&gt;</h5><ul><li>extends指出了泛型的上界为T，&lt;? extends T&gt;称为子类通配符(上界通配符)，&lt;? extends A&gt;意味着某个继承自A的具体类型。</li><li><? extends T>不能往里存，只能往外取，取出来的东西只能存放在T或它的基类里。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G</span> <span class="keyword">extends</span> <span class="title">E</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//&lt;? extends T&gt;不能往里存，只能往外取</span></span><br><span class="line">    ArrayList aim=<span class="keyword">new</span> ArrayList();</span><br><span class="line">    aim.add(<span class="keyword">new</span> B());</span><br><span class="line">    ArrayList&lt;? extends B&gt; al = <span class="keyword">new</span> ArrayList&lt;E&gt;(aim);</span><br><span class="line">    <span class="comment">//al.add(new A()); 编译错误</span></span><br><span class="line">    <span class="comment">//al.add(new B()); 编译错误</span></span><br><span class="line">    <span class="comment">//al.add(new C()); 编译错误</span></span><br><span class="line">    <span class="comment">//al.add(new D()); 编译错误</span></span><br><span class="line">    <span class="comment">//al.add(new E()); 编译错误</span></span><br><span class="line">    <span class="comment">//al.add(new F()); 编译错误</span></span><br><span class="line">    <span class="comment">//al.add(new G()); 编译错误</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;? extends T&gt;取出来的东西只能存放在T或它的基类里</span></span><br><span class="line">    <span class="comment">//所以&lt;? extends B&gt;只能放在B或它的基类里</span></span><br><span class="line">    B newB=al.get(<span class="number">0</span>);</span><br><span class="line">    A newA=al.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//C newc=al.get(0); 编译报错</span></span><br><span class="line">    Object newObject=al.get(<span class="number">0</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;newB:&quot;</span>+newB);</span><br><span class="line">    System.out.println(<span class="string">&quot;newA:&quot;</span>+newA);</span><br><span class="line">    System.out.println(<span class="string">&quot;newObject:&quot;</span>+newObject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">newB:javabase.javagather.B@5cad8086</span><br><span class="line">newA:javabase.javagather.B@5cad8086</span><br><span class="line">newObject:javabase.javagather.B@5cad8086</span><br></pre></td></tr></table></figure><h5 id="逆变-lt-super-T-gt"><a href="#逆变-lt-super-T-gt" class="headerlink" title="逆变 &lt;? super T&gt;"></a>逆变 &lt;? super T&gt;</h5><ul><li>super指出泛型的下界为T，&lt;？ super T&gt;称为超类通配符，&lt;? extends B&gt;代表一个具体类型，而这个类型是B的超类。</li><li><? super T>往里存只能存T或T的子类，往外取只能放在Object对象里。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G</span> <span class="keyword">extends</span> <span class="title">E</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//因为&lt;? super B&gt;说明必须是B或者B的父类</span></span><br><span class="line">    <span class="comment">//所以等式右边可以是new ArrayList&lt;A&gt;()或new ArrayList&lt;B&gt;()</span></span><br><span class="line">    ArrayList&lt;? <span class="keyword">super</span> B&gt; b1 = <span class="keyword">new</span> ArrayList&lt;A&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;? super T&gt;往里存只能存T或T的子类</span></span><br><span class="line">    <span class="comment">//所以&lt;? super B&gt;只能添加B或B的子类</span></span><br><span class="line">    <span class="comment">//b1.add(new A()); 编译错误</span></span><br><span class="line">    b1.add(<span class="keyword">new</span> B());</span><br><span class="line">    <span class="comment">//b1.add(new C()); 编译错误</span></span><br><span class="line">    <span class="comment">//b1.add(new D()); 编译错误</span></span><br><span class="line">    b1.add(<span class="keyword">new</span> E());</span><br><span class="line">    b1.add(<span class="keyword">new</span> F());</span><br><span class="line">    b1.add(<span class="keyword">new</span> G());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;? super T&gt;往外取只能放在Object对象里</span></span><br><span class="line">    <span class="comment">//B newB=b1.get(0); 编译错误</span></span><br><span class="line">    <span class="comment">//A newA=b1.get(0); 编译错误</span></span><br><span class="line">    Object newObject=b1.get(<span class="number">0</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;newObject:&quot;</span>+newObject);</span><br><span class="line">    System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为&lt;? super D&gt;说明等式右边必须是D或者D的父类</span></span><br><span class="line">    <span class="comment">//所以等式右边可以是new ArrayList&lt;A&gt;()、new ArrayList&lt;C&gt;()或new ArrayList&lt;D&gt;()</span></span><br><span class="line">    ArrayList&lt;? <span class="keyword">super</span> D&gt; b2 = <span class="keyword">new</span> ArrayList&lt;C&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;? super T&gt;往里存只能存T或T的子类</span></span><br><span class="line">    <span class="comment">//所以&lt;? super D&gt;所以只能添加D或D的子类</span></span><br><span class="line">    <span class="comment">//b2.add(new A()); 编译错误</span></span><br><span class="line">    <span class="comment">//b2.add(new B()); 编译错误</span></span><br><span class="line">    <span class="comment">//b2.add(new C()); 编译错误</span></span><br><span class="line">    b2.add(<span class="keyword">new</span> D());</span><br><span class="line">    <span class="comment">//b2.add(new E()); 编译错误</span></span><br><span class="line">    <span class="comment">//b2.add(new F()); 编译错误</span></span><br><span class="line">    <span class="comment">//b2.add(new G()); 编译错误</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;? super T&gt;往外取只能放在Object对象里</span></span><br><span class="line">    <span class="comment">//B newB=b1.get(0); 编译错误</span></span><br><span class="line">    <span class="comment">//A newA=b1.get(0); 编译错误</span></span><br><span class="line">    Object newObject2=b2.get(<span class="number">0</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;newObject2:&quot;</span>+newObject2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">newObject:javabase.javagather.B@5cad8086</span><br><span class="line">--------------</span><br><span class="line">newObject2:javabase.javagather.D@6e0be858</span><br></pre></td></tr></table></figure><h5 id="通配符-的其他使用"><a href="#通配符-的其他使用" class="headerlink" title="通配符?的其他使用"></a>通配符?的其他使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        infor(<span class="keyword">new</span> Worker&lt;Number&gt;(<span class="number">100</span>));</span><br><span class="line">        infor(<span class="keyword">new</span> Worker&lt;Integer&gt;(<span class="number">200</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通配符?解决当具体类型不确定的时候</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">infor</span><span class="params">(Worker&lt;?&gt; workers)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电子厂工人总数&quot;</span>+workers.num+<span class="string">&quot;人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    T num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(T num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">电子厂工人总数<span class="number">100</span>人</span><br><span class="line">电子厂工人总数<span class="number">200</span>人</span><br></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><h3 id="泛型方法的基本格式"><a href="#泛型方法的基本格式" class="headerlink" title="泛型方法的基本格式"></a>泛型方法的基本格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;T&gt;必不可少，这表明这是一个泛型方法</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T 方法名()&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以这样</span></span><br><span class="line"><span class="keyword">public</span> &lt;T,K&gt; T 方法名(泛型类&lt;K&gt; obj)&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类中的泛型方法"><a href="#泛型类中的泛型方法" class="headerlink" title="泛型类中的泛型方法"></a>泛型类中的泛型方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Elephant</span>&lt;<span class="title">T</span>,<span class="title">K</span>&gt;</span>&#123;</span><br><span class="line">    T name;</span><br><span class="line">    K age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Elephant</span><span class="params">(T name, K age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以创建完泛型方法，但不使用&lt;U&gt;</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Elephant&lt;T&gt;的T和此泛型方法的T不是一个T</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Elephant&lt;T,K&gt; elephant)</span></span>&#123;</span><br><span class="line">        System.out.println(elephant.name+<span class="string">&quot;，年龄&quot;</span>+elephant.age+<span class="string">&quot;岁，健康状态良好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//泛型方法中有可变参数</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show3</span><span class="params">(T...args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Elephant&lt;String,Integer&gt; e=<span class="keyword">new</span> Elephant&lt;&gt;(<span class="string">&quot;大壮&quot;</span>,<span class="number">6</span>);</span><br><span class="line">    e.show2();</span><br><span class="line">    e.show(e);</span><br><span class="line">    e.show3(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">start...</span><br><span class="line">大壮，年龄<span class="number">6</span>岁，健康状态良好</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">end....</span><br></pre></td></tr></table></figure><h3 id="泛型和静态方法"><a href="#泛型和静态方法" class="headerlink" title="泛型和静态方法"></a>泛型和静态方法</h3><ul><li>静态方法不能访问类中定义的泛型。</li><li>如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doctor</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    T name;</span><br><span class="line"><span class="comment">/*    public static void show()&#123; //编译报错</span></span><br><span class="line"><span class="comment">        System.out.println(name);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*    public static void show(T age)&#123; //编译报错</span></span><br><span class="line"><span class="comment">        System.out.println();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(U doctorName)</span></span>&#123;</span><br><span class="line">        System.out.println(doctorName+<span class="string">&quot;医生已到岗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Doctor.show(<span class="string">&quot;小月&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">小月医生已到岗</span><br></pre></td></tr></table></figure><h2 id="不能实例化一个参数化类型的数组"><a href="#不能实例化一个参数化类型的数组" class="headerlink" title="不能实例化一个参数化类型的数组"></a>不能实例化一个参数化类型的数组</h2><ul><li>什么叫参数化类型的数组？就是这个数组里存储的对象是参数化类型，比如说ArrayList&lt; String &gt;就是一个类型参数为String的参数化类型，我们在Java中也称呼它为泛型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ArrayList&lt;String&gt;[] arrayList=new ArrayList&lt;String&gt;[10]; 编译报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于泛型具有擦除机制，在运行时的类型参数会被擦除，对于Java的数组来说，他必须知道它持有的所有对象的具体类型，而泛型的这种运行时擦除机制违反了数组安全检查的原则。</li><li>如何解决这种情况呢？我们可以通过创建一个非参数化类型的数组，然后将他强制类型转换为一个参数化类型数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Cat&lt;String&gt;[] cat = new Cat&lt;String&gt;[10]; 编译报错</span></span><br><span class="line">        Cat&lt;String&gt;[] cat;</span><br><span class="line">        Cat[] c=<span class="keyword">new</span> Cat[<span class="number">10</span>];</span><br><span class="line">        cat=(Cat&lt;String&gt;[])c;</span><br><span class="line">        cat[<span class="number">0</span>]=<span class="keyword">new</span> Cat&lt;String&gt;(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line">        System.out.println(cat[<span class="number">0</span>].getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    T name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(T name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架｜Collection体系和核心源码详解(二)</title>
      <link href="/articles/52c08844.html"/>
      <url>/articles/52c08844.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：详解核心源码 = 逐句解释源码 + 分情况举例说明 + 必要辅助图解</p></blockquote><h1 id="Vector实现类"><a href="#Vector实现类" class="headerlink" title="Vector实现类"></a>Vector实现类</h1><h2 id="Vector方法及案例实现"><a href="#Vector方法及案例实现" class="headerlink" title="Vector方法及案例实现"></a>Vector方法及案例实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//很多方法和ArrayList一样</span></span><br><span class="line">        Vector vector=<span class="keyword">new</span> Vector();</span><br><span class="line">        vector.add(<span class="string">&quot;草莓&quot;</span>);</span><br><span class="line">        vector.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">        vector.add(<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----遍历-----&quot;</span>);</span><br><span class="line">        <span class="comment">//Vector 特别的遍历方法是使用枚举器</span></span><br><span class="line">        Enumeration el = vector.elements();</span><br><span class="line">        <span class="keyword">while</span> (el.hasMoreElements())&#123;</span><br><span class="line">            String str=(String) el.nextElement();</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s &quot;</span>,str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----firstElement/lastElement-----&quot;</span>);</span><br><span class="line">        System.out.println((String)vector.firstElement());</span><br><span class="line">        System.out.println((String)vector.lastElement());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----elementAt-----&quot;</span>);</span><br><span class="line">        System.out.println(vector.elementAt(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">-----遍历-----</span><br><span class="line">草莓 香蕉 西瓜 </span><br><span class="line">-----firstElement/lastElement-----</span><br><span class="line">草莓</span><br><span class="line">西瓜</span><br><span class="line">-----elementAt-----</span><br><span class="line">香蕉</span><br></pre></td></tr></table></figure><h2 id="Vector的源码分析-JDk1-8"><a href="#Vector的源码分析-JDk1-8" class="headerlink" title="Vector的源码分析(JDk1.8)"></a>Vector的源码分析(JDk1.8)</h2><h3 id="继承结构和层次关系"><a href="#继承结构和层次关系" class="headerlink" title="继承结构和层次关系"></a>继承结构和层次关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Vector的继承关系和层次结构和ArrayList中的一模一样</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类中的属性"><a href="#类中的属性" class="headerlink" title="类中的属性"></a>类中的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存vector中元素的数组，vector的容量是数组的长度，数组的长度最小值为vector的元素个数。</span></span><br><span class="line"><span class="comment">     * The array buffer into which the components of the vector are</span></span><br><span class="line"><span class="comment">     * stored. The capacity of the vector is the length of this array buffer,</span></span><br><span class="line"><span class="comment">     * and is at least large enough to contain all the vector&#x27;s elements.</span></span><br><span class="line"><span class="comment">     * 任何在vector最后一个元素之后的数组元素是null</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Any array elements following the last element in the Vector are null.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * vector实际元素的个数</span></span><br><span class="line"><span class="comment">     * The number of valid components in this &#123;<span class="doctag">@code</span> Vector&#125; object.</span></span><br><span class="line"><span class="comment">     * Components &#123;<span class="doctag">@code</span> elementData[0]&#125; through</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> elementData[elementCount-1]&#125; are the actual items.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * vector需要自动扩容时增加的容量</span></span><br><span class="line"><span class="comment">     * 当vector的实际容量elementCount大于它的容量时，vector自动增加容量</span></span><br><span class="line"><span class="comment">     * 当capacityIncrement小于或等于0，vector的容量需要增长时将会成倍增长</span></span><br><span class="line"><span class="comment">     * The amount by which the capacity of the vector is automatically</span></span><br><span class="line"><span class="comment">     * incremented when its size becomes greater than its capacity.  If</span></span><br><span class="line"><span class="comment">     * the capacity increment is less than or equal to zero, the capacity</span></span><br><span class="line"><span class="comment">     * of the vector is doubled each time it needs to grow.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2767605614048989439L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="无参构造-Vector"><a href="#无参构造-Vector" class="headerlink" title="无参构造 Vector()"></a>无参构造 Vector()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个指定容量为10，自增容量为0的空vector</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有参构造-Vector-int-initialCapacity"><a href="#有参构造-Vector-int-initialCapacity" class="headerlink" title="有参构造 Vector(int initialCapacity)"></a>有参构造 Vector(int initialCapacity)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个指定容量为initialCapacity，自增容量为0的空vector</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有参构造-Vector-int-initialCapacity-int-capacityIncrement"><a href="#有参构造-Vector-int-initialCapacity-int-capacityIncrement" class="headerlink" title="有参构造 Vector(int initialCapacity, int capacityIncrement)"></a>有参构造 Vector(int initialCapacity, int capacityIncrement)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个指定容量为initialCapacity，自增容量为capacityIncrement的空vector</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有参构造-Vector-Collection-lt-extends-E-gt-c"><a href="#有参构造-Vector-Collection-lt-extends-E-gt-c" class="headerlink" title="有参构造 Vector(Collection&lt;? extends E&gt; c)"></a>有参构造 Vector(Collection&lt;? extends E&gt; c)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用指定的Collection构造vector</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    elementCount = elementData.length;</span><br><span class="line">    <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">        elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add方法的源码分析"><a href="#add方法的源码分析" class="headerlink" title="add方法的源码分析"></a>add方法的源码分析</h3><ul><li>Vector和ArrayList的数据结构都是数组，所以操作起来差不多，这里以add方法为例。</li></ul><h4 id="add-E"><a href="#add-E" class="headerlink" title="add(E)"></a>add(E)</h4><h5 id="情况1-无参初始化并添加第1个元素"><a href="#情况1-无参初始化并添加第1个元素" class="headerlink" title="情况1 无参初始化并添加第1个元素"></a>情况1 无参初始化并添加第1个元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Vector vector = new Vector(); </span></span><br><span class="line"><span class="comment">//调用了这个构造函数函数后</span></span><br><span class="line"><span class="comment">//this.elementData = new Object[initialCapacity]; 即initialCapacity=10，elementData.length=10</span></span><br><span class="line"><span class="comment">//this.capacityIncrement = capacityIncrement; 即capacityIncrement=0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">vector.add(xxx);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//方法前面加了synchronized关键字，给该方法加锁了，哪个线程先调用它，其它线程就得等着，属于线程安全</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进入ensureCapacityHelper(int minCapacity)函数</span></span><br><span class="line"><span class="comment">其中initialCapacity=10，capacityIncrement=0，minCapacity=elementCount +1=0+1=1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这个方法是异步(也就是能被多个线程同时访问)的，原因是为了让同步方法都能调用到这个检测容量的方法，比如add的同时，另一个线程调用了add的重载方法，那么两个都需要同时查询 容量够不够，所以这个就不需要用synchronized修饰了。因为不会发生线程不安全的问题</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// minCapacity - elementData.length=1-10 &lt; 0 所以不扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">      grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回add(E e)函数 elementData[0] = e; elementCount自增 返回true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="情况2-无参初始化并添加第11个元素"><a href="#情况2-无参初始化并添加第11个元素" class="headerlink" title="情况2 无参初始化并添加第11个元素"></a>情况2 无参初始化并添加第11个元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Vector vector = new Vector(); </span></span><br><span class="line"><span class="comment">//调用了这个构造函数函数后</span></span><br><span class="line"><span class="comment">//this.elementData = new Object[initialCapacity]; 即initialCapacity=10，elementData.length=10</span></span><br><span class="line"><span class="comment">//this.capacityIncrement = capacityIncrement; 即capacityIncrement=0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">vector.add(xxx);</span></span><br><span class="line"><span class="comment">:</span></span><br><span class="line"><span class="comment">:</span></span><br><span class="line"><span class="comment">vector.add(xxx);</span></span><br><span class="line"><span class="comment">vector.add(xxx);当添加第11个元素时</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">添加第11个元素，进入ensureCapacityHelper(int minCapacity)函数</span></span><br><span class="line"><span class="comment">其中initialCapacity=10，capacityIncrement=0，minCapacity=elementCount +1=10+1=11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// minCapacity - elementData.length=11-10 &gt; 0 所以grow函数扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">      grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">添加第11个元素，进入grow(int minCapacity)函数</span></span><br><span class="line"><span class="comment">此时initialCapacity=10，capacityIncrement=0，minCapacity=11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;<span class="comment">//oldCapacity=10</span></span><br><span class="line">    <span class="comment">// 因为capacityIncrement=0 所以newCapacity=10+10=20</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="comment">// newCapacity - minCapacity &gt;0</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">  <span class="comment">//扩容数组</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回add(E e)函数 elementData[0] = e; elementCount自增 返回true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="情况3-有参初始化Vector-8-6-并添加第9个元素"><a href="#情况3-有参初始化Vector-8-6-并添加第9个元素" class="headerlink" title="情况3 有参初始化Vector(8,6)并添加第9个元素"></a>情况3 有参初始化Vector(8,6)并添加第9个元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Vector vector = new Vector(8,6); </span></span><br><span class="line"><span class="comment">//调用了这个构造函数函数后</span></span><br><span class="line"><span class="comment">//this.elementData = new Object[initialCapacity]; 即initialCapacity=8，elementData.length=8</span></span><br><span class="line"><span class="comment">//this.capacityIncrement = capacityIncrement; 即capacityIncrement=6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">vector.add(xxx);</span></span><br><span class="line"><span class="comment">:</span></span><br><span class="line"><span class="comment">:</span></span><br><span class="line"><span class="comment">vector.add(xxx);</span></span><br><span class="line"><span class="comment">vector.add(xxx);当添加第9个元素时</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">添加第9个元素，进入ensureCapacityHelper(int minCapacity)函数</span></span><br><span class="line"><span class="comment">其中initialCapacity=8，capacityIncrement=6，minCapacity=elementCount +1=8+1=9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// minCapacity - elementData.length=9-8 &gt; 0 所以grow函数扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">      grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">添加第9个元素，进入grow(int minCapacity)函数</span></span><br><span class="line"><span class="comment">此时initialCapacity=8，capacityIncrement=6，minCapacity=9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;<span class="comment">//oldCapacity=8</span></span><br><span class="line">    <span class="comment">// 因为capacityIncrement=6&gt;0 所以newCapacity=8+6=14</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="comment">// newCapacity - minCapacity &gt;0</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">  <span class="comment">//扩容数组</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove方法的源码分析"><a href="#remove方法的源码分析" class="headerlink" title="remove方法的源码分析"></a>remove方法的源码分析</h3><ul><li>Vector的removeAll和retainAll方法有点不一样。</li></ul><h4 id="removeAll-Collection-lt-gt-c"><a href="#removeAll-Collection-lt-gt-c" class="headerlink" title="removeAll(Collection&lt;?&gt; c)"></a>removeAll(Collection&lt;?&gt; c)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//removeAll和retainAll差不多，主要说removeAll</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.removeAll(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把集合c传给父类的removeAll函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查该对象是不是空的</span></span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    <span class="comment">//默认false</span></span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">//创建iterator迭代器</span></span><br><span class="line">    Iterator&lt;?&gt; it = iterator();</span><br><span class="line">  <span class="comment">//while循环一个个元素进行遍历，每次循环如果集合c中包含这个元素就remove掉，modified设置为true</span></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c.contains(it.next())) &#123;</span><br><span class="line">        it.remove();</span><br><span class="line">        modified = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LinkedList实现类"><a href="#LinkedList实现类" class="headerlink" title="LinkedList实现类"></a>LinkedList实现类</h1><h2 id="LinkedList方法及案例实现"><a href="#LinkedList方法及案例实现" class="headerlink" title="LinkedList方法及案例实现"></a>LinkedList方法及案例实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList ll=<span class="keyword">new</span> LinkedList();</span><br><span class="line">        Dog dog1=<span class="keyword">new</span> Dog(<span class="string">&quot;小花&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        Dog dog2=<span class="keyword">new</span> Dog(<span class="string">&quot;跳跳&quot;</span>,<span class="number">4</span>);</span><br><span class="line">        ll.add(dog1);</span><br><span class="line">        ll.add(dog2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----addFirst-----&quot;</span>);</span><br><span class="line">        <span class="comment">//addFirst 在列表的首部添加元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;添加前：&quot;</span>+ll);</span><br><span class="line">        ll.addFirst(<span class="keyword">new</span> Dog(<span class="string">&quot;小宝&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;添加后：&quot;</span>+ll);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----addLast-----&quot;</span>);</span><br><span class="line">        <span class="comment">//addLast 在列表的尾部添加元素</span></span><br><span class="line">        ll.addLast(<span class="keyword">new</span> Dog(<span class="string">&quot;虎仔&quot;</span>,<span class="number">6</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;添加后：&quot;</span>+ll);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----getFirst/getLast-----&quot;</span>);</span><br><span class="line">        <span class="comment">//返回列表中第一个/最后一个元素</span></span><br><span class="line">        System.out.println(ll.getFirst());</span><br><span class="line">        System.out.println(ll.getLast());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----removeFirst/removeLast-----&quot;</span>);</span><br><span class="line">        <span class="comment">//删除并返回列表中的第一个/最后一个元素</span></span><br><span class="line">        ll.removeFirst();</span><br><span class="line">        System.out.println(ll);</span><br><span class="line">        ll.removeLast();</span><br><span class="line">        System.out.println(ll);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">-----addFirst-----</span><br><span class="line">添加前：[Dog&#123;name=<span class="string">&#x27;小花&#x27;</span>, age=<span class="number">3</span>&#125;, Dog&#123;name=<span class="string">&#x27;跳跳&#x27;</span>, age=<span class="number">4</span>&#125;]</span><br><span class="line">添加后：[Dog&#123;name=<span class="string">&#x27;小宝&#x27;</span>, age=<span class="number">2</span>&#125;, Dog&#123;name=<span class="string">&#x27;小花&#x27;</span>, age=<span class="number">3</span>&#125;, Dog&#123;name=<span class="string">&#x27;跳跳&#x27;</span>, age=<span class="number">4</span>&#125;]</span><br><span class="line">-----addLast-----</span><br><span class="line">添加后：[Dog&#123;name=<span class="string">&#x27;小宝&#x27;</span>, age=<span class="number">2</span>&#125;, Dog&#123;name=<span class="string">&#x27;小花&#x27;</span>, age=<span class="number">3</span>&#125;, Dog&#123;name=<span class="string">&#x27;跳跳&#x27;</span>, age=<span class="number">4</span>&#125;, Dog&#123;name=<span class="string">&#x27;虎仔&#x27;</span>, age=<span class="number">6</span>&#125;]</span><br><span class="line">-----getFirst/getLast-----</span><br><span class="line">Dog&#123;name=<span class="string">&#x27;小宝&#x27;</span>, age=<span class="number">2</span>&#125;</span><br><span class="line">Dog&#123;name=<span class="string">&#x27;虎仔&#x27;</span>, age=<span class="number">6</span>&#125;</span><br><span class="line">-----removeFirst/removeLast-----</span><br><span class="line">[Dog&#123;name=<span class="string">&#x27;小花&#x27;</span>, age=<span class="number">3</span>&#125;, Dog&#123;name=<span class="string">&#x27;跳跳&#x27;</span>, age=<span class="number">4</span>&#125;, Dog&#123;name=<span class="string">&#x27;虎仔&#x27;</span>, age=<span class="number">6</span>&#125;]</span><br><span class="line">[Dog&#123;name=<span class="string">&#x27;小花&#x27;</span>, age=<span class="number">3</span>&#125;, Dog&#123;name=<span class="string">&#x27;跳跳&#x27;</span>, age=<span class="number">4</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="LinkedList的数据结构"><a href="#LinkedList的数据结构" class="headerlink" title="LinkedList的数据结构"></a>LinkedList的数据结构</h2><ul><li>LinkedList底层使用的双向链表结构，双向链表意味着我们可以从头开始正向遍历，或者是从尾开始逆向遍历，并且可以针对头部和尾部进行相应的操作。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/linkedlist.png"></p><h2 id="LinkedList的源码分析-JDK1-8"><a href="#LinkedList的源码分析-JDK1-8" class="headerlink" title="LinkedList的源码分析(JDK1.8)"></a>LinkedList的源码分析(JDK1.8)</h2><h3 id="继承关系和层次关系"><a href="#继承关系和层次关系" class="headerlink" title="继承关系和层次关系"></a>继承关系和层次关系</h3><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/llconstruction.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为什么LinkedList比ArrayList多了一层AbstractSequentialList的抽象类"><a href="#为什么LinkedList比ArrayList多了一层AbstractSequentialList的抽象类" class="headerlink" title="为什么LinkedList比ArrayList多了一层AbstractSequentialList的抽象类"></a>为什么LinkedList比ArrayList多了一层AbstractSequentialList的抽象类</h4><ul><li><p>首先，我们先要区分顺序存取和随机存取。</p><ul><li>随机存取，当存储器中的数据被读取或写入时，所需要的时间与该数据所在的物理地址无关，常见的就是我们平时在用的数组。</li><li>顺序存取，所需要的时间与该数据所在的物理地址有关，表现为存取第N个数据时，必须先访问前(N-1)个数据，常见的就是我们平时在用的链表。</li></ul></li><li><p>其次，我们要知道抽象的概念，越高层的类比如说Object类就越抽象，越低层的类就越有属于自己的独特的特性。</p></li><li><p>所以，使用AbstractSequentialList抽象类目的是抽象出类似LinkedList这种类的一些共同的方法，方便操作实现。</p></li></ul><h4 id="LinkedList实现了哪些接口"><a href="#LinkedList实现了哪些接口" class="headerlink" title="LinkedList实现了哪些接口"></a>LinkedList实现了哪些接口</h4><ul><li>List接口：列表，add、set、等一些对列表进行操作的方法。</li><li>Deque接口：实现队列的各种特性。</li><li>Cloneable接口：实现了该接口，就可以使用Object.Clone()方法了。</li><li>Serializable接口：能够序列化。</li></ul><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  实际元素的大小</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头指针</span></span><br><span class="line"><span class="comment">     * Pointer to first node.</span></span><br><span class="line"><span class="comment">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">     *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾指针</span></span><br><span class="line"><span class="comment">     * Pointer to last node.</span></span><br><span class="line"><span class="comment">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">     *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line">  <span class="comment">//transient 不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会被序列化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="无参构造方法-LinkedList"><a href="#无参构造方法-LinkedList" class="headerlink" title="无参构造方法 LinkedList()"></a>无参构造方法 LinkedList()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="有参构造方法-LinkedList-Collection-lt-extends-E-gt-c"><a href="#有参构造方法-LinkedList-Collection-lt-extends-E-gt-c" class="headerlink" title="有参构造方法 LinkedList(Collection&lt;? extends E&gt; c)"></a>有参构造方法 LinkedList(Collection&lt;? extends E&gt; c)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将集合c中的各个元素构建成LinkedList链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用无参构造函数</span></span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    <span class="comment">//添加集合中所有的元素</span></span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部类-Node"><a href="#内部类-Node" class="headerlink" title="内部类(Node)"></a>内部类(Node)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Node 就相当于结点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item; <span class="comment">// 数据域(当前节点的值)</span></span><br><span class="line">    Node&lt;E&gt; next; <span class="comment">// 后继(指向当前一个节点的后一个节点)</span></span><br><span class="line">    Node&lt;E&gt; prev; <span class="comment">// 前驱(指向当前节点的前一个节点)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，赋值前驱后继以及节点的值</span></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add方法的源码分析-1"><a href="#add方法的源码分析-1" class="headerlink" title="add方法的源码分析"></a>add方法的源码分析</h3><h4 id="add-E-1"><a href="#add-E-1" class="headerlink" title="add(E)"></a>add(E)</h4><h5 id="情况1-无参构造并添加第1个元素"><a href="#情况1-无参构造并添加第1个元素" class="headerlink" title="情况1 无参构造并添加第1个元素"></a>情况1 无参构造并添加第1个元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  LinkedList ll=new LinkedList();</span></span><br><span class="line"><span class="comment">  ll.add(“苹果”);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进入linkLast(e)这个函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个为l的结点指针，指向last指向的位置</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">  <span class="comment">//创建一个新的结点，这个结点的值为e，前驱指向l指向的位置，后继指向null</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">  <span class="comment">//last结点指针指向新结点newNode</span></span><br><span class="line">    last = newNode;</span><br><span class="line">  <span class="comment">//如果l指向null，first结点指针指向新结点newNode，否则l结点指针的后继指向新结点newNode</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">      first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      l.next = newNode;</span><br><span class="line">  <span class="comment">//添加一个节点，size自增</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/addfirst.png"></p><h5 id="情况2-无参构造并添加第2个元素"><a href="#情况2-无参构造并添加第2个元素" class="headerlink" title="情况2 无参构造并添加第2个元素"></a>情况2 无参构造并添加第2个元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  LinkedList ll=new LinkedList();</span></span><br><span class="line"><span class="comment">  ll.add(“苹果”);</span></span><br><span class="line"><span class="comment">  ll.add(“香蕉”);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">添加第2个元素进入linkLast(e)这个函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/addsecond.png"></p><h4 id="addAll-Collection-lt-extends-E-gt-addAll-int-Collection-lt-extends-E-gt"><a href="#addAll-Collection-lt-extends-E-gt-addAll-int-Collection-lt-extends-E-gt" class="headerlink" title="addAll(Collection&lt;? extends E&gt;)/addAll(int, Collection&lt;? extends E&gt; )"></a>addAll(Collection&lt;? extends E&gt;)/addAll(int, Collection&lt;? extends E&gt; )</h4><h5 id="情况1-将集合c中的各个元素构建成链表添加到空集合linked尾部"><a href="#情况1-将集合c中的各个元素构建成链表添加到空集合linked尾部" class="headerlink" title="情况1 将集合c中的各个元素构建成链表添加到空集合linked尾部"></a>情况1 将集合c中的各个元素构建成链表添加到空集合linked尾部</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">LinkedList newLinked=new LinkedList();</span></span><br><span class="line"><span class="comment">    newLinked.add(&quot;苹果&quot;);</span></span><br><span class="line"><span class="comment">    newLinked.add(&quot;香蕉&quot;);</span></span><br><span class="line"><span class="comment">    LinkedList linked=new LinkedList();</span></span><br><span class="line"><span class="comment">    linked.addAll(newLinked);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    进入addAll(int index, Collection&lt;? extends E&gt; c)</span></span><br><span class="line"><span class="comment">    其中index=size 集合c就是newLinked</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查index这个是否为合理</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">    <span class="comment">//将集合c转换为Object数组 a</span></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="comment">//数组a的长度numNew，也就是由多少个元素</span></span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//集合c是个空的，直接返回false，什么也不做</span></span><br><span class="line"><span class="comment">//创建两个指针结点pred和succ</span></span><br><span class="line">    Node&lt;E&gt; pred, succ;</span><br><span class="line">  <span class="comment">//这里index=size succ = null; pred = last = null;</span></span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">      succ = <span class="keyword">null</span>;</span><br><span class="line">      pred = last;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      succ = node(index);</span><br><span class="line">      pred = succ.prev;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增强for遍历数组a中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> E e = (E) o;</span><br><span class="line">      <span class="comment">//将每个元素封装为结点</span></span><br><span class="line">      Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">      <span class="comment">//第一次循环：将&quot;苹果&quot;封装成结点，因为pred=null，所以first指向数据域是&quot;苹果&quot;这个newNode</span></span><br><span class="line">      <span class="comment">//第二次循环：将&quot;香蕉&quot;封装成结点，因为pred != null，所以pred的后继指向数据域是&quot;香蕉&quot;这个newNode</span></span><br><span class="line">      <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">      <span class="comment">//第一次循环：然后pred指向数据域是&quot;苹果&quot;这个newNode</span></span><br><span class="line">      <span class="comment">//第二次循环：然后pred指向数据域是&quot;香蕉&quot;这个newNode</span></span><br><span class="line">      pred = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//succ=null，所以pred指向就是last指向，在这里就是指向数据域是&quot;香蕉&quot;这个结点</span></span><br><span class="line">    <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">      last = pred;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pred.next = succ;</span><br><span class="line">      succ.prev = pred;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增加了几个元素，就增加多少size</span></span><br><span class="line">    size += numNew;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/addallfirst.png"></p><h5 id="情况2-将集合c中的各个元素构建成链表添加到已经有一个元素的linked集合尾部"><a href="#情况2-将集合c中的各个元素构建成链表添加到已经有一个元素的linked集合尾部" class="headerlink" title="情况2 将集合c中的各个元素构建成链表添加到已经有一个元素的linked集合尾部"></a>情况2 将集合c中的各个元素构建成链表添加到已经有一个元素的linked集合尾部</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    LinkedList newLinked=new LinkedList();</span></span><br><span class="line"><span class="comment">    newLinked.add(&quot;苹果&quot;);</span></span><br><span class="line"><span class="comment">    newLinked.add(&quot;香蕉&quot;);</span></span><br><span class="line"><span class="comment">    LinkedList linked=new LinkedList();</span></span><br><span class="line"><span class="comment">    linked.add(&quot;西瓜&quot;);</span></span><br><span class="line"><span class="comment">    linked.addAll(newLinked);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    进入addAll(int index, Collection&lt;? extends E&gt; c)</span></span><br><span class="line"><span class="comment">    其中index=size 集合c就是newLinked</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查index这个是否为合理</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">    <span class="comment">//将集合c转换为Object数组 a</span></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="comment">//数组a的长度numNew，也就是由多少个元素</span></span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//集合c是个空的，直接返回false，什么也不做</span></span><br><span class="line"><span class="comment">//创建两个指针结点pred和succ</span></span><br><span class="line">    Node&lt;E&gt; pred, succ;</span><br><span class="line">  <span class="comment">//这里index=size succ = null; pred = last = 最后一个结点(即数据域为西瓜的结点);</span></span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">      succ = <span class="keyword">null</span>;</span><br><span class="line">      pred = last;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      succ = node(index);</span><br><span class="line">      pred = succ.prev;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增强for遍历数组a中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> E e = (E) o;</span><br><span class="line">      <span class="comment">//将每个元素封装为结点</span></span><br><span class="line">      Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">      <span class="comment">//第一次循环：将&quot;苹果&quot;封装成结点，因为pred != null，所以pred的后继指向数据域是&quot;苹果&quot;这个newNode</span></span><br><span class="line">      <span class="comment">//第二次循环：将&quot;香蕉&quot;封装成结点，因为pred != null，所以pred的后继指向数据域是&quot;香蕉&quot;这个newNode</span></span><br><span class="line">      <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">      <span class="comment">//第一次循环：然后pred指向数据域是&quot;苹果&quot;这个newNode</span></span><br><span class="line">      <span class="comment">//第二次循环：然后pred指向数据域是&quot;香蕉&quot;这个newNode</span></span><br><span class="line">      pred = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//succ=null，所以pred指向就是last指向，在这里就是指向数据域是&quot;香蕉&quot;这个结点</span></span><br><span class="line">    <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">      last = pred;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pred.next = succ;</span><br><span class="line">      succ.prev = pred;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增加了几个元素，就增加多少size</span></span><br><span class="line">    size += numNew;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/addlistsecond.png"></p><h5 id="情况3-将集合c中的各个元素构建成结点依次添加到已经有三个元素的linked集合内部"><a href="#情况3-将集合c中的各个元素构建成结点依次添加到已经有三个元素的linked集合内部" class="headerlink" title="情况3 将集合c中的各个元素构建成结点依次添加到已经有三个元素的linked集合内部"></a>情况3 将集合c中的各个元素构建成结点依次添加到已经有三个元素的linked集合内部</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    LinkedList newLinked=new LinkedList();</span></span><br><span class="line"><span class="comment">    newLinked.add(&quot;苹果&quot;);</span></span><br><span class="line"><span class="comment">    LinkedList linked=new LinkedList();</span></span><br><span class="line"><span class="comment">    linked.add(&quot;西瓜&quot;);</span></span><br><span class="line"><span class="comment">    linked.add(&quot;葡萄&quot;);</span></span><br><span class="line"><span class="comment">    linked.add(&quot;香蕉&quot;);</span></span><br><span class="line"><span class="comment">    linked.addAll(1,newLinked);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//此时index=1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查index这个是否为合理</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">    <span class="comment">//将集合c转换为Object数组 a</span></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="comment">//数组a的长度numNew，也就是由多少个元素</span></span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//集合c是个空的，直接返回false，什么也不做</span></span><br><span class="line"><span class="comment">//创建两个指针结点pred和succ</span></span><br><span class="line">    Node&lt;E&gt; pred, succ;</span><br><span class="line">  <span class="comment">//这里index!=size succ = null; pred = last = 最后一个结点(即数据域为西瓜的结点);</span></span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">      succ = <span class="keyword">null</span>;</span><br><span class="line">      pred = last;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      succ = node(index); <span class="comment">//node函数见最下面，返回索引为index的这个结点，然后让succ指向这个结点</span></span><br><span class="line">      pred = succ.prev; <span class="comment">//pred指向succ前一个结点</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增强for遍历数组a中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> E e = (E) o;</span><br><span class="line">      <span class="comment">//将每个元素封装为结点</span></span><br><span class="line">      Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">      <span class="comment">//第一次循环：将&quot;苹果&quot;封装成结点，因为pred != null，所以pred的后继指向数据域是&quot;苹果&quot;这个newNode</span></span><br><span class="line">      <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">      <span class="comment">//第一次循环：然后pred指向数据域是&quot;苹果&quot;这个newNode</span></span><br><span class="line">      pred = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//succ!=null，所以pred的后继指向succ指向的位置，succ的前驱指向pred指向的位置</span></span><br><span class="line">    <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">      last = pred;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pred.next = succ;</span><br><span class="line">      succ.prev = pred;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增加了几个元素，就增加多少size</span></span><br><span class="line">    size += numNew;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//node函数</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line">    <span class="comment">// 判断插入的位置在链表前半段或者是后半段</span></span><br><span class="line">    <span class="comment">// index &lt; (size &gt;&gt; 1)就是index&lt;size/2</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123; <span class="comment">//插入位置在前半段</span></span><br><span class="line">      Node&lt;E&gt; x = first;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) <span class="comment">//从头结点开始正向遍历</span></span><br><span class="line">        x = x.next;</span><br><span class="line">      <span class="keyword">return</span> x; <span class="comment">//返回该结点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//插入位置在后半段</span></span><br><span class="line">      Node&lt;E&gt; x = last;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) <span class="comment">//从尾结点开始反向遍历</span></span><br><span class="line">        x = x.prev;</span><br><span class="line">      <span class="keyword">return</span> x; <span class="comment">//返回该结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/addlistthird.png"></p><h5 id="在addAll函数中，为什么要先转化为数组再进行遍历，而不是直接遍历集合呢"><a href="#在addAll函数中，为什么要先转化为数组再进行遍历，而不是直接遍历集合呢" class="headerlink" title="在addAll函数中，为什么要先转化为数组再进行遍历，而不是直接遍历集合呢?"></a>在addAll函数中，为什么要先转化为数组再进行遍历，而不是直接遍历集合呢?</h5><ul><li>如果直接遍历集合的话，那么在遍历过程中需要插入元素，在堆上分配内存空间，修改指针域，这个过程中就会一直占用着这个集合，考虑同步的话，其他线程只能一直等待。</li><li>如果转化为数组，只需要遍历集合，而遍历集合过程中不需要额外的操作，所以占用的时间相对是较短的，这样就利于其他线程尽快的使用这个集合。说白了，就是有利于提高多线程访问该集合的效率，尽可能短时间的阻塞。</li></ul><h3 id="remove方法的源码分析-1"><a href="#remove方法的源码分析-1" class="headerlink" title="remove方法的源码分析"></a>remove方法的源码分析</h3><h5 id="remove-Object"><a href="#remove-Object" class="headerlink" title="remove(Object)"></a>remove(Object)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//这里可以看到，linkedList也能存储null</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//循环遍历链表，直到找到null值，然后使用unlink移除该值。下面的这个else中也一样</span></span><br><span class="line">        <span class="comment">//下面for循环的遍历，如果我们要移除的值在链表中存在多个一样的值，</span></span><br><span class="line">        <span class="comment">//那么我们会移除index最小的那个，也就是最先找到的那个值</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                unlink(x); <span class="comment">//调用unlink函数删除该结点</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unlink函数</span></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">  <span class="comment">// 拿到节点x的三个属性</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"><span class="comment">//这里开始往下就进行移除该元素之后的操作</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//如果prev为空，说明删除的是头结点，就把first结点指针指向后一个结点</span></span><br><span class="line">      first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果prev不为空，就把要删除结点的前一个结点的后继指向要删除结点的后一个结点</span></span><br><span class="line">      <span class="comment">//比如说有1、2、3，就将1.next指向3</span></span><br><span class="line">      prev.next = next; </span><br><span class="line">      <span class="comment">//让x的前驱指向null</span></span><br><span class="line">      x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//如果next为空，说明删除的是尾结点，就把last结点指针指向前一个结点</span></span><br><span class="line">      last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果next不为空，就把要删除结点的后一个结点的前驱指向要删除结点的前一个结点</span></span><br><span class="line">      <span class="comment">//比如说有1、2、3，就将3.prev指向1</span></span><br><span class="line">      next.prev = prev;</span><br><span class="line">      <span class="comment">//让x的后继指向null</span></span><br><span class="line">      x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//把x节点的值赋为空</span></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">//size减1</span></span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/linkeddel.png"></p><h1 id="ArrayList、LinkedList、Vector的区别"><a href="#ArrayList、LinkedList、Vector的区别" class="headerlink" title="ArrayList、LinkedList、Vector的区别"></a>ArrayList、LinkedList、Vector的区别</h1><h2 id="从存储数据结构分析"><a href="#从存储数据结构分析" class="headerlink" title="从存储数据结构分析"></a>从存储数据结构分析</h2><ul><li><p>ArrayList：数组；Vector：数组；LinkedList：双向链表。</p></li><li><p>数组可以根据下标快速查找，所以大部分情况下，查询快，但是如果要进行增删操作的时候，会需要移动修改元素后面的所有元素，所以增删的开销比较大，数组的对增删操作的执行效率低。</p></li><li><p>链表增加和删除元素方便，增加或删除一个元素，仅需处理结点间的引用即可，但是查询不方便，需要一个个对比，无法根据下标直接查找。</p></li></ul><h2 id="从并发安全上分析"><a href="#从并发安全上分析" class="headerlink" title="从并发安全上分析"></a>从并发安全上分析</h2><ul><li>Vector：线程安全；ArrayList：非线程安全；LinkedList:非线程安全。</li></ul><h2 id="从继承上分析"><a href="#从继承上分析" class="headerlink" title="从继承上分析"></a>从继承上分析</h2><ul><li>ArrayList和Vector一样，LinkedList比前面两者多了一层AbstractSequentialList的抽象类，抽象出类似LinkedList这种类的一些共同的方法，方便操作实现。</li></ul><h2 id="从数据增长分析"><a href="#从数据增长分析" class="headerlink" title="从数据增长分析"></a>从数据增长分析</h2><ul><li><p>Vector：默认情况下增长为原数组长度的1倍。</p></li><li><p>ArrayList：默认增长为原数组的1.5倍。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架｜Collection体系和核心源码详解(一)</title>
      <link href="/articles/fdf11326.html"/>
      <url>/articles/fdf11326.html</url>
      
        <content type="html"><![CDATA[<h1 id="Collection体系"><a href="#Collection体系" class="headerlink" title="Collection体系"></a>Collection体系</h1><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/collection.png"></p><h2 id="Collection体系-注意事项"><a href="#Collection体系-注意事项" class="headerlink" title="Collection体系 注意事项"></a>Collection体系 注意事项</h2><ul><li>List接口：有序(指添加的顺序和遍历的顺序是一致的)、有下标、元素可重复。</li><li>Set接口：无序(指添加的顺序和遍历的顺序是不一致的)、无下标、元素不能重复。</li></ul><h2 id="Collection父接口"><a href="#Collection父接口" class="headerlink" title="Collection父接口"></a>Collection父接口</h2><h3 id="Collection方法"><a href="#Collection方法" class="headerlink" title="Collection方法"></a>Collection方法</h3><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/collectionmethod.png"></p><h3 id="Collection案例实现"><a href="#Collection案例实现" class="headerlink" title="Collection案例实现"></a>Collection案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection collection=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----isEmpty------&quot;</span>);</span><br><span class="line">        <span class="comment">//isEmpty 判断集合是否有元素，有返回true，没有返回false</span></span><br><span class="line">        System.out.println(collection.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----add------&quot;</span>);</span><br><span class="line">        <span class="comment">//add 往集合中添加元素</span></span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        Student s4=<span class="keyword">new</span> Student(<span class="string">&quot;孙六&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        Student s5=<span class="keyword">new</span> Student(<span class="string">&quot;赵七&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        collection.add(s1);</span><br><span class="line">        collection.add(s2);</span><br><span class="line">        collection.add(s3);</span><br><span class="line">        collection.add(s4);</span><br><span class="line">        collection.add(s5);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----size------&quot;</span>);</span><br><span class="line">        <span class="comment">//size 返回集合中元素个数</span></span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----remove------&quot;</span>);</span><br><span class="line">        collection.remove(s3);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------removeAll-----&quot;</span>);</span><br><span class="line">        <span class="comment">//colletion.removeAll(Collection C)</span></span><br><span class="line">        <span class="comment">//从collection中删除那些也包含在C中的所有元素</span></span><br><span class="line">        Student s6=<span class="keyword">new</span> Student(<span class="string">&quot;刘八&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        Collection collection2=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        collection2.add(s4);</span><br><span class="line">        collection2.add(s6);</span><br><span class="line">        collection.removeAll(collection2);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------retainAll-----&quot;</span>);</span><br><span class="line">        <span class="comment">//colletion.retainAll(Collection C)</span></span><br><span class="line">        <span class="comment">//仅保留collection中那些也包含在C的元素</span></span><br><span class="line">        <span class="comment">//没有一个交集返回true，有交集但不全交也返回true，而两个集合相等的时候，返回false</span></span><br><span class="line">        Student s7=<span class="keyword">new</span> Student(<span class="string">&quot;林九&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        Collection collection3=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        collection3.add(s7);</span><br><span class="line">        collection3.add(s1);</span><br><span class="line">        collection3.add(s2);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        System.out.println(<span class="string">&quot;有交集：&quot;</span>+collection.retainAll(collection3));</span><br><span class="line">        Collection none=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        Collection test=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        test.addAll(collection);</span><br><span class="line">        System.out.println(<span class="string">&quot;没有交集：&quot;</span>+test.retainAll(none));</span><br><span class="line">        test.addAll(collection);</span><br><span class="line">        System.out.println(<span class="string">&quot;两个集合相等：&quot;</span>+test.retainAll(test));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------contains-----&quot;</span>);</span><br><span class="line">        <span class="comment">//contains 是否包含该元素 是返回true 不是返回false</span></span><br><span class="line">        System.out.println(collection.contains(s2));</span><br><span class="line">        <span class="comment">//如果conrtains(新的对象) 那么就相当于开辟了新的空间，与原来的s2不同</span></span><br><span class="line">        System.out.println(collection.contains(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------containsAll-----&quot;</span>);</span><br><span class="line">        <span class="comment">//colletion.containsAll(Collection C)</span></span><br><span class="line">        <span class="comment">//若collection包含T所有元素返回true，反之返回false</span></span><br><span class="line">        Collection collection4=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        collection4.add(s1);</span><br><span class="line">        System.out.println(collection.containsAll(collection4));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------equals and hashcode-----&quot;</span>);</span><br><span class="line">        <span class="comment">//equals 判断两个集合的每个元素的地址是否相等</span></span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        Collection collection5=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        collection5.add(s1);</span><br><span class="line">        collection5.add(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        Collection collection6=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        collection6.add(s1);</span><br><span class="line">        collection6.add(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;collection&quot;</span>+collection.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;collection5&quot;</span>+collection5.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;collection6&quot;</span>+collection6.hashCode());</span><br><span class="line">        System.out.println(collection.equals(collection5));</span><br><span class="line">        System.out.println(collection.equals(collection6));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------addAll-----&quot;</span>);</span><br><span class="line">        <span class="comment">//colletion.addAll(Collection C)</span></span><br><span class="line">        <span class="comment">//colletion中添加C中所有元素</span></span><br><span class="line">        collection.addAll(collection2);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------遍历-----&quot;</span>);</span><br><span class="line">        <span class="comment">//1.增强for遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : collection) &#123;</span><br><span class="line">            Student stu=(Student) o;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s &quot;</span>,stu.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">//2.迭代器遍历</span></span><br><span class="line">        Iterator it=collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            Student student = (Student) it.next();</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s &quot;</span>,student.getName());</span><br><span class="line">            <span class="keyword">if</span> (student.getName().equals(<span class="string">&quot;刘八&quot;</span>))&#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------toArray-----&quot;</span>);</span><br><span class="line">        <span class="comment">//toArray() 将集合变为数组</span></span><br><span class="line">        <span class="comment">//toArray(T []) 将集合变为指定T数组</span></span><br><span class="line">        Student[] t=<span class="keyword">new</span> Student[<span class="number">5</span>];</span><br><span class="line">        Student[] arr = (Student[]) collection.toArray(t);</span><br><span class="line">        <span class="keyword">for</span> (Student student : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (student!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%s &quot;</span>,student.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------clear-----&quot;</span>);</span><br><span class="line">        <span class="comment">//clear清空集合元素</span></span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        collection.clear();</span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">-----isEmpty------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">-----add------</span><br><span class="line">[Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;, Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, Student&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">20</span>&#125;, Student&#123;name=<span class="string">&#x27;孙六&#x27;</span>, age=<span class="number">21</span>&#125;, Student&#123;name=<span class="string">&#x27;赵七&#x27;</span>, age=<span class="number">22</span>&#125;]</span><br><span class="line">-----size------</span><br><span class="line"><span class="number">5</span></span><br><span class="line">-----remove------</span><br><span class="line">[Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;, Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, Student&#123;name=<span class="string">&#x27;孙六&#x27;</span>, age=<span class="number">21</span>&#125;, Student&#123;name=<span class="string">&#x27;赵七&#x27;</span>, age=<span class="number">22</span>&#125;]</span><br><span class="line">------removeAll-----</span><br><span class="line">[Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;, Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, Student&#123;name=<span class="string">&#x27;赵七&#x27;</span>, age=<span class="number">22</span>&#125;]</span><br><span class="line">------retainAll-----</span><br><span class="line">[Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;, Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, Student&#123;name=<span class="string">&#x27;赵七&#x27;</span>, age=<span class="number">22</span>&#125;]</span><br><span class="line">有交集：<span class="keyword">true</span></span><br><span class="line">没有交集：<span class="keyword">true</span></span><br><span class="line">两个集合相等：<span class="keyword">false</span></span><br><span class="line">------contains-----</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">------containsAll-----</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">------equals and hashcode-----</span><br><span class="line">[Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;, Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;]</span><br><span class="line">collection-<span class="number">1492222893</span></span><br><span class="line">collection5-<span class="number">1698792011</span></span><br><span class="line">collection6-<span class="number">1492222893</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">------addAll-----</span><br><span class="line">[Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;, Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, Student&#123;name=<span class="string">&#x27;孙六&#x27;</span>, age=<span class="number">21</span>&#125;, Student&#123;name=<span class="string">&#x27;刘八&#x27;</span>, age=<span class="number">23</span>&#125;]</span><br><span class="line">------遍历-----</span><br><span class="line">张三 李四 孙六 刘八 </span><br><span class="line">张三 李四 孙六 刘八 </span><br><span class="line">[Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;, Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, Student&#123;name=<span class="string">&#x27;孙六&#x27;</span>, age=<span class="number">21</span>&#125;]</span><br><span class="line">------toArray-----</span><br><span class="line">张三 李四 孙六 </span><br><span class="line">------clear-----</span><br><span class="line">[Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;, Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>&#125;, Student&#123;name=<span class="string">&#x27;孙六&#x27;</span>, age=<span class="number">21</span>&#125;]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="值得注意：Collection的equals方法并没有重写"><a href="#值得注意：Collection的equals方法并没有重写" class="headerlink" title="值得注意：Collection的equals方法并没有重写"></a>值得注意：Collection的equals方法并没有重写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------Collection-------&quot;</span>);</span><br><span class="line">        Collection c1=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        Fruit apple=<span class="keyword">new</span> Fruit(<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        c1.add(apple);</span><br><span class="line">        Collection c2=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        c2.add(<span class="keyword">new</span> Fruit(<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;red&quot;</span>));</span><br><span class="line">        System.out.println(c1.equals(c2));</span><br><span class="line">        System.out.println(c1.hashCode()+<span class="string">&quot; | &quot;</span>+c2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;------Collection(String)-------&quot;</span>);</span><br><span class="line">        Collection c3=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        Collection c4=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        c3.add(<span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line">        c4.add(<span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line">        System.out.println(c3.equals(c4));<span class="comment">//返回true，因为字符串的比较重写了equals方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">------Collection(obj)-------</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="number">1554874533</span> | <span class="number">1846274167</span></span><br><span class="line">------Collection(String)-------</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h1 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h1><h2 id="List方法"><a href="#List方法" class="headerlink" title="List方法"></a>List方法</h2><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/linkmethod.png"></p><h2 id="List案例实现"><a href="#List案例实现" class="headerlink" title="List案例实现"></a>List案例实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list= <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">20</span>);<span class="comment">//添加基本类型会自动装箱</span></span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        list.add(<span class="number">50</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----add(int,E)-----&quot;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>,<span class="number">60</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----addAll(int,E)-----&quot;</span>);</span><br><span class="line">        List list2= <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list2.add(<span class="number">20</span>);</span><br><span class="line">        list2.add(<span class="number">80</span>);</span><br><span class="line">        list.addAll(<span class="number">2</span>,list2);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----remove(int)-----&quot;</span>);</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----get(int)-----&quot;</span>);</span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----set(int,E)-----&quot;</span>);</span><br><span class="line">        list.set(<span class="number">1</span>,<span class="number">50</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----lastIndexOf/indexOf(Object)-----&quot;</span>);</span><br><span class="line">        System.out.println(list.indexOf(<span class="number">50</span>));</span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----遍历-----&quot;</span>);</span><br><span class="line">        <span class="comment">//1.增强for 2.iterator迭代器 继承Collection，这两个方法遍历一样</span></span><br><span class="line">        <span class="comment">//3.for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>,list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//4.使用列表迭代器，和iterator的区别，listIterator可以向前或向后遍历添加删除修改元素</span></span><br><span class="line">        ListIterator listIterator = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasNext())&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;[%d]:%d &quot;</span>,listIterator.nextIndex(),listIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasPrevious())&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;[%d]:%d &quot;</span>,listIterator.previousIndex(),listIterator.previous());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">[<span class="number">20</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">-----add(<span class="keyword">int</span>,E)-----</span><br><span class="line">[<span class="number">20</span>, <span class="number">60</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">-----addAll(<span class="keyword">int</span>,E)-----</span><br><span class="line">[<span class="number">20</span>, <span class="number">60</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">-----remove(<span class="keyword">int</span>)-----</span><br><span class="line">[<span class="number">20</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">-----get(<span class="keyword">int</span>)-----</span><br><span class="line"><span class="number">80</span></span><br><span class="line">-----set(<span class="keyword">int</span>,E)-----</span><br><span class="line">[<span class="number">20</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">-----lastIndexOf/indexOf(Object)-----</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">-----遍历-----</span><br><span class="line"><span class="number">20</span> <span class="number">50</span> <span class="number">80</span> <span class="number">40</span> <span class="number">50</span> </span><br><span class="line">[<span class="number">0</span>]:<span class="number">20</span> [<span class="number">1</span>]:<span class="number">50</span> [<span class="number">2</span>]:<span class="number">80</span> [<span class="number">3</span>]:<span class="number">40</span> [<span class="number">4</span>]:<span class="number">50</span> </span><br><span class="line">[<span class="number">4</span>]:<span class="number">50</span> [<span class="number">3</span>]:<span class="number">40</span> [<span class="number">2</span>]:<span class="number">80</span> [<span class="number">1</span>]:<span class="number">50</span> [<span class="number">0</span>]:<span class="number">20</span> </span><br></pre></td></tr></table></figure><h1 id="ArrayList实现类"><a href="#ArrayList实现类" class="headerlink" title="ArrayList实现类"></a>ArrayList实现类</h1><h2 id="ArrayList方法及案例实现"><a href="#ArrayList方法及案例实现" class="headerlink" title="ArrayList方法及案例实现"></a>ArrayList方法及案例实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList arr=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        Fruit apple=<span class="keyword">new</span> Fruit(<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        Fruit banana=<span class="keyword">new</span> Fruit(<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">        Fruit orange=<span class="keyword">new</span> Fruit(<span class="string">&quot;橙子&quot;</span>,<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">        arr.add(apple);</span><br><span class="line">        arr.add(banana);</span><br><span class="line">        arr.add(orange);</span><br><span class="line">        System.out.println(<span class="string">&quot;------集合中存的是对象的引用-------&quot;</span>);</span><br><span class="line">        apple.setName(<span class="string">&quot;大苹果&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加进集合之后再改变apple的名字&quot;</span>);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        <span class="comment">//添加元素 和List的方法一样，此处不再赘述</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------remove(obj)-------&quot;</span>);</span><br><span class="line">        <span class="comment">//删除元素 remove源码中其实是调用了equals方法。主要是比较两者的地址</span></span><br><span class="line">        <span class="comment">//如果重写Fruit的equals方法之后，就是比较两者的内容了</span></span><br><span class="line">        arr.remove(<span class="keyword">new</span> Fruit(<span class="string">&quot;橙子&quot;</span>,<span class="string">&quot;orange&quot;</span>));</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;------遍历-------&quot;</span>);</span><br><span class="line">        <span class="comment">//1.增强for 2.iterator迭代器 3.listIterator列表迭代器 4.for</span></span><br><span class="line">        <span class="comment">//列表逆序 先将指针移动到尾部，然后从尾部向头部遍历</span></span><br><span class="line">        ListIterator listIterator = arr.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasNext())&#123;</span><br><span class="line">            listIterator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(listIterator.hasPrevious())&#123;</span><br><span class="line">            Fruit f=(Fruit) listIterator.previous();</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s &quot;</span>,f.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;------contains(obj)-------&quot;</span>);</span><br><span class="line">        System.out.println(arr.contains(<span class="keyword">new</span> Fruit(<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;yellow&quot;</span>)));</span><br><span class="line">        System.out.println(<span class="string">&quot;------indexOf(obj)-------&quot;</span>);</span><br><span class="line">        System.out.println(arr.indexOf(<span class="keyword">new</span> Fruit(<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;yellow&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">------集合中存的是对象的引用-------</span><br><span class="line">添加进集合之后再改变apple的名字</span><br><span class="line">[Fruit&#123;name=<span class="string">&#x27;大苹果&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>&#125;, Fruit&#123;name=<span class="string">&#x27;香蕉&#x27;</span>, color=<span class="string">&#x27;yellow&#x27;</span>&#125;, Fruit&#123;name=<span class="string">&#x27;橙子&#x27;</span>, color=<span class="string">&#x27;orange&#x27;</span>&#125;]</span><br><span class="line">------remove(obj)-------</span><br><span class="line">[Fruit&#123;name=<span class="string">&#x27;大苹果&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>&#125;, Fruit&#123;name=<span class="string">&#x27;香蕉&#x27;</span>, color=<span class="string">&#x27;yellow&#x27;</span>&#125;]</span><br><span class="line">------遍历-------</span><br><span class="line">Fruit&#123;name=<span class="string">&#x27;香蕉&#x27;</span>, color=<span class="string">&#x27;yellow&#x27;</span>&#125; Fruit&#123;name=<span class="string">&#x27;大苹果&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>&#125; </span><br><span class="line">------contains(obj)-------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">------indexOf(obj)-------</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="ArrayList的数据结构"><a href="#ArrayList的数据结构" class="headerlink" title="ArrayList的数据结构"></a>ArrayList的数据结构</h2><ul><li>分析一个类的时候，数据结构往往是它的灵魂所在，理解底层的数据结构其实就理解了该类的实现思路，具体的实现细节再具体分析。ArrayList底层的数据结构就是数组，数组元素类型为Object类型，即可以存放所有类型数据。我们对 ArrayList类的实例的所有的操作底层都是基于数组的。</li></ul><h2 id="ArrayList的源码分析-JDK1-8"><a href="#ArrayList的源码分析-JDK1-8" class="headerlink" title="ArrayList的源码分析(JDK1.8)"></a>ArrayList的源码分析(JDK1.8)</h2><h3 id="继承结构和层次关系"><a href="#继承结构和层次关系" class="headerlink" title="继承结构和层次关系"></a>继承结构和层次关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为什么要先继承AbstractList，而让AbstractList先实现List？而不是让ArrayList直接实现List？"><a href="#为什么要先继承AbstractList，而让AbstractList先实现List？而不是让ArrayList直接实现List？" class="headerlink" title="为什么要先继承AbstractList，而让AbstractList先实现List？而不是让ArrayList直接实现List？"></a>为什么要先继承AbstractList，而让AbstractList先实现List？而不是让ArrayList直接实现List？</h4><ul><li>这里是有一个思想，接口中全都是抽象的方法，而抽象类中可以有抽象方法，还可以有具体的实现方 法，正是利用了这一点，让AbstractList是实现接口中一些通用的方法，而具体的类，如ArrayList就继承这个AbstractList类，拿到一些通用的方法，然后自己在实现一些自己特有的方法，这样一来，让代码更简洁，就继承结构最底层的类中通用的方法都抽取出来，先一起实现了，减少重复代码。所以一般看到 一个类上面还有一个抽象类，应该就是这个作用。</li></ul><h4 id="ArrayList实现了哪些接口"><a href="#ArrayList实现了哪些接口" class="headerlink" title="ArrayList实现了哪些接口"></a>ArrayList实现了哪些接口</h4><ul><li>List接口：部分人解释是为了查阅代码方便。</li><li>RandomAccess接口：用来快速随机存取， 有关效率的问题，在实现了该接口的话，那么使用普通的for循环来遍历，性能更高。</li><li>Cloneable接口：实现了该接口，就可以使用Object.Clone()方法了。</li><li>Serializable接口：</li><li>实现该序列化接口，表明该类可以被序列化，什么是序列化?简单的说，就是能够从类变成字节流传输，然后还能从字节流变成原来的类。</li></ul><h3 id="类中的属性"><a href="#类中的属性" class="headerlink" title="类中的属性"></a>类中的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 版本号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认初始容量</span></span><br><span class="line"><span class="comment">     * Default initial capacity. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空对象数组</span></span><br><span class="line"><span class="comment">     * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始对象数组</span></span><br><span class="line"><span class="comment">     * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment">     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment">     * first element is added.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素数组</span></span><br><span class="line"><span class="comment">     * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment">     * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment">     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment">     * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际元素大小，默认为0</span></span><br><span class="line"><span class="comment">     * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="无参构造-ArrayList"><a href="#无参构造-ArrayList" class="headerlink" title="无参构造 ArrayList()"></a>无参构造 ArrayList()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment">//构造一个空的列表，初始容量为10</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有参构造-ArrayList-int-initialCapacity"><a href="#有参构造-ArrayList-int-initialCapacity" class="headerlink" title="有参构造 ArrayList(int initialCapacity)"></a>有参构造 ArrayList(int initialCapacity)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment">//构造一个空的列表，自定义初始容量大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//自定义初始容量大小</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//等同于无参构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+ initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有参构造-ArrayList-Collection-lt-extends-E-gt-c"><a href="#有参构造-ArrayList-Collection-lt-extends-E-gt-c" class="headerlink" title="有参构造 ArrayList(Collection&lt;? extends E&gt; c)"></a>有参构造 ArrayList(Collection&lt;? extends E&gt; c)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Constructs a list containing the elements of the specified collection, in the order they are returned by the collection&#x27;s iterator.</span></span><br><span class="line"><span class="comment">//按照集合迭代器返回元素的顺序构造包含指定集合的元素的列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">  <span class="comment">//每个集合的toarray()的实现方法不一样，所以需要判断一下，如果不是Object[].class类型，那么久需要使用ArrayList中的方法去改造一下。</span></span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="comment">//等同于无参构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add方法的源码分析"><a href="#add方法的源码分析" class="headerlink" title="add方法的源码分析"></a>add方法的源码分析</h3><h4 id="boolean-add-E"><a href="#boolean-add-E" class="headerlink" title="boolean add(E)"></a>boolean add(E)</h4><h5 id="情况1-无参初始化并添加一个元素"><a href="#情况1-无参初始化并添加一个元素" class="headerlink" title="情况1 无参初始化并添加一个元素"></a>情况1 无参初始化并添加一个元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ArrayList arr = new ArrayList(); //这句可以理解为初始化一个空的数组</span></span><br><span class="line"><span class="comment">arr.add(xxx);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">//添加一个特定的元素到list的末尾</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进入这个函数ensureCapacityInternal(size + 1); </span></span><br><span class="line"><span class="comment">size是数组中数据的个数，因为要添加一个元素，所以size+1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">  ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进入这个函数calculateCapacity(elementData, minCapacity);</span></span><br><span class="line"><span class="comment">  其中elementData还是空的数组，minCapacity=初始size的值+1=1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  注意:若a，b都为数组，则：</span></span><br><span class="line"><span class="comment">            a=b ，比较的是地址</span></span><br><span class="line"><span class="comment">            a.equals(b) 比较的是地址</span></span><br><span class="line"><span class="comment">            Arrays.equals(a, b) 比较的是元素内容</span></span><br><span class="line"><span class="comment">        当比较两个字符串的时候，它使用的是String类下的equals()方法，这个方法比较的是对象值。</span></span><br><span class="line"><span class="comment">当比较两个数组的值的时候，需要使用Arrays类中的equals()方法。即Arrays.equals(a, b)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//在构造函数中this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span></span><br><span class="line">  <span class="comment">//所以if语句执行true Math.max(10, 1)=10 返回10</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">      <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进入这个函数ensureCapacityInternal(int minCapacity); 此时minCapacity=10</span></span><br><span class="line"><span class="comment">  但注意还没有真正的改变这个elementData的大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">  <span class="comment">// minCapacity=10 elementData.length=0 所以minCapacity - elementData.length &gt; 0</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">      grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进入这个函数grow(minCapacity); minCapacity=10 这是数组扩容的核心函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length; <span class="comment">//oldCapacity=0</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//newCapacity= 0 + 0 = 0</span></span><br><span class="line">  <span class="comment">//newCapacity - minCapacity = -10 &lt; 0执行下面if语句</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = minCapacity; <span class="comment">//此时newCapacity=10</span></span><br><span class="line">  <span class="comment">//如果newCapacity超过了最大的容量限制，就调用hugeCapacity，也就是将能给的最大值给 newCapacity</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">//minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">  <span class="comment">//新的容量大小已经确定好了，就copy数组，改变容量大小</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果newCapacity超过了最大的容量限制，就调用hugeCapacity</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">  <span class="comment">//如果minCapacity大于MAX_ARRAY_SIZE，那么就Integer.MAX_VALUE返回，反之将 MAX_ARRAY_SIZE返回</span></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">      Integer.MAX_VALUE :</span><br><span class="line">    MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">最后再回过来执行boolean add(E e)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="情况2-有参初始化并添加一个元素"><a href="#情况2-有参初始化并添加一个元素" class="headerlink" title="情况2 有参初始化并添加一个元素"></a>情况2 有参初始化并添加一个元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ArrayList arr = new ArrayList(6); //这句可以理解为elementData的大小已经是6</span></span><br><span class="line"><span class="comment">arr.add(xxx);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//执行到这一步的时候 if语句不成立 返回minCapacity=size+1=1</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">      <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">  <span class="comment">// minCapacity - elementData.length = 1 - 6 &lt; 0 所以不会执行grow函数，也就不会扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">      grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="情况3-无餐初始化并添加第11个元素时"><a href="#情况3-无餐初始化并添加第11个元素时" class="headerlink" title="情况3 无餐初始化并添加第11个元素时"></a>情况3 无餐初始化并添加第11个元素时</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ArrayList arr = new ArrayList(); //这句可以理解为初始化一个空的数组</span></span><br><span class="line"><span class="comment">arr.add(xxx);</span></span><br><span class="line"><span class="comment">:</span></span><br><span class="line"><span class="comment">:</span></span><br><span class="line"><span class="comment">arr.add(xxx);</span></span><br><span class="line"><span class="comment">arr.add(xxx); 已经添加10个元素，要添加第11个元素时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">添加了第10个元素时，执行elementData[size++] = e; 意味着elementData[size] = e，然后size自增等于10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//执行到这一步的时候 if语句不成立 返回minCapacity=size+1=11</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">      <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">  <span class="comment">// minCapacity - elementData.length = 11 - 10 &gt; 0 所以会执行grow函数，扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">      grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length; <span class="comment">//oldCapacity=10</span></span><br><span class="line">  <span class="comment">//oldCapacity &gt;&gt; 1表示算术右移1位</span></span><br><span class="line">    <span class="comment">//打个比方10的二进制是01010算术右移1位，得00101即转为10进制为5</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//newCapacity= 10 + 5 = 15</span></span><br><span class="line">    <span class="comment">//newCapacity - minCapacity = 15 - 11 &gt;0</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = minCapacity; </span><br><span class="line">  <span class="comment">//如果newCapacity超过了最大的容量限制，就调用hugeCapacity，也就是将能给的最大值给 newCapacity</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">//minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">  <span class="comment">//新的容量大小已经确定好了，就copy数组，改变容量大小</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e; <span class="comment">//扩容完之后再执行这行代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="void-add-int，E"><a href="#void-add-int，E" class="headerlink" title="void add(int，E)"></a>void add(int，E)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查index也就是插入的位置是否合理。</span></span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">  <span class="comment">//将elementData从index开始的元素复制到elementData上，从index + 1开始复制，复制长度为size - index</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rangeCheckForAdd(int index)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//插入的位置肯定不能大于size 和小于0</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="comment">//如果是，就报这个越界异常</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//void arraycopy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="remove方法的源码分析"><a href="#remove方法的源码分析" class="headerlink" title="remove方法的源码分析"></a>remove方法的源码分析</h3><h4 id="remove-int"><a href="#remove-int" class="headerlink" title="remove(int)"></a>remove(int)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查index的合理性</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);<span class="comment">//通过索引直接找到该元素</span></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;<span class="comment">//计算要移动的位数</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="comment">//使用System.arraycopy移动复制元素</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="remove-Object"><a href="#remove-Object" class="headerlink" title="remove(Object)"></a>remove(Object)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//显然arrayList可以存储null值</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">              <span class="comment">//fastRemove(index)方法的内部跟remove(index)的实现几乎一样</span></span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="removeAll-collection-c"><a href="#removeAll-collection-c" class="headerlink" title="removeAll(collection c)"></a>removeAll(collection c)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//batchRemove是removeAll的核心方法，用于两处地方，如果complement为false，则用于removeAll；如果为true，则用于 retainAll()，retainAll()是用来检测两个集合是否有交集的。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">      <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;<span class="comment">//r用来控制循环，w是记录有多少个交集，可以r，w分别看成两个指针在数组之间移动</span></span><br><span class="line">      <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">          <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">            elementData[w++] = elementData[r];</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">        <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">        <span class="comment">//通常情况下，如果程序正常执行，最后r==size，如果r!=size说明contains方法使用过程报异常</span></span><br><span class="line">        <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">          <span class="comment">//r之前的元素都已经完成，将elementData的r指针开始的位置复制到elementData的w指针开始的位置，复制size - r长度</span></span><br><span class="line">          System.arraycopy(elementData, r,</span><br><span class="line">                           elementData, w,</span><br><span class="line">                           size - r);</span><br><span class="line">          w += size - r; <span class="comment">//w指针移动size - r个单位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//retainAll():没有一个交集返回true，有交集但不全交也返回true，而两个集合 相等的时候，返回false，所以不能根据返回值来确认两个集合是否有交集</span></span><br><span class="line">        <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">          <span class="comment">// clear to let GC do its work</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">          modCount += size - w;</span><br><span class="line">          size = w;</span><br><span class="line">          modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/batchRemove.png"></p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><h4 id="set-int-E"><a href="#set-int-E" class="headerlink" title="set(int,E)"></a>set(int,E)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//检验索引是否合法</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"><span class="comment">//找出旧值</span></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">  <span class="comment">//赋新值</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">  <span class="comment">//返回旧值</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="indexOf-Object"><a href="#indexOf-Object" class="headerlink" title="indexOf(Object)"></a>indexOf(Object)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从首开始查找数组里面是否存在指定元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 遍历数组，找到第一个为空的元素，返回下标</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 遍历数组，找到第一个和指定元素相等的元素，返回下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">          <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="get-int-方法"><a href="#get-int-方法" class="headerlink" title="get(int)方法"></a>get(int)方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//检验索引是否合法</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"><span class="comment">//返回索引对应的元素值</span></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识梳理04|String内存分析</title>
      <link href="/articles/ff564ca8.html"/>
      <url>/articles/ff564ca8.html</url>
      
        <content type="html"><![CDATA[<h1 id="String的基础知识"><a href="#String的基础知识" class="headerlink" title="String的基础知识"></a>String的基础知识</h1><ul><li>String是final类，不能被继承，并且其方法都被final修饰。</li><li>String的任何操作都不会影响到原来的String对象, 所有的改变都会创建新String对象。</li></ul><h1 id="String的内存分析"><a href="#String的内存分析" class="headerlink" title="String的内存分析"></a>String的内存分析</h1><h2 id="String-str-“Hello”"><a href="#String-str-“Hello”" class="headerlink" title="String str = “Hello”"></a>String str = “Hello”</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stringclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String str=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String str2=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(str==str2);</span><br><span class="line">        str=<span class="string">&quot;World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/str-1.png"></p><h2 id="String-str-new-String-“Hello”"><a href="#String-str-new-String-“Hello”" class="headerlink" title="String str = new String (“Hello”)"></a>String str = new String (“Hello”)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stringclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  String str= <span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        String str2= <span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        String str3 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(str==str2);</span><br><span class="line">        System.out.println(str==str3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/str-2.png"></p><h2 id="String-str-“Hello”-“World”"><a href="#String-str-“Hello”-“World”" class="headerlink" title="String str = “Hello” + “World”"></a>String str = “Hello” + “World”</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stringclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当一个字符串由多个字符串常量连接而成时，它自己肯定也是字符串常量。</span></span><br><span class="line">        <span class="comment">//该字符串是在编译期就能确定。先是在池里生成“a”和“b”，再通过拼接的方式在池里生成&quot;ab&quot;。</span></span><br><span class="line">        String str=<span class="string">&quot;Hello&quot;</span> + <span class="string">&quot;World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/str-3.png"></p><h2 id="String-str-new-String-“Hello”-new-String-“World”"><a href="#String-str-new-String-“Hello”-new-String-“World”" class="headerlink" title="String str = new String (“Hello”) + new String(“World”)"></a>String str = new String (“Hello”) + new String(“World”)</h2><ul><li>当使用了变量字符串的拼接(+, sb.append)都只会在堆区创建该字符串对象, 并不会在常量池创建新生成的字符串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stringclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/str-4.png"></p><h2 id="String-的-intern-方法"><a href="#String-的-intern-方法" class="headerlink" title="String 的 intern() 方法"></a>String 的 intern() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a canonical representation for the string object.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * A pool of strings, initially empty, is maintained privately by the</span></span><br><span class="line"><span class="comment"> * class &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When the intern method is invoked, if the pool already contains a</span></span><br><span class="line"><span class="comment"> * string equal to this &#123;<span class="doctag">@code</span> String&#125; object as determined by</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #equals(Object)&#125; method, then the string from the pool is</span></span><br><span class="line"><span class="comment"> * returned. Otherwise, this &#123;<span class="doctag">@code</span> String&#125; object is added to the</span></span><br><span class="line"><span class="comment"> * pool and a reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * It follows that for any two strings &#123;<span class="doctag">@code</span> s&#125; and &#123;<span class="doctag">@code</span> t&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> s.intern() == t.intern()&#125; is &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment"> * if and only if &#123;<span class="doctag">@code</span> s.equals(t)&#125; is &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * All literal strings and string-valued constant expressions are</span></span><br><span class="line"><span class="comment"> * interned. String literals are defined in section 3.10.5 of the</span></span><br><span class="line"><span class="comment"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string that has the same contents as this string, but is</span></span><br><span class="line"><span class="comment"> *          guaranteed to be from a pool of unique strings.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>当调用intern方法时，如果池已经包含与equals(Object)方法确定的相当于此String对象的字符串，则返回来自池的字符串。 否则，此String对象将添加到池中，并返回对此String对象的引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stringclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String str2=<span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        String str3=str.intern();</span><br><span class="line">        String str4=str2.intern();</span><br><span class="line">        System.out.println(<span class="string">&quot;str==str3:&quot;</span>+(str==str3));</span><br><span class="line">        System.out.println(<span class="string">&quot;str==str4:&quot;</span>+(str==str4));</span><br><span class="line">        System.out.println(<span class="string">&quot;str2==str3:&quot;</span>+(str2==str3));</span><br><span class="line">        System.out.println(<span class="string">&quot;str2==str4:&quot;</span>+(str2==str4));</span><br><span class="line">        System.out.println(<span class="string">&quot;str3==str4:&quot;</span>+(str3==str4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">str==str3:<span class="keyword">true</span></span><br><span class="line">str==str4:<span class="keyword">true</span></span><br><span class="line">str2==str3:<span class="keyword">false</span></span><br><span class="line">str2==str4:<span class="keyword">false</span></span><br><span class="line">str3==str4:<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/str-5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stringclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>)+<span class="keyword">new</span> String(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        String str2=str.intern();</span><br><span class="line">        String str3=<span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;str==str3:&quot;</span>+(str==str2));</span><br><span class="line">        System.out.println(<span class="string">&quot;str==str4:&quot;</span>+(str==str3));</span><br><span class="line">        System.out.println(<span class="string">&quot;str2==str3:&quot;</span>+(str2==str3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">str==str2:<span class="keyword">true</span></span><br><span class="line">str==str3:<span class="keyword">true</span></span><br><span class="line">str2==str3:<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/str-6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java Difficult Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识梳理03|内部类详解</title>
      <link href="/articles/b2084f96.html"/>
      <url>/articles/b2084f96.html</url>
      
        <content type="html"><![CDATA[<h1 id="内部类的定义"><a href="#内部类的定义" class="headerlink" title="内部类的定义"></a>内部类的定义</h1><ul><li>可以将一个类的定义放在另一个类的定义内部，这就是内部类。</li></ul><h1 id="内部类的种类"><a href="#内部类的种类" class="headerlink" title="内部类的种类"></a>内部类的种类</h1><ul><li>在 Java 中内部类主要分为成员内部类、局部内部类、匿名内部类、静态内部类。</li></ul><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><ul><li>成员内部类定义格式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>成员内部类无条件访问外部类的属性和方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;Outer&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。</p></li><li><p>Inner类定义在Outer类的内部，相当于Outer类的成员变量的位置，Inner类可以使用任意访问修饰符。</p></li><li><p>成员内部类中不能定义static成员，但是可以存在static域，前提是需要使用final关键字进行修饰。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String oName = <span class="string">&quot;name = Outer&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer=<span class="keyword">new</span> Outer();</span><br><span class="line">        Outer.Inner inner=outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        System.out.println(inner.iName);</span><br><span class="line">        inner.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String iName=<span class="string">&quot;name = Inner&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> age=<span class="number">18</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(oName);</span><br><span class="line">            System.out.println(<span class="string">&quot;age = &quot;</span>+age);</span><br><span class="line">            run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">name = Inner</span><br><span class="line">name = Outer</span><br><span class="line">Outer run</span><br></pre></td></tr></table></figure><ul><li>如果成员内部类的属性或者方法与外部类的同名，将导致外部类的这些属性与方法在内部类被隐藏，可按照该格式调用，外部类.this.属性/方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name = <span class="string">&quot;name = Outer&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer=<span class="keyword">new</span> Outer();</span><br><span class="line">        Outer.Inner inner=outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name=<span class="string">&quot;name = Inner&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner run&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Inner().name);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            run();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Outer().name);</span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.name);</span><br><span class="line">            Outer.<span class="keyword">this</span>.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">name = Inner</span><br><span class="line">name = Inner</span><br><span class="line">Inner run</span><br><span class="line">name = Outer</span><br><span class="line">name = Outer</span><br><span class="line">Outer run</span><br></pre></td></tr></table></figure><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><ul><li>局部内部类定义格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>局部内部类无条件访问外部类的属性和方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;他是&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Hobby</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> String hobby=<span class="string">&quot;跳舞&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">                introduce();</span><br><span class="line">                System.out.println(name+<span class="string">&quot;爱&quot;</span>+hobby);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>局部内部类嵌套在方法和作用域内的，只是它的作用域发生了改变，它只能在该方法和属性中被使用，出了该方法和属性就会失效。</li><li>局部内部类中不能定义static成员，但是可以存在static域，前提是需要使用final关键字进行修饰。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;他是&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Hobby</span></span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String intr=<span class="string">&quot;介绍:&quot;</span>;</span><br><span class="line">            <span class="keyword">private</span> String hobby=<span class="string">&quot;跳舞&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(intr);</span><br><span class="line">                introduce();</span><br><span class="line">                System.out.println(name+<span class="string">&quot;爱&quot;</span>+hobby);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Hobby hobby=<span class="keyword">new</span> Hobby();</span><br><span class="line">        hobby.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        person.show();</span><br><span class="line"><span class="comment">//      Hobby hobby=new Hobby(); 编译错误</span></span><br><span class="line"><span class="comment">//      Person.Hobby hobby=new Person.new Hobby(); 编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">介绍:</span><br><span class="line">他是张三</span><br><span class="line">张三爱跳舞</span><br></pre></td></tr></table></figure><ul><li>如果局部内部类的属性或者方法与外部类的同名，将导致外部类的这些属性与方法在内部类被隐藏，可按照该格式调用，外部类.this.属性/方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;Person&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Hobby</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> String name=<span class="string">&quot;Hobby&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Hobby hobby=<span class="keyword">new</span> Hobby();</span><br><span class="line">        System.out.println(hobby.name);</span><br><span class="line">        hobby.say();</span><br><span class="line">        System.out.println(Person.<span class="keyword">this</span>.name);</span><br><span class="line">        Person.<span class="keyword">this</span>.say();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        person.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">Hobby</span><br><span class="line">Hobby</span><br><span class="line">Person</span><br><span class="line">Person</span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><ul><li>匿名内部类也就是没有名字的内部类。正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写。但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用匿名内部类来实现抽象方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line">say</span><br></pre></td></tr></table></figure><ul><li>使用匿名内部类实现抽象方法和接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal=<span class="keyword">new</span> Animal()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;shout&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line">shout</span><br><span class="line">    </span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可用此代码替代下面代码 Animal animal= () -&gt; System.out.println(&quot;shout&quot;);</span></span><br><span class="line">        Animal animal=<span class="keyword">new</span> Animal()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;shout&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line">shout</span><br></pre></td></tr></table></figure><ul><li>匿名内部类最常用的情况就是在多线程的实现上，因为要实现多线程必须继承 Thread 类或是继承 Runnable 接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Thread类的匿名内部类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//Runnable接口的匿名内部类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ul><li>静态内部类定义格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">U</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>static 不仅可以修饰成员变量、方法、代码块，它还可以修饰内部类，使用 static 修饰的内部类我们称之为静态内部类。</p></li><li><p>静态内部类只能访问外围类的静态成员变量和方法，不能访问外围类的非静态成员变量和方法。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age=<span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;outer staticMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;outer method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String hobby=<span class="string">&quot;跳舞&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> OutClass().name+<span class="string">&quot;爱&quot;</span>+hobby);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//System.out.println(name); 错误</span></span><br><span class="line">            System.out.println(<span class="string">&quot;姓名：&quot;</span>+<span class="keyword">new</span> OutClass().name);</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄：&quot;</span>+age);</span><br><span class="line">            staticMethod();</span><br><span class="line">            <span class="keyword">new</span> OutClass().method();</span><br><span class="line">            <span class="comment">//method(); 错误</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(InCLass.name2); 错误</span></span><br><span class="line">        InClass inClass=<span class="keyword">new</span> InClass();</span><br><span class="line">        inClass.show();</span><br><span class="line">        InClass.dance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line">姓名：张三</span><br><span class="line">年龄：<span class="number">18</span></span><br><span class="line">outer staticMethod</span><br><span class="line">outer method</span><br><span class="line">张三爱跳舞</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java Difficult Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识梳理02|关键字及部分重点作用详解</title>
      <link href="/articles/108617ef.html"/>
      <url>/articles/108617ef.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java关键字的概念"><a href="#Java关键字的概念" class="headerlink" title="Java关键字的概念"></a>Java关键字的概念</h1><ul><li>Java关键字是电脑语言里事先定义的，有特别意义的标识符，有时又叫保留字，还有特别意义的变量。Java的关键字对Java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，关键字不能用作变量名、方法名、类名、包名和参数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/key.JPG"></p><h1 id="部分关键字重点作用详解"><a href="#部分关键字重点作用详解" class="headerlink" title="部分关键字重点作用详解"></a>部分关键字重点作用详解</h1><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/acccontrol.JPG"></p><h3 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h3><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/packageconstruction.JPG"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person类 当前类</span></span><br><span class="line"><span class="keyword">package</span> keyword.keyfunction;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> String age=<span class="string">&quot;男&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height=<span class="number">178</span>;</span><br><span class="line">    <span class="keyword">double</span> weight=<span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public 当前类 √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//protected 当前类 √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//private 当前类 √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//default 当前类 √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Doctor类 同一包内</span></span><br><span class="line"><span class="keyword">package</span> keyword.keyfunction;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Doctor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public 同一包内 √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//protected 同一包内 √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//private 同一包内 ×</span></span><br><span class="line">        <span class="comment">//System.out.println(new Person().height);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//default 同一包内 √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Student类 子孙类（同一包）</span></span><br><span class="line"><span class="keyword">package</span> keyword.keyfunction;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public 子孙类（同一包） √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//protected 子孙类（同一包） √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//private 子孙类（同一包） ×</span></span><br><span class="line">        <span class="comment">//System.out.println(new Person().height);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//default 子孙类（同一包） √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Teacher类 子孙类（不同包）</span></span><br><span class="line"><span class="keyword">package</span> keyword.others;</span><br><span class="line"><span class="keyword">import</span> keyword.keyfunction.Person;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public 子孙类（不同包） √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//protected 子孙类（不同包） ×</span></span><br><span class="line">        <span class="comment">//System.out.println(new Person().age);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//private 子孙类（不同包） ×</span></span><br><span class="line">        <span class="comment">//System.out.println(new Person().height);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//default 子孙类（不同包） ×</span></span><br><span class="line">        <span class="comment">//System.out.println(new Person().weight);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Worker类 其他包</span></span><br><span class="line"><span class="keyword">package</span> keyword.others;</span><br><span class="line"><span class="keyword">import</span> keyword.keyfunction.Person;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public 其他包 √</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Person().name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//protected 其他包 ×</span></span><br><span class="line">        <span class="comment">//System.out.println(new Person().age);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//private 其他包 ×</span></span><br><span class="line">        <span class="comment">//System.out.println(new Person().height);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//default 其他包 ×</span></span><br><span class="line">        <span class="comment">//System.out.println(new Person().weight);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="static-静态变量"><a href="#static-静态变量" class="headerlink" title="static 静态变量"></a>static 静态变量</h3><ul><li>在类中，使用static修饰的成员变量，就是静态变量,反之为非静态变量。</li><li>静态变量属于类的，可以使用类名来访问，非静态变量是属于对象的，必须使用对象来访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用类名的形式修改静态变量的值</span></span><br><span class="line">        StaticTest.name=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        <span class="comment">//使用类名来访问</span></span><br><span class="line">        System.out.println(<span class="string">&quot;类名形式修改之后类名访问:&quot;</span>+StaticTest.name);</span><br><span class="line">        StaticTest st=<span class="keyword">new</span> StaticTest();</span><br><span class="line">        <span class="comment">//使用对象来访问</span></span><br><span class="line">        System.out.println(<span class="string">&quot;类名形式修改之后对象名访问:&quot;</span>+st.name);</span><br><span class="line">        <span class="comment">//使用对象名的形式修改静态变量的值</span></span><br><span class="line">        st.name=<span class="string">&quot;王五&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象名形式修改之后对象名访问:&quot;</span>+st.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;对象名形式修改之后类访问:&quot;</span>+st.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line">类名形式修改之后类名访问:李四</span><br><span class="line">类名形式修改之后对象名访问:李四</span><br><span class="line">对象名形式修改之后对象名访问:王五</span><br><span class="line">对象名形式修改之后类访问:王五</span><br></pre></td></tr></table></figure><h4 id="静态变量值的问题"><a href="#静态变量值的问题" class="headerlink" title="静态变量值的问题"></a>静态变量值的问题</h4><ul><li>Java中变量主要分为：局部变量、成员变量，而成员变量又分为实例变量和类变量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">6</span>; <span class="comment">// 定义静态成员变量</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">StaticTest t1 = <span class="keyword">new</span> StaticTest(); <span class="comment">// 创建t1对象</span></span><br><span class="line">StaticTest t2 = <span class="keyword">new</span> StaticTest(); <span class="comment">// 创建t2对象</span></span><br><span class="line"> </span><br><span class="line">        t1.n = <span class="number">100</span>; <span class="comment">// 修改t1的变量n的值100</span></span><br><span class="line">t2.i = <span class="number">60</span>; <span class="comment">// 修改t2的变量i的值为60</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用第一个对象调用类成员变量</span></span><br><span class="line">System.out.println(<span class="string">&quot;第一个实例对象变量i：&quot;</span> + t1.i); <span class="comment">// 输出60</span></span><br><span class="line">System.out.println(<span class="string">&quot;第一个实例对象变量n：&quot;</span> + t1.n); <span class="comment">// 输出100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用第二个对象调用类成员变量</span></span><br><span class="line">System.out.println(<span class="string">&quot;第二个实例对象变量i：&quot;</span> + t2.i); <span class="comment">// 输出60</span></span><br><span class="line">System.out.println(<span class="string">&quot;第二个实例对象变量n：&quot;</span> + t2.n); <span class="comment">// 输出0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">第一个实例对象变量i：<span class="number">60</span></span><br><span class="line">第一个实例对象变量n：<span class="number">100</span></span><br><span class="line">第二个实例对象变量i：<span class="number">60</span></span><br><span class="line">第二个实例对象变量n：<span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>局部变量：在方法内部声明（定义）的变量，只在这个方法内部有效，出了这个方法就无法使用，可以理解为销毁。<ul><li>比如代码中的 t1 和 t2 ，只在main方法中可用。</li></ul></li><li>实例变量：成员变量中的实例变量，没有使用static关键字修饰的成员变量，随着对象的创建，会在堆空间分配实例变量空间，进行默认赋值。<ul><li>如代码中的变量 n 。他在每一个实例化的对象中都是独立的，每个对象修改其值后，只是修改该对象自己的这个变量 n ，其他对象的 n 不受影响。用底层的理解就是，每个对象的变量 n 有独立的内存，他们互不影响。</li></ul></li><li>类变量：成员变量中的类变量，是使用static关键字修饰的成员变量。<ul><li>如代码中的变量 i 。之所以叫做类变量，是因为这个类只有这一个变量 i ，不管实例化多少个对象，他的 i 只有这一个，所以会出现一个对象修改了 i 的值后，其他对象的 i 也跟着变的现象。用底层的理解就是，所有这个类实例化的对象使用的变量 i ，指向的是同一个内存。</li></ul></li></ul><h3 id="static-静态方法"><a href="#static-静态方法" class="headerlink" title="static 静态方法"></a>static 静态方法</h3><ul><li>在类中，使用static修饰的成员方法,就是静态方法,反之为非静态方法。</li><li>静态方法数属于类的，可以使用类名来调用，非静态方法是属于对象的，必须使用对象来调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用类名来访问</span></span><br><span class="line">        StaticTest.sayHello();</span><br><span class="line">        <span class="comment">//使用对象来访问</span></span><br><span class="line">        StaticTest st=<span class="keyword">new</span> StaticTest();</span><br><span class="line">        st.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">Hello</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><ul><li>静态方法中可以直接调用同类中的静态变量，但不能直接调用非静态变量。如果希望在静态方法中调用非静态变量，可以通过创建类的对象，然后通过对象来访问非静态变量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;姓名：&quot;</span>+name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态方法不能直接调用非静态变量</span></span><br><span class="line">    <span class="comment">//System.out.println(&quot;年龄：&quot;+age);</span></span><br><span class="line">    </span><br><span class="line">    StaticTest st=<span class="keyword">new</span> StaticTest();</span><br><span class="line">    System.out.println(<span class="string">&quot;年龄：&quot;</span>+st.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在普通成员方法中，则可以直接访问同类的非静态变量和静态变量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">originalMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;姓名：&quot;</span>+name);</span><br><span class="line">    System.out.println(<span class="string">&quot;年龄：&quot;</span>+age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态方法中能直接调用静态方法，不能直接调用非静态方法，需要通过对象来访问非静态方法。而在普通成员方法中，能直接调用静态方法和非静态方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(name+<span class="string">&quot;正在跑步&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">originalMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//非静态方法调用普通成员方法</span></span><br><span class="line">    introduce();</span><br><span class="line">    <span class="comment">//非静态方法调用静态方法</span></span><br><span class="line">    run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;姓名：&quot;</span>+name);</span><br><span class="line"></span><br><span class="line">    StaticTest st=<span class="keyword">new</span> StaticTest();</span><br><span class="line">    System.out.println(<span class="string">&quot;年龄：&quot;</span>+st.age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态方法调用普通成员方法</span></span><br><span class="line">    StaticTest st=<span class="keyword">new</span> StaticTest();</span><br><span class="line">    st.originalMethod();</span><br><span class="line">    <span class="comment">//静态方法调用静态方法</span></span><br><span class="line">    introduce();   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">=========</span><br><span class="line">姓名：张三</span><br><span class="line">年龄：<span class="number">18</span></span><br><span class="line">张三正在跑步</span><br><span class="line">=========</span><br><span class="line">姓名：张三</span><br><span class="line">年龄：<span class="number">18</span></span><br></pre></td></tr></table></figure><ul><li>父类的静态方法可以被子类继承,但是不能被子类重写。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译通过,但不是重写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和非静态方法重写后的效果不一样</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Perosn p = <span class="keyword">new</span> Student();</span><br><span class="line">    p.test(); <span class="comment">//输出Person</span></span><br><span class="line">    p = <span class="keyword">new</span> Person();</span><br><span class="line">    p.test(); <span class="comment">//输出Perosn</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父类的非静态方法不能被子类重写为静态方法。同理，父类的静态方法也不能被子类重写为非静态方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译报错</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public class Student extends Person &#123;</span></span><br><span class="line"><span class="comment">        public static void test()&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Student&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="匿名代码块和静态代码块"><a href="#匿名代码块和静态代码块" class="headerlink" title="匿名代码块和静态代码块"></a>匿名代码块和静态代码块</h3><ul><li>代码块因为没有名字，在程序并不能主动调用这些代码块。 </li><li>匿名代码块是在创建对象的时候自动执行的,并且在构造器执行之前。同时匿名代码块在每次创建对象的时候都会自动执行。</li><li>静态代码块是在类加载完成之后就自动执行,并且只执行一次。</li><li>注意：每个类在第一次被使用的时候就会被加载,并且一般只会加载一次。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">静态态代码块</span><br><span class="line">匿名代码块</span><br><span class="line">构造器</span><br><span class="line">    </span><br><span class="line">匿名代码块</span><br><span class="line">构造器</span><br><span class="line">    </span><br><span class="line">匿名代码块</span><br><span class="line">构造器</span><br></pre></td></tr></table></figure><ul><li>匿名代码块的作用是给对象的成员变量初始化赋值，但是因为构造器也能完成这项工作，所以匿名代码块使用的并不多。</li><li>静态代码块的作用是给类中的静态成员变量初始化赋值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;Jeff&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        <span class="comment">//age=&quot;17&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        name = <span class="string">&quot;Mike&quot;</span>;</span><br><span class="line">        age=<span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Animal.name);</span><br><span class="line">        <span class="comment">//构造器在创建对象的时候自动执行的</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Animal().age);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Animal().name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">Tom</span><br><span class="line"><span class="number">18</span></span><br><span class="line">Mike</span><br></pre></td></tr></table></figure><h3 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h3><ul><li>静态导包就是Java包的静态导入，用import static代替import静态导入包是JDK1.5中的新特性。意思是导入这个类里的静态方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//之前是需要Math.random()调用的</span></span><br><span class="line">        System.out.println(random());</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="区分局部变量和成员变量"><a href="#区分局部变量和成员变量" class="headerlink" title="区分局部变量和成员变量"></a>区分局部变量和成员变量</h3><ul><li>当局部变量和成员变量重名的时候，在方法中使用this表示成员变量以示区分。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thisTest</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.a = a; <span class="comment">//左侧this.a表示位置1的成员变量a，右侧的表示局部变量a</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="return-this"><a href="#return-this" class="headerlink" title="return this"></a>return this</h3><ul><li>首先，区分实例，对象和引用。很多人说c就是Cat类的一个实例，这是非常错误的，c就是引用，不是对象！不是实例！我们new出来的这个东西，真正在内存中的这个东西，相当于一个new Cat()叫做一个对象，叫做一个实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat c = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><ul><li>return this就是返回当前所用的对象，其实理解的时候也可以理解成返回当前所用的对象的引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现i多次自增之后打印</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//increment()通过this关键字返回当前所用的对象的引用，所以很容易对一个对象执行多次操作</span></span><br><span class="line">    <span class="function">ThisTest <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i += <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;<span class="comment">//返回当前所用的对象或者实例，相当于返回x引用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        ThisTest x = <span class="keyword">new</span> ThisTest();</span><br><span class="line">        <span class="comment">//通过x.increment()计算得到i=2，然后返回当前所用的对象的引用，也就是x，随后又可以进行自增打印操作</span></span><br><span class="line">        x.increment().increment().print();</span><br><span class="line">        <span class="comment">//上面这行代码相当于下面两行代码</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ThisTest y = x.increment(); 相当于y引用指向new ThisTest()的内存</span></span><br><span class="line"><span class="comment">        y.increment().print();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line">i = <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="this把当前对象传递给其他方法"><a href="#this把当前对象传递给其他方法" class="headerlink" title="this把当前对象传递给其他方法"></a>this把当前对象传递给其他方法</h3><ul><li>this的意思是当前所用的对象，其实理解的时候也可以理解成当前所用的对象的引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.首先看main函数，new Person创建一个人类，new Apple()此时new了一块内存空间出来，内存中的flag=0.未削皮。调用Person类的eat方法，然后方法的参数中传入new Apple()，此时Apple apple=new Apple()，其中apple为new Apple()这个对象的引用</span></span><br><span class="line"><span class="comment">2.再看eat方法，eat方法传递的参数是对象的引用也就是apple，为了将传进来的苹果变成削了皮的苹果，调用Apple的getPeeled方法</span></span><br><span class="line"><span class="comment">3.Apple的getPeeled方法返回的是Peeler类的peel方法所返回的apple引用，而这个传入的this其实就是apple引用</span></span><br><span class="line"><span class="comment">4.然后创建新的peeled引用指向new Apple()这块内存，并且内存中的flag已经更改，相当于这个苹果已经削了皮</span></span><br><span class="line"><span class="comment">注意：其实至始至终都是在操作new Apple()这个对象的apple引用，而所操作的内存空间也就是最开始new出来的那块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//实现人吃削了皮的苹果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(Apple apple)</span></span>&#123;</span><br><span class="line">        Apple peeled = apple.getPeeled();</span><br><span class="line">        System.out.println(<span class="string">&quot;Yummy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Peeler</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Apple <span class="title">peel</span><span class="params">(Apple apple)</span></span>&#123;</span><br><span class="line">        <span class="comment">//....remove peel</span></span><br><span class="line">        apple.flag=<span class="number">1</span>;<span class="comment">//表示削了皮</span></span><br><span class="line">        <span class="keyword">return</span> apple;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;<span class="comment">//表示没削皮</span></span><br><span class="line">    <span class="function">Apple <span class="title">getPeeled</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Peeler.peel(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person().eat(<span class="keyword">new</span> Apple());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">Yummy</span><br></pre></td></tr></table></figure><h3 id="this可以用于传递多个参数"><a href="#this可以用于传递多个参数" class="headerlink" title="this可以用于传递多个参数"></a>this可以用于传递多个参数</h3><ul><li>this传递多个参数，其实就是使用this把自身对象作为参数传递给一个工具方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> param1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> param2=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(ParamTest paramTest)</span></span>&#123;</span><br><span class="line">        System.out.println(paramTest.param1+<span class="string">&quot; &quot;</span>+paramTest.param2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        test(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParamTest p=<span class="keyword">new</span> ParamTest();</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="在构造器中调用构造器需要使用this"><a href="#在构造器中调用构造器需要使用this" class="headerlink" title="在构造器中调用构造器需要使用this"></a>在构造器中调用构造器需要使用this</h3><ul><li>一个类有许多构造函数，有时候想在一个构造函数中调用其他构造函数，以避免代码重复，可以使用this关键字。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StructureTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StructureTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用一个参数的构造器,并且参数的类型是String</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;Tom&quot;</span>);<span class="comment">//必须放在第一句</span></span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StructureTest</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StructureTest s=<span class="keyword">new</span> StructureTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">姓名:Tom</span><br><span class="line">无参构造函数</span><br></pre></td></tr></table></figure><h3 id="其他注意事项-1"><a href="#其他注意事项-1" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1</span></span><br><span class="line"><span class="keyword">package</span> keyword.keyfunction;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThisTest t1 = <span class="keyword">new</span> ThisTest();</span><br><span class="line">        ThisTest t2 = <span class="keyword">new</span> ThisTest();</span><br><span class="line">        t1.test();</span><br><span class="line">        t2.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">keyword.keyfunction.ThisTest@12a3a380</span><br><span class="line">keyword.keyfunction.ThisTest@29453f44</span><br><span class="line">    </span><br><span class="line"><span class="comment">//例子2</span></span><br><span class="line"><span class="keyword">package</span> keyword.keyfunction;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThisTest <span class="title">getThisTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThisTest s1 = <span class="keyword">new</span> ThisTest();</span><br><span class="line">        ThisTest s2 = s1.getThisTest();</span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><h3 id="静态方法中不能用this和super关键字"><a href="#静态方法中不能用this和super关键字" class="headerlink" title="静态方法中不能用this和super关键字"></a>静态方法中不能用this和super关键字</h3><ul><li><em>this</em>代表的是调用本类的对象，super代表的是调用父类的对象，而静态方法是属于类的，不属于对象，静态方法成功加载后，对象还不一定存在。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;father&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;son&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;Father:&quot;+super.name); 报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Son:&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子类重写父类的变量"><a href="#子类重写父类的变量" class="headerlink" title="子类重写父类的变量"></a>子类重写父类的变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">&quot;father&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;son&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Son().test(<span class="string">&quot;other&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">other</span><br><span class="line">son</span><br><span class="line">father</span><br></pre></td></tr></table></figure><h3 id="③子类重写父类的方法"><a href="#③子类重写父类的方法" class="headerlink" title="③子类重写父类的方法"></a>③子类重写父类的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="comment">//方法重写的时候，子类的权限修饰符必须要大于或者等于父类的权限修饰符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        print();</span><br><span class="line">        <span class="keyword">this</span>.print();</span><br><span class="line">        <span class="keyword">super</span>.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Son().test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">Son</span><br><span class="line">Son</span><br><span class="line">Father</span><br></pre></td></tr></table></figure><h3 id="super用来调用父类的构造器"><a href="#super用来调用父类的构造器" class="headerlink" title="super用来调用父类的构造器"></a>super用来调用父类的构造器</h3><ul><li>子类构造器中会隐式的调用父类的无参构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//super() 隐藏着这句代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Son();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">父类无参构造</span><br><span class="line">子类无参构造</span><br></pre></td></tr></table></figure><ul><li>父类没有无参构造</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父亲：&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     编译报错,子类构造器中会隐式的调用父类的无参构造器,但是父类中没有无参构造器</span></span><br><span class="line"><span class="comment">        public Son() &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;子类无参构造&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例子2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父亲：&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="comment">//编译通过</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意：不管是显式还是隐式的父类的构造器,super语句一定要出现在子类构造器中第一行代码。所以this和super不可能同时使用它们调用构造器的功能,因为它们都要出现在第一行代码位置。</span></span><br></pre></td></tr></table></figure><h3 id="super和this的区别"><a href="#super和this的区别" class="headerlink" title="super和this的区别"></a>super和this的区别</h3><ul><li><p>this：代表本类对象；super：代表父类对象。</p></li><li><p>this：在非继承的条件下也可以使用；super：只能在继承的条件下才能使用。</p></li><li><p>this：调用本类的构造方法；super：调用的父类的构造方法</p></li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类"></a>final修饰类</h3><ul><li>用final修饰的类不能被继承，没有子类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="final修饰方法"><a href="#final修饰方法" class="headerlink" title="final修饰方法"></a>final修饰方法</h3><ul><li>用final修饰的方法可以被继承，但是不能被子类的重写。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用final修饰的变量表示常量，只能被赋一次值.其实使用final修饰的变量也就成了常量了，因为值不会再变了。</li></ul><h3 id="final修饰局部变量"><a href="#final修饰局部变量" class="headerlink" title="final修饰局部变量"></a>final修饰局部变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//编译报错,不能再次赋值</span></span><br><span class="line">        <span class="comment">//a = 2;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例子2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public void print(final int a) &#123;</span></span><br><span class="line"><span class="comment">            //编译报错,不能再次赋值,传参的时候已经赋过了</span></span><br><span class="line"><span class="comment">            a = 1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="final修饰成员变量"><a href="#final修饰成员变量" class="headerlink" title="final修饰成员变量"></a>final修饰成员变量</h3><ul><li>final修饰成员变量时，该成员变量必须在创建对象之前进行赋值，否则编译失败。</li></ul><h4 id="修饰非静态成员变量"><a href="#修饰非静态成员变量" class="headerlink" title="修饰非静态成员变量"></a>修饰非静态成员变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span></span>&#123;</span><br><span class="line">    <span class="comment">//编译失败</span></span><br><span class="line"><span class="comment">//private final int a; final修饰成员变量，该成员变量必须在创建对象之前进行赋值，否则编译失败</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用final修饰成员变量时，只有一次机会,可以给此变量a赋值，有以下几种赋值方法</span></span><br><span class="line">    <span class="comment">//方法1 声明的同时赋值 private final int a=0;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法2 匿名代码块中赋值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    private final int a;</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            a=0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法3 构造器中赋值(类中出现的所有构造器都要写) 代码实现方法3</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="comment">//类中出现的所有构造器都要写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalTest</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">this</span>.a=a;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果加上这两句就报错了，因为只有一次机会,可以给此变量a赋值</span></span><br><span class="line"><span class="comment">        int b=4;</span></span><br><span class="line"><span class="comment">        this.a=b;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FinalTest f1=<span class="keyword">new</span> FinalTest();</span><br><span class="line">        FinalTest f2=<span class="keyword">new</span> FinalTest(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//这里并不是final修饰的a被赋值多次，而是new了两个内存空间出来，每个内存空间的final修饰的a有且仅被赋值1次</span></span><br><span class="line">        System.out.println(f1.a+<span class="string">&quot; &quot;</span>+f2.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="修饰静态成员变量"><a href="#修饰静态成员变量" class="headerlink" title="修饰静态成员变量"></a>修饰静态成员变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和非静态成员变量同理，只有一次机会,可以给此变量a赋值,有以下几种赋值方法</span></span><br><span class="line"><span class="comment">//方法1 声明的同时赋值</span></span><br><span class="line"><span class="comment">//方法2 静态代码块中赋值</span></span><br></pre></td></tr></table></figure><h4 id="修饰引用变量"><a href="#修饰引用变量" class="headerlink" title="修饰引用变量"></a>修饰引用变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> FinalTest f=<span class="keyword">new</span> FinalTest();</span><br><span class="line">        f.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        f.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(f.getName());<span class="comment">//输出结果：李四</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//编译报错,不能修改引用s指向的内存地址</span></span><br><span class="line">        <span class="comment">//f=new FinalTest();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><h3 id="抽象类和抽象方法的关系"><a href="#抽象类和抽象方法的关系" class="headerlink" title="抽象类和抽象方法的关系"></a>抽象类和抽象方法的关系</h3><ul><li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</li><li>抽象类，不能使用new关键字来创建对象，它是用来让子类继承的。 </li><li>抽象方法，只有方法的声明,没有方法的实现，它是用来让子类实现的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;<span class="comment">//抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><h3 id="接口中的方法和变量"><a href="#接口中的方法和变量" class="headerlink" title="接口中的方法和变量"></a>接口中的方法和变量</h3><ul><li>接口中的方法都是抽象方法。接口中的变量都是静态常量(public static final修饰)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Behavior</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;jasper&quot;</span>;</span><br><span class="line"><span class="comment">//默认就是public static final修饰的</span></span><br><span class="line"><span class="keyword">int</span> AGE = <span class="number">18</span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//默认就是public abstract修饰的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个类可以实现多个接口"><a href="#一个类可以实现多个接口" class="headerlink" title="一个类可以实现多个接口"></a>一个类可以实现多个接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Student需要实现接口A,B中所有的抽象方法</span></span><br><span class="line"><span class="comment">//否则Student类就要声明为抽象类,因为有抽象方法没实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    A a=<span class="keyword">new</span> C();<span class="comment">//A只能调用接口A中声明的方法以及Object中的方法</span></span><br><span class="line">    B b=<span class="keyword">new</span> C();<span class="comment">//B只能调用接口B中声明的方法以及Object中的方法</span></span><br><span class="line">    a.run();</span><br><span class="line">    b.sleep();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(a <span class="keyword">instanceof</span> B)&#123;</span><br><span class="line">((B)a).sleep();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">run</span><br><span class="line">sleep</span><br><span class="line">sleep</span><br></pre></td></tr></table></figure><h3 id="一个接口可以继承多个父接口"><a href="#一个接口可以继承多个父接口" class="headerlink" title="一个接口可以继承多个父接口"></a>一个接口可以继承多个父接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口C把接口A,B中的方法都继承过来了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student相当于实现了A B C三个接口,需要实现所有的抽象方法</span></span><br><span class="line"><span class="comment">//Student的对象也就同时属于A类型 B类型 C类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    C o = <span class="keyword">new</span> Student();</span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> A);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> B);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> C);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">    <span class="comment">//编译报错</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> String);<span class="comment">//String类final修饰</span></span><br><span class="line">    <span class="comment">//System.out.println(o instanceof X);</span></span><br><span class="line">    <span class="comment">//如果o是一个接口类型声明的变量,那么只要X不是一个final修饰的类,该代码就能通过编译,至于其结果</span></span><br><span class="line"><span class="comment">//是不是true,就要看变量o指向的对象的实际类型,是不是X的子类或者实现类了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java Difficult Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识梳理01｜类和对象</title>
      <link href="/articles/92ce4ef6.html"/>
      <url>/articles/92ce4ef6.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h1><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><ul><li>面向过程是一种以事件为中心的编程思想，编程的时候把解决问题的步骤分析出来，然后用函数把这些步骤实现，再按一定顺序调用函数将事件完成。</li><li>比如把大象放进冰箱面向过程需要三个步骤，第一步：打开冰箱；第二步：把大象放进冰箱；第三步：关上冰箱。面向过程关注的是怎么样一步一步的把大象放进冰箱。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">把大象放冰箱&#123;</span><br><span class="line">    打开冰箱();</span><br><span class="line">    把大象放进冰箱();</span><br><span class="line">    关上冰箱();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>面向对象是一种以“对象”为中心的编程思想，把要解决的问题分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个对象在整个解决问题的步骤中的属性和行为。</li><li>比如把大象放冰箱面向对象的思维可以把大象当作对象，把冰箱当作对象，通过操作大象和冰箱这两个对象，完成将大象放入冰箱的过程。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/ele.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elephant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> eHeight=<span class="number">3</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">geteHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冰箱类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refrigerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rHeight=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getrHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openRe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开冰箱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeRe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关上冰箱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Elephant elephant=<span class="keyword">new</span> Elephant();</span><br><span class="line">        Refrigerator refrigerator=<span class="keyword">new</span> Refrigerator();</span><br><span class="line">        putIntoRe(elephant,refrigerator);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把大象放进冰箱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putIntoRe</span><span class="params">(Elephant elephant, Refrigerator refrigerator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elephant.geteHeight()&lt;=refrigerator.getrHeight())&#123;</span><br><span class="line">            refrigerator.openRe();</span><br><span class="line">            System.out.println(<span class="string">&quot;大象成功装进冰箱&quot;</span>);</span><br><span class="line">            refrigerator.closeRe();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            refrigerator.openRe();</span><br><span class="line">            System.out.println(<span class="string">&quot;大象不可能装进冰箱&quot;</span>);</span><br><span class="line">            refrigerator.closeRe();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  输出结果：</span></span><br><span class="line"><span class="comment">打开冰箱</span></span><br><span class="line"><span class="comment">大象不可能装进冰箱</span></span><br><span class="line"><span class="comment">关上冰箱 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>我们将繁琐的步骤，通过行为、功能，模块化，这就是面向对象。面向对象更多的是要进行子模块化的设计，每一个模块都需要单独存在，并且可以被重复利用，面向对象具有封装、继承和多态三个基本特征。</li></ul><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="类和对象的概念"><a href="#类和对象的概念" class="headerlink" title="类和对象的概念"></a>类和对象的概念</h2><ul><li>类是对象的集合，对象是类的实例。对象是通过new className产生的，用来调用类的方法、类的构造方法。总之，类就是有相同特征的事物的集合，而对象就是类的一个具体实例。</li><li>类表示的是一个共性的产物，类中定义的是属性和行为（方法）；对象表示的是一个独立的个体，每个对象拥有自己独立的属性。</li><li>比如我们创建一个Dog类，类中有姓名、大小、颜色和年龄四个属性，并且有吃、跑和睡觉三种行为。与此同时，创建dog1和dog2两个对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dog类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    String colour;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog dog1=<span class="keyword">new</span> Dog();</span><br><span class="line">        Dog dog2=<span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类和对象的定义和使用"><a href="#类和对象的定义和使用" class="headerlink" title="类和对象的定义和使用"></a>类和对象的定义和使用</h2><ol><li>类的定义</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    属性 (变量) ;</span><br><span class="line">    行为 (方法) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    public class Dog &#123;</span></span><br><span class="line"><span class="comment">       String name;</span></span><br><span class="line"><span class="comment">       public void eat()&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;吃东西&quot;);</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="2"><li>对象的两种声明</li></ol><ul><li>声明并实例化对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名称 = <span class="keyword">new</span> 类名称 (); <span class="comment">//比如Dog dog=new Dog();</span></span><br></pre></td></tr></table></figure><ul><li>先声明对象，然后实例化对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名称 = <span class="keyword">null</span> ;</span><br><span class="line">对象名称 = <span class="keyword">new</span> 类名称 () ;</span><br><span class="line"><span class="comment">//比如Dog dog=null dog=new Dog();</span></span><br></pre></td></tr></table></figure><ul><li>对象.属性：表示调用类之中的属性；<br>对象.方法()：表示调用类之中的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dog类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">       String name;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Dog dog=<span class="keyword">new</span> Dog();</span><br><span class="line">       dog.name=<span class="string">&quot;牧羊犬&quot;</span>;</span><br><span class="line">       System.out.println(dog.name);</span><br><span class="line">       dog.eat();</span><br><span class="line">    &#125;<span class="comment">//输出结果：牧羊犬 吃东西</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建对象具体过程"><a href="#创建对象具体过程" class="headerlink" title="创建对象具体过程"></a>创建对象具体过程</h1><h2 id="1-两种内存空间概念"><a href="#1-两种内存空间概念" class="headerlink" title="1.两种内存空间概念"></a>1.两种内存空间概念</h2><ul><li>栈内存：保存的是堆内存的地址（可以理解为保存的是创建对象的名字）。</li><li>堆内存：保存对象的属性内容，使用new关键字就是在堆内存分配空间。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/memory.png"></p><ul><li>这属于先声明对象再实例化对象，如果将两步合并就是声明并实例化对象</li></ul><h2 id="2-创建对象具体过程"><a href="#2-创建对象具体过程" class="headerlink" title="2.创建对象具体过程"></a>2.创建对象具体过程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dog类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    String name=<span class="string">&quot;哈士奇&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> age=<span class="number">4</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog dog=<span class="keyword">new</span> Dog(<span class="string">&quot;柯基&quot;</span>,<span class="number">7</span>);</span><br><span class="line">        dog.setName(<span class="string">&quot;哈士奇&quot;</span>);</span><br><span class="line">        dog.setAge(<span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;名字:&quot;</span>+dog.getName()+<span class="string">&quot;,年龄：&quot;</span>+dog.getAge());</span><br><span class="line">    &#125;<span class="comment">//输出结果：名字:哈士奇,年龄：8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>执行完Dog dog=new Dog(“柯基”,7)语句，做了那些事情？</strong></li></ul><ol><li><p>把Dog.class文件加载到内存(方法区)。</p></li><li><p>在栈内存为对象地址(dog)开辟空间。</p></li><li><p>在堆内存为Dog类中的属性内容申请空间。</p></li><li><p>给Dog类中的成员变量进行默认初始化。</p></li><li><p>给Dog类中的成员变量进行显示初始化。</p></li><li><p>通过构造方法给Dog类中的成员变量进行初始化。</p></li><li><p>对象构造完毕，把堆内存的地址赋值给栈内存dog变量。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javaknowcomb/startobj.JPG"></p><h1 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h1><h2 id="值传递和引用传递的定义"><a href="#值传递和引用传递的定义" class="headerlink" title="值传递和引用传递的定义"></a>值传递和引用传递的定义</h2><ul><li>值传递：实际参数把它的值传递给对应的形式参数，函数接收的是原始值的一个copy，此时内存中存在两个相等的基本类型，即实际参数和形式参数，后面方法中的操作都是对形式参数这个值的修改，不影响实际参数的值。</li><li>引用传递：也称为传地址。方法调用时，实际参数的引用(地址，而不是参数的值)被传递给方法中相对应的形式参数，函数接收的是原始值的内存地址。在方法执行中，形参和实参内容相同，指向同一块内存地址，方法执行中对引用的操作将会影响到实际对象。</li></ul><h2 id="基本数据类型的值传递"><a href="#基本数据类型的值传递" class="headerlink" title="基本数据类型的值传递"></a>基本数据类型的值传递</h2><ul><li>代码中的swap函数，其实是将实际参数num1和num2的值进行一次copy，对copy出来的形式参数a和b的值进行交换，而不影响实际参数的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        swap(num1, num2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;num1 = &quot;</span> + num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2 = &quot;</span> + num2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  输出结果：</span></span><br><span class="line"><span class="comment">a = 20</span></span><br><span class="line"><span class="comment">    b = 10</span></span><br><span class="line"><span class="comment">    num1 = 10</span></span><br><span class="line"><span class="comment">    num2 = 20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="String-Integer-Double等包装类的传值"><a href="#String-Integer-Double等包装类的传值" class="headerlink" title="String,Integer,Double等包装类的传值"></a>String,Integer,Double等包装类的传值</h2><ul><li>String,Integer,Double等包装类类似基本类型，值传递，不会改变实际参数的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1=<span class="string">&quot;I&#x27;m&quot;</span>;<span class="comment">//等价于String str1=new String(&quot;I&#x27;m&quot;);</span></span><br><span class="line">        Double d1=<span class="number">3.14</span>;</span><br><span class="line">        Integer i1=<span class="number">3</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;str1=&quot;</span>+str1+<span class="string">&quot;,d1=&quot;</span>+d1+<span class="string">&quot;,i1=&quot;</span>+i1);</span><br><span class="line">        changeString(str1,d1,i1);</span><br><span class="line">        System.out.println(<span class="string">&quot;str1=&quot;</span>+str1+<span class="string">&quot;,d1=&quot;</span>+d1+<span class="string">&quot;,i1=&quot;</span>+i1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeString</span><span class="params">(String string,Double dou,Integer in)</span></span>&#123;</span><br><span class="line">        string=<span class="keyword">new</span> String(<span class="string">&quot;I&#x27;m Jasper&quot;</span>);</span><br><span class="line">        dou=<span class="number">3.1415</span>;<span class="comment">//等价于dou=new Double(3.1415)</span></span><br><span class="line">        in=<span class="keyword">new</span> Integer(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  输出结果：</span></span><br><span class="line"><span class="comment">str1=I&#x27;m,d1=3.14,i1=3</span></span><br><span class="line"><span class="comment">    str1=I&#x27;m,d1=3.14,i1=3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="StringBuffer和StringBuilder的引用传递"><a href="#StringBuffer和StringBuilder的引用传递" class="headerlink" title="StringBuffer和StringBuilder的引用传递"></a>StringBuffer和StringBuilder的引用传递</h2><ul><li>实参strBuffer1将地址传递给形参stringBuffer1，此时实参和形参存的是相同的内存地址。在changeBuffer函数中，形参stringBuffer1通过new开辟新的空间，改变了内存地址，而实参strBuffer1内存地址和指向的内容不变，所以输出不变。</li><li>实参strBuffer2将地址传递给形参stringBuffer2，此时实参和形参存的是相同的内存地址。在changeBuffer函数中，形参stringBuffer2通过append追加新字符串，而实参和形参内存地址不变，指向的内容发生改变，所以输出改变。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer strBuffer1 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        StringBuffer strBuffer2 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;Happy&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;strBuffer1=&quot;</span>+strBuffer1+<span class="string">&quot;,strBuffer2=&quot;</span>+strBuffer2);</span><br><span class="line">        changeBuffer(strBuffer1,strBuffer2);</span><br><span class="line">        System.out.println(<span class="string">&quot;strBuffer1=&quot;</span>+strBuffer1+<span class="string">&quot;,strBuffer2=&quot;</span>+strBuffer2);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeBuffer</span><span class="params">(StringBuffer stringBuffer1,StringBuffer stringBuffer2)</span> </span>&#123;</span><br><span class="line">        stringBuffer1=<span class="keyword">new</span> StringBuffer(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        stringBuffer2.append(<span class="string">&quot; New Year&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  输出结果：</span></span><br><span class="line"><span class="comment">strBuffer1=Hello,strBuffer2=Happy</span></span><br><span class="line"><span class="comment">strBuffer1=Hello,strBuffer2=Happy New Year</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="对象类型的引用传递"><a href="#对象类型的引用传递" class="headerlink" title="对象类型的引用传递"></a>对象类型的引用传递</h2><ul><li>原理同4</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;person1=&quot;</span>+person1.getName()+<span class="string">&quot;,person2=&quot;</span>+person2.getName());</span><br><span class="line">        changePerson(person1,person2);</span><br><span class="line">        System.out.println(<span class="string">&quot;person1=&quot;</span>+person1.getName()+<span class="string">&quot;,person2=&quot;</span>+person2.getName());</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changePerson</span><span class="params">(Person p1,Person p2)</span> </span>&#123;</span><br><span class="line">        p1= <span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        p2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  输出结果：</span></span><br><span class="line"><span class="comment">person1=张三,person2=张三</span></span><br><span class="line"><span class="comment">person1=张三,person2=李四</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java Difficult Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类及其常用方法的使用</title>
      <link href="/articles/db963a9e.html"/>
      <url>/articles/db963a9e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><h2 id="Object类的结构"><a href="#Object类的结构" class="headerlink" title="Object类的结构"></a>Object类的结构</h2><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/objclass.JPG"></p><h2 id="clone-方法"><a href="#clone-方法" class="headerlink" title="clone()方法"></a>clone()方法</h2><h3 id="Java语言中创建对象的方式"><a href="#Java语言中创建对象的方式" class="headerlink" title="Java语言中创建对象的方式"></a>Java语言中创建对象的方式</h3><ul><li>使用new操作符创建一个对象</li></ul><p>new操作符的本意是分配内存。程序执行到new操作符时， 首 先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后， 再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完 毕，可以把他的引用(地址)发布到外部，在外部就可以使用这个引用操纵这个对象。</p><ul><li>使用clone方法复制一个对象</li></ul><p>clone在第一步 是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象(即调用clone方法的对象) 相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新 的相同的对象被创建，同样可以把这个新对象的引用发布到外部。</p><h3 id="复制引用-vs-复制对象"><a href="#复制引用-vs-复制对象" class="headerlink" title="复制引用 vs 复制对象"></a>复制引用 vs 复制对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Salary salary;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person person=(Person)<span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;====引用====&quot;</span>);</span><br><span class="line">        <span class="comment">//复制引用</span></span><br><span class="line">        <span class="comment">//打印的地址值是相同的，既然地址都是相同的，那么肯定是同一个对象。</span></span><br><span class="line">        <span class="comment">//p和p1只是引用而已，他们都指向了一个相同的对象，可以把这种现象叫做引用的复制</span></span><br><span class="line">        Person p1 = p;</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====clone====&quot;</span>);</span><br><span class="line">        <span class="comment">//复制对象</span></span><br><span class="line">        <span class="comment">//两个对象的地址是不同的，也就是说创建了新的对象， 而不是把原对象的地址赋给了一个新的引用变量</span></span><br><span class="line">        Person p2 = (Person) p.clone();</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">====引用====</span><br><span class="line">javabase.javacommonclass.Person@5cad8086</span><br><span class="line">javabase.javacommonclass.Person@5cad8086</span><br><span class="line">====clone====</span><br><span class="line">javabase.javacommonclass.Person@5cad8086</span><br><span class="line">javabase.javacommonclass.Person@6e0be858</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/referenceandcopy.png"></p><h3 id="深拷贝-vs-浅拷贝"><a href="#深拷贝-vs-浅拷贝" class="headerlink" title="深拷贝 vs 浅拷贝"></a>深拷贝 vs 浅拷贝</h3><ul><li>clone方法默认执行的是浅拷贝。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Salary salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age,Salary salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary= salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person person=(Person)<span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Salary <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="keyword">new</span> Salary(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====clone====&quot;</span>);</span><br><span class="line">        <span class="comment">//复制对象</span></span><br><span class="line">        Person p1 = (Person) p.clone();</span><br><span class="line"></span><br><span class="line">        String result= p.getSalary() == p2.getSalary()</span><br><span class="line">                ? <span class="string">&quot;clone是浅拷贝的&quot;</span> : <span class="string">&quot;clone是深拷贝的&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">clone是浅拷贝的</span><br></pre></td></tr></table></figure><ul><li>java里除了8种基本类型传参数是值传递，其他的类对象传参数都是引用，我们有时候不希望在 方法里将参数改变，这是就需要在类中复写clone方法，实现深拷贝。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Salary salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age,Salary salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary= salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person person=(Person)<span class="keyword">super</span>.clone();</span><br><span class="line">        person.salary=(Salary) salary.clone();</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Salary <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="keyword">new</span> Salary(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====clone====&quot;</span>);</span><br><span class="line">        <span class="comment">//复制对象</span></span><br><span class="line">        Person p1 = (Person) p.clone();</span><br><span class="line"></span><br><span class="line">        String result= p.getSalary() == p2.getSalary()</span><br><span class="line">                ? <span class="string">&quot;clone是浅拷贝的&quot;</span> : <span class="string">&quot;clone是深拷贝的&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">clone是深拷贝的</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/dascopy.png"></p><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h2><ul><li>Object 类的 toString 方法返回一个字符串，该字符串由类名(对象是该类的一个实例)、at 标记符“@” 和此对象哈希码的无符号十六进制表示组成。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一般子类都有覆盖toString方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(object.toString());</span><br><span class="line">      </span><br><span class="line">        Person person=<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">java.lang.Object@5cad8086</span><br><span class="line">Person&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass()方法"></a>getClass()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure><ul><li>返回运行时类类型。不可重写，要调用的话，一般和getName()联合使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(object.getClass());</span><br><span class="line">        System.out.println(object.getClass().getName());</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(person.getClass());</span><br><span class="line">        System.out.println(person.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">javabase</span>.<span class="title">javacommonclass</span>.<span class="title">Person</span></span></span><br><span class="line"><span class="class"><span class="title">javabase</span>.<span class="title">javacommonclass</span>.<span class="title">Person</span></span></span><br></pre></td></tr></table></figure><h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h2><ul><li>当对象被判定为垃圾对象时，由JVM自动调用此方法，用以标记垃圾对象，进入回收队列。<ul><li>垃圾对象：没有有效引用指向此对象时，为垃圾对象。</li><li>垃圾回收：由GC销毁垃圾对象，释放数据存储空间。</li><li>自动回收机制：JVM的内存耗尽，一次性回收所有垃圾对象。</li><li>手动回收机制：使用System.gc()，通知JVM执行垃圾回收。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//person类重写finalize()方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;对象被回收了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person=<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">张三对象被回收了</span><br></pre></td></tr></table></figure><h2 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Object中的equals方法是直接判断this和obj本身的值是否相等，即用来判断调用equals的对象和形参obj所引用的对象是否是同一对象。</p></li><li><p>所谓同一对象就是指内存中同一块存储单元，如果this和obj指向的同一块内存对象，则返回true,如果this和obj指向的不是同一块内存对象，则返回false。即便是内容完全相等的两块不同的内存对象，也返回false。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    Person person1=<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Person person2=<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    System.out.println(person1.equals(person2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><h2 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a>hashCode()方法</h2><ul><li>一般必须满足obj1.equals(obj2)==true。可以推出obj1.hash Code() == obj2.hashCode()，但是hashCode相等不一定就满足equals。不过为了提高效率，应该尽量使上面两个条件接近等价。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    Person person1=<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Person person2=<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Person person3=person1;</span><br><span class="line">    System.out.println(<span class="string">&quot;person1=&quot;</span>+person1.hashCode());</span><br><span class="line">    System.out.println(<span class="string">&quot;person2=&quot;</span>+person2.hashCode());</span><br><span class="line">    System.out.println(<span class="string">&quot;person3=&quot;</span>+person3.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">person1=<span class="number">1554874502</span></span><br><span class="line">person2=<span class="number">1846274136</span></span><br><span class="line">person3=<span class="number">1554874502</span></span><br></pre></td></tr></table></figure><h2 id="wait-、notify-、notifyAll-方法"><a href="#wait-、notify-、notifyAll-方法" class="headerlink" title="wait()、notify()、notifyAll()方法"></a>wait()、notify()、notifyAll()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 唤醒在此对象监视器上等待的单个线程</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">* 唤醒在此对象监视器上等待的所有线程</span></span></span><br><span class="line"><span class="comment"><span class="function">**/</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">* 导致当前的线程等待，直到其他线程调用此对象的notify( ) 方法或 notifyAll( ) 方法</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">( )</span> </span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">* 导致当前的线程等待，直到其他线程调用此对象的notify() 方法或 notifyAll() 方法，或者指定的时间过完。</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> </span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">* 导致当前的线程等待，直到其他线程调用此对象的notify() 方法或 notifyAll() 方法，或者其他线程打断了当前线程，或者指定的时间过完。</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> </span></span><br></pre></td></tr></table></figure><ul><li><p>调用以上方法时，一定要对竞争资源进行加锁，如果不加锁的话，则会报IllegalMonitorStateException 异常，当想要调用wait( )进行线程等待时，必须要取得这个锁对象的控制权(对象监视器)，一般是放到synchronized(obj)代码中。</p></li><li><p>当调用obj.notify()或obj.notifyAll后，调用线程依旧持有obj锁。因此，其他线程虽被唤醒，但是仍无法获得obj锁。直到调用线程退出synchronized块，释放obj锁后，其他线程中的一个才有机会获得锁继续执行。</p></li></ul><h3 id="为何上述方法定义在object类中"><a href="#为何上述方法定义在object类中" class="headerlink" title="为何上述方法定义在object类中"></a>为何上述方法定义在object类中</h3><ul><li>因为这些方法在操作同步线程时，都必须要标识它们操作线程的锁，只有同一个锁上的被等待线程，可以被同一个锁上的notify唤醒，不可以对不同锁中的线程进行唤醒。也就是说，等待和唤醒必须是同一个锁。而锁可以是任意对象，所以可以被任意对象调用的方法是定义在object类中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用线程方法1 继承Thread类，重写run()方法，调用start()方法开启线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在多线程间共享的对象上使用wait</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WaitNotifyTest test = <span class="keyword">new</span> WaitNotifyTest();</span><br><span class="line">        ThreadWait threadWait1 = test.<span class="function">new <span class="title">ThreadWait</span><span class="params">(<span class="string">&quot;wait thread1&quot;</span>)</span></span>;</span><br><span class="line">        ThreadWait threadWait2 = test.<span class="function">new <span class="title">ThreadWait</span><span class="params">(<span class="string">&quot;wait thread2&quot;</span>)</span></span>;</span><br><span class="line">        ThreadNotify threadNotify = test.<span class="function">new <span class="title">ThreadNotify</span><span class="params">(<span class="string">&quot;notify thread&quot;</span>)</span></span>;</span><br><span class="line">        threadNotify.start();</span><br><span class="line">        threadWait1.start();</span><br><span class="line">        threadWait2.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ThreadWait</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThreadWait</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//每个类被加载之后，系统就会为该类生成一个对应的字节码对象 WaitNotifyTest.class</span></span><br><span class="line">            <span class="keyword">synchronized</span> (WaitNotifyTest.class) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程&quot;</span>+ <span class="keyword">this</span>.getName() + <span class="string">&quot;开始等待&quot;</span>);</span><br><span class="line">                    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        WaitNotifyTest.class.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程&quot;</span> + <span class="keyword">this</span>.getName()</span><br><span class="line">                            + <span class="string">&quot;等待时间为：&quot;</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + getName() + <span class="string">&quot;等待结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ThreadNotify</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThreadNotify</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 给等待线程等待时间</span></span><br><span class="line">                sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (WaitNotifyTest.class) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;开始准备通知&quot;</span>);</span><br><span class="line">                WaitNotifyTest.class.notifyAll();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;通知结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;运行结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">线程wait thread1开始等待</span><br><span class="line">线程wait thread2开始等待</span><br><span class="line">线程notify thread开始准备通知</span><br><span class="line">线程notify thread通知结束</span><br><span class="line">线程notify thread运行结束</span><br><span class="line">线程wait thread2等待时间为：<span class="number">3004</span></span><br><span class="line">线程wait thread2等待结束</span><br><span class="line">线程wait thread1等待时间为：<span class="number">3005</span></span><br><span class="line">线程wait thread1等待结束</span><br></pre></td></tr></table></figure><h3 id="Java中sleep-与wait-区别"><a href="#Java中sleep-与wait-区别" class="headerlink" title="Java中sleep()与wait()区别"></a>Java中sleep()与wait()区别</h3><ul><li><p>每个对象都有一个锁来控制同步访问，Synchronized关键字可以和对象的锁交互，来实现同步方法或同步块。</p></li><li><p>Sleep()方法</p><ul><li>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用，目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。</li><li>sleep()是Thread类的static(静态)的方法；因此他不能改变对象的机锁，所以当在一个Synchronized块中调用Sleep()方法时，线程虽然被阻塞了，但是对象的机锁并木有被释放，其他线程无法访问这个对象（即使被阻塞也持有对象锁）。</li><li>在sleep()阻塞时间到了之后，该线程不一定会立即执行，这是因为其它线程可能正在运行而且没有被调度为放弃执行，除非此线程具有更高的优先级。</li></ul></li><li><p>Wait()方法</p><ul><li>wait()方法是Object类里的方法；当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时失去（释放）了对象的机锁（暂时失去机锁，wait(long timeout)超时时间后被唤醒还是有机会得到对象锁）。</li><li>可以使用notify或者notifyAlll或者指定睡眠时间wait(long timeout)来唤醒当前等待池中的线程。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用线程方法2 实现Runnable接口，重写run()方法，实现接口需要丢入Runnable接口实现类，调用start()方法开启线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例子1 Sleep()方法没在Synchronized块中调用时，不占用对象锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 使用MultiThread.class这个字节码对象，当前虚拟机里引用这个变量时指向的都是同一个对象</span></span><br><span class="line">            <span class="keyword">synchronized</span>(MultiThread.class)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread1开始等待&quot;</span>);</span><br><span class="line">                <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    MultiThread.class.wait(<span class="number">1000</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程thread1&quot;</span> + <span class="string">&quot;等待时间为：&quot;</span> + (endTime - startTime));</span><br><span class="line">                System.out.println(<span class="string">&quot;thread1等待结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread2开始等待&quot;</span>);</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;线程thread2&quot;</span> + <span class="string">&quot;等待时间为：&quot;</span> + (endTime - startTime));</span><br><span class="line">            System.out.println(<span class="string">&quot;thread2等待结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Thread1()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Thread2()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">thread1开始等待</span><br><span class="line">thread2开始等待</span><br><span class="line">线程thread1等待时间为：<span class="number">1006</span></span><br><span class="line">thread1等待结束</span><br><span class="line">线程thread2等待时间为：<span class="number">5007</span></span><br><span class="line">thread2等待结束</span><br><span class="line">  </span><br><span class="line"><span class="comment">//例子2 Sleep()方法在Synchronized块中调用时，占用对象锁，其他线程无法访问这个对象</span></span><br><span class="line"><span class="comment">//使用下列代码替换Thread2静态类try-catch代码块</span></span><br><span class="line"><span class="keyword">synchronized</span>(MultiThread.class) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">thread1开始等待</span><br><span class="line">thread2开始等待</span><br><span class="line">线程thread2等待时间为：<span class="number">5003</span></span><br><span class="line">thread2等待结束</span><br><span class="line">线程thread1等待时间为：<span class="number">5005</span></span><br><span class="line">thread1等待结束</span><br></pre></td></tr></table></figure><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/package.jpg"></p><h2 id="自动-装箱和-自动-拆箱"><a href="#自动-装箱和-自动-拆箱" class="headerlink" title="(自动)装箱和(自动)拆箱"></a>(自动)装箱和(自动)拆箱</h2><ul><li><p>由基本类型向对应的包装类转换称为装箱，例如把 int 包装成 Integer 类的对象。</p></li><li><p>包装类向对应的基本类型转换称为拆箱，例如把 Integer 类的对象重新简化为 int。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackingClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1=<span class="number">18</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;---装箱---&quot;</span>);</span><br><span class="line">        Integer integer1=<span class="keyword">new</span> Integer(num1);</span><br><span class="line">        Integer integer2=Integer.valueOf(num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;integer1=&quot;</span>+integer1);</span><br><span class="line">        System.out.println(<span class="string">&quot;integer2=&quot;</span>+integer2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---拆箱---&quot;</span>);</span><br><span class="line">        Integer integer3=<span class="keyword">new</span> Integer(<span class="number">99</span>);</span><br><span class="line">        <span class="keyword">int</span> num2=integer3.intValue();</span><br><span class="line">        System.out.println(<span class="string">&quot;num2=&quot;</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDK1.5之后，提供自动装箱和拆箱</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---自动装箱---&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num3=<span class="number">100</span>;</span><br><span class="line">        Integer integer4=num3; <span class="comment">//相当于Integer.valueOf(xxx)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;integer4=&quot;</span>+integer4);</span><br><span class="line">        System.out.println(<span class="string">&quot;---自动拆箱---&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num4=integer4; <span class="comment">//相当于xxx.intValue()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;num4=&quot;</span>+num4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">---装箱---</span><br><span class="line">integer1=<span class="number">18</span></span><br><span class="line">integer2=<span class="number">18</span></span><br><span class="line">---拆箱---</span><br><span class="line">num2=<span class="number">99</span></span><br><span class="line">---自动装箱---</span><br><span class="line">integer4=<span class="number">100</span></span><br><span class="line">---自动拆箱---</span><br><span class="line">num4=<span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="基本数据类型和字符串之间的转换"><a href="#基本数据类型和字符串之间的转换" class="headerlink" title="基本数据类型和字符串之间的转换"></a>基本数据类型和字符串之间的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackingClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---基本类型转换为字符串---&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">15</span>;</span><br><span class="line">        <span class="comment">//方法1 使用+号</span></span><br><span class="line">        String s1 = n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//方法2 使用toString()方法</span></span><br><span class="line">        String s2 = Integer.toString(n1);</span><br><span class="line">        String s3 = Integer.toString(n1, <span class="number">16</span>);<span class="comment">//n1以16进制显示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s1=&quot;</span> + s1);</span><br><span class="line">        System.out.println(<span class="string">&quot;s2=&quot;</span> + s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;s3=&quot;</span> + s3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---字符串转换为基本类型---&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] str = &#123;<span class="string">&quot;123&quot;</span>,<span class="string">&quot;123abc&quot;</span>,<span class="string">&quot;abcxyz&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String str1 : str) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> m = Integer.parseInt(str1, <span class="number">10</span>);</span><br><span class="line">                System.out.println(str1 + <span class="string">&quot; 可以转换为整数 &quot;</span> + m);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(str1 + <span class="string">&quot; 无法转换为整数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---boolean字符串形式转成基本类型---&quot;</span>);</span><br><span class="line">        <span class="comment">//&quot;true&quot;---&gt;true &quot;非true&quot;---&gt;false</span></span><br><span class="line">        String s4=<span class="string">&quot;true&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b1=Boolean.parseBoolean(s4);</span><br><span class="line">        String s5=<span class="string">&quot;notrue&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b2=Boolean.parseBoolean(s5);</span><br><span class="line">        System.out.println(<span class="string">&quot;b1=&quot;</span>+b1);</span><br><span class="line">        System.out.println(<span class="string">&quot;b2=&quot;</span>+b2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">---基本类型转换为字符串---</span><br><span class="line">s1=<span class="number">15</span></span><br><span class="line">s2=<span class="number">15</span></span><br><span class="line">s3=f</span><br><span class="line">---字符串转换为基本类型---</span><br><span class="line"><span class="number">123</span> 可以转换为整数 <span class="number">123</span></span><br><span class="line">123abc 无法转换为整数</span><br><span class="line">abcxyz 无法转换为整数</span><br><span class="line">---<span class="keyword">boolean</span>字符串形式转成基本类型---</span><br><span class="line">b1=<span class="keyword">true</span></span><br><span class="line">b2=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><h2 id="整数缓存区"><a href="#整数缓存区" class="headerlink" title="整数缓存区"></a>整数缓存区</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer integer1=<span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        Integer integer2=<span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(integer1==integer2);</span><br><span class="line"></span><br><span class="line">        Integer integer3=<span class="number">100</span>;<span class="comment">//等价于Integer integer3=Integer.valueOf(100);</span></span><br><span class="line">        Integer integer4=<span class="number">100</span>;<span class="comment">//等价于Integer integer4=Integer.valueOf(100);</span></span><br><span class="line">        System.out.println(integer3==integer4);</span><br><span class="line"></span><br><span class="line">        Integer integer5=Integer.valueOf(<span class="number">200</span>);</span><br><span class="line">        Integer integer6=Integer.valueOf(<span class="number">200</span>);</span><br><span class="line">        System.out.println(integer5==integer6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*      </span></span><br><span class="line"><span class="comment">  low=-128 high=127 如果数字在这个范围就在cache缓存区取，否则创建新的Integer对象</span></span><br><span class="line"><span class="comment">        public static Integer valueOf(int i) &#123;</span></span><br><span class="line"><span class="comment">            if (i &gt;= Integer.IntegerCache.low &amp;&amp; i &lt;= Integer.IntegerCache.high)</span></span><br><span class="line"><span class="comment">               return Integer.IntegerCache.cache[i + (-Integer.IntegerCache.low)];</span></span><br><span class="line"><span class="comment">           return new Integer(i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><h1 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h1><ul><li>Java 的 Math 包含了用于执行基本数学运算的属性和方法。 Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *Math.sqrt()//计算平方根</span></span><br><span class="line"><span class="comment">         *Math.cbrt()//计算立方根</span></span><br><span class="line"><span class="comment">         *Math.pow(a, b)//计算a的b次方</span></span><br><span class="line"><span class="comment">         *Math.max( , );//计算最大值</span></span><br><span class="line"><span class="comment">         *Math.min( , );//计算最小值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Math.sqrt(<span class="number">16</span>)); <span class="comment">//4.0</span></span><br><span class="line">        System.out.println(Math.cbrt(<span class="number">8</span>)); <span class="comment">//2.0</span></span><br><span class="line">        System.out.println(Math.pow(<span class="number">3</span>,<span class="number">2</span>)); <span class="comment">//9.0</span></span><br><span class="line">        System.out.println(Math.max(<span class="number">2.3</span>,<span class="number">4.5</span>));<span class="comment">//4.5</span></span><br><span class="line">        System.out.println(Math.min(<span class="number">2.3</span>,<span class="number">4.5</span>));<span class="comment">//2.3</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * abs求绝对值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Math.abs(-<span class="number">10.4</span>)); <span class="comment">//10.4</span></span><br><span class="line">        System.out.println(Math.abs(<span class="number">10.1</span>)); <span class="comment">//10.1</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ceil天花板的意思，就是返回大的值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Math.ceil(-<span class="number">10.1</span>)); <span class="comment">//-10.0</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">10.7</span>)); <span class="comment">//11.0</span></span><br><span class="line">        System.out.println(Math.ceil(-<span class="number">0.7</span>)); <span class="comment">//-0.0</span></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">0.0</span>)); <span class="comment">//0.0</span></span><br><span class="line">        System.out.println(Math.ceil(-<span class="number">0.0</span>)); <span class="comment">//-0.0</span></span><br><span class="line">        System.out.println(Math.ceil(-<span class="number">1.7</span>)); <span class="comment">//-1.0</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * floor地板的意思，就是返回小的值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Math.floor(-<span class="number">10.1</span>)); <span class="comment">//-11.0</span></span><br><span class="line">        System.out.println(Math.floor(<span class="number">10.7</span>)); <span class="comment">//10.0</span></span><br><span class="line">        System.out.println(Math.floor(-<span class="number">0.7</span>)); <span class="comment">//-1.0</span></span><br><span class="line">        System.out.println(Math.floor(<span class="number">0.0</span>)); <span class="comment">//0.0</span></span><br><span class="line">        System.out.println(Math.floor(-<span class="number">0.0</span>)); <span class="comment">//-0.0</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * random 取得一个大于或者等于0.0小于不等于1.0的随机数 [0,1)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Math.random()); <span class="comment">//大于或者等于0.0小于不等于1.0的double类型的数</span></span><br><span class="line">        System.out.println(Math.random()+<span class="number">1</span>);<span class="comment">//大于或者等于1.0小于不等于2.0的double类型的数</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * rint 四舍五入，返回double值</span></span><br><span class="line"><span class="comment">         * 注意.5的时候会取偶数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Math.rint(<span class="number">10.1</span>)); <span class="comment">//10.0</span></span><br><span class="line">        System.out.println(Math.rint(<span class="number">10.7</span>)); <span class="comment">//11.0</span></span><br><span class="line">        System.out.println(Math.rint(<span class="number">11.5</span>)); <span class="comment">//12.0</span></span><br><span class="line">        System.out.println(Math.rint(<span class="number">10.5</span>)); <span class="comment">//10.0</span></span><br><span class="line">        System.out.println(Math.rint(<span class="number">10.51</span>)); <span class="comment">//11.0</span></span><br><span class="line">        System.out.println(Math.rint(-<span class="number">10.5</span>)); <span class="comment">//-10.0</span></span><br><span class="line">        System.out.println(Math.rint(-<span class="number">11.5</span>));  <span class="comment">//-12.0</span></span><br><span class="line">        System.out.println(Math.rint(-<span class="number">10.51</span>)); <span class="comment">//-11.0</span></span><br><span class="line">        System.out.println(Math.rint(-<span class="number">10.6</span>));  <span class="comment">//-11.0</span></span><br><span class="line">        System.out.println(Math.rint(-<span class="number">10.2</span>));  <span class="comment">//-10.0</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * round 四舍五入，float时返回int值，double时返回long值</span></span><br><span class="line"><span class="comment">         * x为正数：小数部分≥0.5时，整数取值向右一个整数，即+1。表现为四舍五入。</span></span><br><span class="line"><span class="comment">         * x为负数：小数部分≤0.5时，相近整数更靠近右侧，所以取值右侧的整数，即原负数的整数部分不变。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">10.1</span>));  <span class="comment">//10</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">10.7</span>));  <span class="comment">//11</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">10.5</span>));  <span class="comment">//11</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">10.51</span>)); <span class="comment">//11</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">10.5</span>)); <span class="comment">//-10</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">10.51</span>)); <span class="comment">//-11</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">10.6</span>)); <span class="comment">//-11</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">10.2</span>)); <span class="comment">//-10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h1><h3 id="java-lang-Math-Random"><a href="#java-lang-Math-Random" class="headerlink" title="java.lang.Math.Random"></a>java.lang.Math.Random</h3><ul><li>调用这个Math.Random()函数能够返回带正号的double值，该值大于等于0.0且小于1.0，即取值范围是 [0.0,1.0)的左闭右开区间，返回值是一个伪随机选择的数，在该范围内(近似)均匀分布。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 结果是个double类型的值，区间为[0.0,1.0) </span></span><br><span class="line">  System.out.println(<span class="string">&quot;Math.random()=&quot;</span> + Math.random());</span><br><span class="line">    <span class="keyword">int</span> num = (<span class="keyword">int</span>) (Math.random() * <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 注意不要写成(int)Math.random()*3，这个结果为0或1，因为先执行了强制转换 </span></span><br><span class="line">  System.out.println(<span class="string">&quot;num=&quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">Math.random()=<span class="number">0.44938147153848396</span></span><br><span class="line">num=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="java-util-Random"><a href="#java-util-Random" class="headerlink" title="java.util.Random"></a>java.util.Random</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Random(long seed):使用单个 long 种子创建一个新的随机数生成器。</span></span><br><span class="line">        <span class="comment">//在创建一个Random对象的时候可以给定任意一个合法种子数，种子数只是随机算法的起源数字，和生成的随机数区间没有任何关系。</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">//Random():创建一个新的随机数生成器</span></span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        System.out.println(<span class="string">&quot;rand.nextBoolean():&quot;</span> + rand.nextBoolean());</span><br><span class="line">        <span class="comment">// 生成0.0-1.0之间的伪随机double数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;rand.nextDouble():&quot;</span> + rand.nextDouble());</span><br><span class="line">        <span class="comment">// 生成0.0-1.0之间的伪随机float数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;rand.nextFloat():&quot;</span> + rand.nextFloat());</span><br><span class="line">        <span class="comment">// 生成一个处于int整数取值范围的伪随机数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;rand.nextInt():&quot;</span> + rand.nextInt());</span><br><span class="line">        <span class="comment">// 生成0-20之间的伪随机整数,不包括20</span></span><br><span class="line">        System.out.println(<span class="string">&quot;rand.nextInt(20):&quot;</span> + rand.nextInt(<span class="number">20</span>));</span><br><span class="line">        <span class="comment">// 生成一个处于long整数取值范围的伪随机数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;rand.nextLong():&quot;</span> + rand.nextLong());</span><br><span class="line">        <span class="comment">//为byte数组里的元素随机赋值,即使原本数组里面有值，也会重新覆盖掉</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">        rand.nextBytes(bytes);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; bytes.length;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;byte[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+bytes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">rand.nextBoolean():<span class="keyword">true</span></span><br><span class="line">rand.nextDouble():<span class="number">0.9888610718956184</span></span><br><span class="line">rand.nextFloat():<span class="number">0.1866427</span></span><br><span class="line">rand.nextInt():<span class="number">1598002054</span></span><br><span class="line">rand.nextInt(<span class="number">20</span>):<span class="number">12</span></span><br><span class="line">rand.nextLong():<span class="number">8658833840448427432</span></span><br><span class="line"><span class="keyword">byte</span>[<span class="number">0</span>]=-<span class="number">107</span></span><br><span class="line"><span class="keyword">byte</span>[<span class="number">1</span>]=-<span class="number">127</span></span><br><span class="line"><span class="keyword">byte</span>[<span class="number">2</span>]=<span class="number">10</span></span><br><span class="line"><span class="keyword">byte</span>[<span class="number">3</span>]=-<span class="number">17</span></span><br><span class="line"><span class="keyword">byte</span>[<span class="number">4</span>]=-<span class="number">47</span></span><br></pre></td></tr></table></figure><h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><h2 id="创建字符串对象的方式"><a href="#创建字符串对象的方式" class="headerlink" title="创建字符串对象的方式"></a>创建字符串对象的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str1=<span class="string">&quot;hello&quot;</span>;<span class="comment">//直接赋值的方式</span></span><br><span class="line">String str2=<span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);<span class="comment">//实例化的方式</span></span><br></pre></td></tr></table></figure><h2 id="字符串创建与内存场景分析-JDK-1-8"><a href="#字符串创建与内存场景分析-JDK-1-8" class="headerlink" title="字符串创建与内存场景分析(JDK 1.8)"></a>字符串创建与内存场景分析(JDK 1.8)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：==在对字符串比较的时候，对比的是内存地址，而equals比较的是字符串内容，</span></span><br><span class="line"><span class="comment">// 在开发的过程中，equals()通过接受参数，可以避免空指向。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">//给字符串直接赋值的时候，并不是修改原来的数据，而是重新在字符串常量池开辟一个空间</span></span><br><span class="line">        name1=<span class="string">&quot;world&quot;</span>;</span><br><span class="line">        String name2=<span class="string">&quot;world&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;name1==name2｜&quot;</span>+(name1==name2));</span><br><span class="line">        <span class="comment">//通过实例化方式创建，会先在字符串常量池中查看是否有相同的字符串</span></span><br><span class="line">        <span class="comment">//如果有，则只需要在堆中创建一个对象，并且该引用存的是堆中对象的地址</span></span><br><span class="line">        <span class="comment">//如果没有，则需要在栈和堆中各创建一个对象，并且该引用存的是堆中对象的地址</span></span><br><span class="line">        String name3=<span class="keyword">new</span> String(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        String name4=<span class="keyword">new</span> String(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name3==name4｜&quot;</span>+(name3==name4));</span><br><span class="line">        String name5=<span class="string">&quot;apple&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;name5==name3｜&quot;</span>+(name5==name3));</span><br><span class="line">        System.out.println(<span class="string">&quot;name5==name4｜&quot;</span>+(name5==name4));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">name1==name2｜<span class="keyword">true</span></span><br><span class="line">name3==name4｜<span class="keyword">false</span></span><br><span class="line">name5==name3｜<span class="keyword">false</span></span><br><span class="line">name5==name4｜<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/stringmemory.png"></p><h2 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h2><h3 id="String的判断方法"><a href="#String的判断方法" class="headerlink" title="String的判断方法"></a>String的判断方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span>:比较字符串的内容是否相同</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String str)</span>: 比较字符串的内容是否相同,忽略大小写 </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span>: 判断字符串对象是否以指定的str开头 </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span>: 判断字符串对象是否以指定的str结尾</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">//例子</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 创建字符串对象</span></span><br><span class="line">      String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">      String s2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">      String s3 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">      <span class="comment">// boolean equals(Object obj):比较字符串的内容是否相同 </span></span><br><span class="line">      System.out.println(s1.equals(s2)); <span class="comment">//true </span></span><br><span class="line">      System.out.println(s1.equals(s3)); <span class="comment">//false </span></span><br><span class="line">      System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">      <span class="comment">// boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写</span></span><br><span class="line">      System.out.println(s1.equalsIgnoreCase(s2)); <span class="comment">//true </span></span><br><span class="line">      System.out.println(s1.equalsIgnoreCase(s3)); <span class="comment">//true </span></span><br><span class="line">      System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">      <span class="comment">// boolean startsWith(String str):判断字符串对象是否以指定的str开头 </span></span><br><span class="line">      System.out.println(s1.startsWith(<span class="string">&quot;he&quot;</span>)); <span class="comment">//true </span></span><br><span class="line">      System.out.println(s1.startsWith(<span class="string">&quot;ll&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">      <span class="comment">//boolean endsWith(String str): 判断字符串对象是否以指定的str结尾</span></span><br><span class="line">      System.out.println(s1.endsWith(<span class="string">&quot;he&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">      System.out.println(s1.endsWith(<span class="string">&quot;lo&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="String的截取方法"><a href="#String的截取方法" class="headerlink" title="String的截取方法"></a>String的截取方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span>:获取字符串的长度，其实也就是字符个数</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span>:获取指定索引处的字符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span>:获取str在字符串对象中第一次出现的索引</span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span>:从start开始截取字符串</span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>:从start开始，到end结束截取字符串。包括start，不包括end</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String str)</span>:判断是否包含某个子字符串</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">//例子</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 创建字符串对象</span></span><br><span class="line">      <span class="comment">// 创建字符串对象</span></span><br><span class="line">      String s = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">      <span class="comment">// int length():获取字符串的长度，其实也就是字符个数</span></span><br><span class="line">      System.out.println(s.length()); <span class="comment">//10</span></span><br><span class="line">      System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">      <span class="comment">// char charAt(int index):获取指定索引处的字符</span></span><br><span class="line">      System.out.println(s.charAt(<span class="number">0</span>)); <span class="comment">//h</span></span><br><span class="line">      System.out.println(s.charAt(<span class="number">1</span>)); <span class="comment">//e</span></span><br><span class="line">      System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">      <span class="comment">// int indexOf(String str):获取str在字符串对象中第一次出现的索引</span></span><br><span class="line">      System.out.println(s.indexOf(<span class="string">&quot;l&quot;</span>)); <span class="comment">//2</span></span><br><span class="line">      System.out.println(s.indexOf(<span class="string">&quot;owo&quot;</span>)); <span class="comment">//4</span></span><br><span class="line">      System.out.println(s.indexOf(<span class="string">&quot;ak&quot;</span>)); <span class="comment">//-1</span></span><br><span class="line">      System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">      <span class="comment">// String substring(int start):从start开始截取字符串</span></span><br><span class="line">      System.out.println(s.substring(<span class="number">0</span>)); <span class="comment">//helloworld</span></span><br><span class="line">      System.out.println(s.substring(<span class="number">5</span>)); <span class="comment">//world</span></span><br><span class="line">      System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">      <span class="comment">// String substring(int start,int end):从start开始，到end结束截取字符串</span></span><br><span class="line">      System.out.println(s.substring(<span class="number">0</span>, s.length())); <span class="comment">//helloworld</span></span><br><span class="line">      System.out.println(s.substring(<span class="number">3</span>, <span class="number">8</span>)); <span class="comment">//lowor</span></span><br><span class="line">      <span class="comment">//boolean contains(String str):判断是否包含某个子字符串</span></span><br><span class="line">      System.out.println(s.contains(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">--------</span><br><span class="line">h</span><br><span class="line">e</span><br><span class="line">--------</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line">--------</span><br><span class="line">helloworld</span><br><span class="line">world</span><br><span class="line">--------</span><br><span class="line">helloworld</span><br><span class="line">lowor</span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="String的转换方法"><a href="#String的转换方法" class="headerlink" title="String的转换方法"></a>String的转换方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] toCharArray():把字符串转换为字符数组 </span><br><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span>:把字符串转换为小写字符串 </span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span>:把字符串转换为大写字符串</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">//例子</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 创建字符串对象</span></span><br><span class="line">      String s = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">      <span class="comment">// char[] toCharArray():把字符串转换为字符数组</span></span><br><span class="line">      <span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; chs.length; x++) &#123;</span><br><span class="line">        System.out.println(chs[x]);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">      <span class="comment">// String toLowerCase():把字符串转换为小写字符串</span></span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>.toLowerCase());</span><br><span class="line">      <span class="comment">// String toUpperCase():把字符串转换为大写字符串</span></span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>.toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">-----------</span><br><span class="line">helloworld</span><br><span class="line">HELLOWORLD</span><br></pre></td></tr></table></figure><h3 id="String的比较方法"><a href="#String的比较方法" class="headerlink" title="String的比较方法"></a>String的比较方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span>:比较两个字符串的值是否相等</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span>:字符串比较，根据情况返回对应的<span class="keyword">int</span>值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//例子</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 创建字符串对象</span></span><br><span class="line">      String str1=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">      String str2=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">      String str3=<span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">      String str4=<span class="string">&quot;afghij&quot;</span>;</span><br><span class="line">      String str5=<span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">      <span class="comment">//boolean equals(Object anObject):比较两个字符串的值是否相等</span></span><br><span class="line">      System.out.println(str1.equals(str2));</span><br><span class="line">      System.out.println(str1.equals(str3));</span><br><span class="line">      System.out.println(str1.equalsIgnoreCase(str5));</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">      <span class="comment">//int compareTo(String anotherString):字符串比较，根据情况返回对应的int值</span></span><br><span class="line">      <span class="comment">//如果这两个字符串前面部分都相等，比较的是两个字符串的长度</span></span><br><span class="line">      System.out.println(str1.compareTo(str2));</span><br><span class="line">      System.out.println(str1.compareTo(str3));</span><br><span class="line">      System.out.println(str3.compareTo(str1));</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">      <span class="comment">//如果这两个字符串前面部分不相等，从第一个开始比ASCII码，相等就继续往后比，不相同比较结束</span></span><br><span class="line">      System.out.println(str1.compareTo(str4));</span><br><span class="line">      System.out.println(str4.compareTo(str1));</span><br><span class="line">      System.out.println(str4.compareTo(str5));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">-----------</span><br><span class="line"><span class="number">0</span></span><br><span class="line">-<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">-----------</span><br><span class="line">-<span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><h3 id="String的其他方法"><a href="#String的其他方法" class="headerlink" title="String的其他方法"></a>String的其他方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span>:去除字符串两端空格</span></span><br><span class="line"><span class="function">String[] <span class="title">split</span><span class="params">(String str)</span>:按照指定符号分割字符串</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endWith</span><span class="params">(String Str)</span>:是否以指定字符串为结尾</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startWith</span><span class="params">(String Str)</span>:是否以指定字符串为开头</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">//例子</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 创建字符串对象</span></span><br><span class="line">      <span class="comment">//String trim():去除字符串两端空格</span></span><br><span class="line">      String s1=<span class="string">&quot;   Hello World   &quot;</span>;</span><br><span class="line">      System.out.println(s1.trim());</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">      <span class="comment">//String[] split(String str):按照指定符号分割字符串</span></span><br><span class="line">      String s2=<span class="string">&quot;The hard part isn’t making the decision. It’s living with it.&quot;</span>;</span><br><span class="line">      String[] array1=s2.split(<span class="string">&quot; &quot;</span>);<span class="comment">//通过空格分成数组</span></span><br><span class="line">      System.out.println(<span class="string">&quot;array1=&quot;</span>+Arrays.toString(array1));</span><br><span class="line">      String[] array2=s2.split(<span class="string">&quot;[ .]&quot;</span>);<span class="comment">//通过空格或.来分成数组</span></span><br><span class="line">      System.out.println(<span class="string">&quot;array2=&quot;</span>+Arrays.toString(array2));</span><br><span class="line">      String s3=<span class="string">&quot;The hard part isn’t making the decision. . . It’s living with it.&quot;</span>;</span><br><span class="line">      String[] array3=s3.split(<span class="string">&quot;[ .]&quot;</span>);<span class="comment">//通过空格或.来分成数组</span></span><br><span class="line">      System.out.println(<span class="string">&quot;array3=&quot;</span>+Arrays.toString(array3));</span><br><span class="line">      String[] array4=s3.split(<span class="string">&quot;[ .]+&quot;</span>);<span class="comment">//通过多个或一个空格或.来分成数组</span></span><br><span class="line">      System.out.println(<span class="string">&quot;array4=&quot;</span>+Arrays.toString(array4));</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">      <span class="comment">//boolean endWith(String Str):是否以指定字符串为结尾</span></span><br><span class="line">      String s4=<span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">      System.out.println(s4.endsWith(<span class="string">&quot;ld&quot;</span>));</span><br><span class="line">      System.out.println(s4.startsWith(<span class="string">&quot;Hell&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">Hello World</span><br><span class="line">-----------</span><br><span class="line">array1=[The, hard, part, isn’t, making, the, decision., It’s, living, with, it.]</span><br><span class="line">array2=[The, hard, part, isn’t, making, the, decision, , It’s, living, with, it]</span><br><span class="line">array3=[The, hard, part, isn’t, making, the, decision, , , , , , It’s, living, with, it]</span><br><span class="line">array4=[The, hard, part, isn’t, making, the, decision, It’s, living, with, it]</span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h1 id="String、StringBuilder和StringBuffer"><a href="#String、StringBuilder和StringBuffer" class="headerlink" title="String、StringBuilder和StringBuffer"></a>String、StringBuilder和StringBuffer</h1><h2 id="StringBuilder常用方法-StringBuffer类似"><a href="#StringBuilder常用方法-StringBuffer类似" class="headerlink" title="StringBuilder常用方法(StringBuffer类似)"></a>StringBuilder常用方法(StringBuffer类似)</h2><h3 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder sb1=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">// 在位置0处插入字符数组</span></span><br><span class="line">    sb1.insert(<span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;);</span><br><span class="line">    System.out.println(sb1);</span><br><span class="line">    <span class="comment">// 在位置1处插入字符数组。2表示字符数组起始位置，3表示长度</span></span><br><span class="line">    sb1.insert(<span class="number">1</span>, <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>&#125;, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(sb1);</span><br><span class="line">    <span class="comment">// 在位置3处插入float,其他数据类型类似</span></span><br><span class="line">    sb1.insert(<span class="number">3</span>, <span class="number">1.414f</span>);</span><br><span class="line">    System.out.println(sb1);</span><br><span class="line">    System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">    StringBuilder sb2=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">//在位置0处插入StringBuilder对象</span></span><br><span class="line">    sb2.insert(<span class="number">0</span>, <span class="keyword">new</span> StringBuilder(<span class="string">&quot;StringBuilder&quot;</span>));</span><br><span class="line">    System.out.println(sb2);</span><br><span class="line">    <span class="comment">// 在位置1处插入StringBuffer对象。2表示被在位置插入对象的起始位置(包括)，3是结束位置(不包括)</span></span><br><span class="line">    sb2.insert(<span class="number">1</span>, <span class="keyword">new</span> StringBuilder(<span class="string">&quot;Hello&quot;</span>), <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(sb2);</span><br><span class="line">    System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">    <span class="comment">// 在位置0处插入Object对象。此处以HashMap为例 HashMap map = new HashMap(); map.put(&quot;1&quot;, &quot;one&quot;);</span></span><br><span class="line">    StringBuilder sb3=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">    sb3.insert(<span class="number">0</span>, map);</span><br><span class="line">    System.out.println(sb3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">abcde</span><br><span class="line">aCDEbcde</span><br><span class="line">aCD1.414Ebcde</span><br><span class="line">------------</span><br><span class="line">StringBuilder</span><br><span class="line">SltringBuilder</span><br><span class="line">------------</span><br><span class="line">&#123;<span class="number">2</span>=two, <span class="number">3</span>=three&#125;</span><br></pre></td></tr></table></figure><h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder sb1=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">// 追加字符数组</span></span><br><span class="line">    sb1.append(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;);</span><br><span class="line">    System.out.println(sb1);</span><br><span class="line">    <span class="comment">// 追加字符数组。1表示字符数组起始位置，3表示长度</span></span><br><span class="line">    sb1.append(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>&#125;, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(sb1);</span><br><span class="line">    <span class="comment">// 追加float</span></span><br><span class="line">    sb1.append(<span class="number">1.414f</span>);</span><br><span class="line">    System.out.println(sb1);</span><br><span class="line">    System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">    StringBuilder sb2=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">// 追加StringBuilder对象</span></span><br><span class="line">    sb2.append(<span class="keyword">new</span> StringBuilder(<span class="string">&quot;StringBuilder&quot;</span>));</span><br><span class="line">    System.out.println(sb2);</span><br><span class="line">    <span class="comment">// 追加StringBuilder对象。2表示被追加对象的起始位置(包括)，4是结束位置(不包括)</span></span><br><span class="line">    sb2.append(<span class="keyword">new</span> StringBuilder(<span class="string">&quot;Hello&quot;</span>), <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    System.out.println(sb2);</span><br><span class="line">    System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">    StringBuilder sb3=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">// 追加Object对象。此处以HashMap为例</span></span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line">    sb3.append(map);</span><br><span class="line">    System.out.println(sb3);</span><br><span class="line">    System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">    StringBuilder sb4=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">// 追加unicode编码</span></span><br><span class="line">    sb4.appendCodePoint(<span class="number">0x5b57</span>); <span class="comment">// 0x5b57是“字”的unicode编码</span></span><br><span class="line">    sb4.appendCodePoint(<span class="number">0x7b26</span>); <span class="comment">// 0x7b26是“符”的unicode编码</span></span><br><span class="line">    sb4.appendCodePoint(<span class="number">0x7f16</span>); <span class="comment">// 0x7f16是“编”的unicode编码</span></span><br><span class="line">    sb4.appendCodePoint(<span class="number">0x7801</span>); <span class="comment">// 0x7801是“码”的unicode编码</span></span><br><span class="line">    System.out.println(sb4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">abcde</span><br><span class="line">abcdeBCD</span><br><span class="line">abcdeBCD1<span class="number">.414</span></span><br><span class="line">------------</span><br><span class="line">StringBuilder</span><br><span class="line">StringBuilderll</span><br><span class="line">------------</span><br><span class="line">&#123;<span class="number">1</span>=AA, <span class="number">2</span>=BB&#125;</span><br><span class="line">------------</span><br><span class="line">字符编码</span><br></pre></td></tr></table></figure><h3 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">replace</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder sb;</span><br><span class="line">    sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;0123456789&quot;</span>);</span><br><span class="line">    <span class="comment">//将字符串索引1到4(不包括4)替换为A</span></span><br><span class="line">    sb.replace(<span class="number">1</span>, <span class="number">4</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb=&quot;</span>+sb);</span><br><span class="line">    sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;0123456789&quot;</span>);</span><br><span class="line">    sb.reverse();</span><br><span class="line">    System.out.println(<span class="string">&quot;sb=&quot;</span>+sb);</span><br><span class="line">    sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;0123456789&quot;</span>);</span><br><span class="line">    sb.setCharAt(<span class="number">0</span>, <span class="string">&#x27;M&#x27;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;sb=&quot;</span>+sb);</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">sb=0A456789</span><br><span class="line">sb=<span class="number">9876543210</span></span><br><span class="line">sb=M123456789</span><br></pre></td></tr></table></figure><h3 id="delete方法"><a href="#delete方法" class="headerlink" title="delete方法"></a>delete方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;0123456789&quot;</span>);</span><br><span class="line">    <span class="comment">// 删除位置0的字符，剩余字符是“123456789”。</span></span><br><span class="line">    sb.deleteCharAt(<span class="number">0</span>);</span><br><span class="line">    System.out.println(sb);</span><br><span class="line">    <span class="comment">// 删除位置3(包括)到位置6(不包括)之间的字符，剩余字符是“123789”。</span></span><br><span class="line">    sb.delete(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    System.out.println(sb);</span><br><span class="line">    <span class="comment">// 获取sb中从位置1开始的字符串</span></span><br><span class="line">    String str1 = sb.substring(<span class="number">1</span>);</span><br><span class="line">    System.out.println(str1);</span><br><span class="line">    <span class="comment">// 获取sb中从位置3(包括)到位置5(不包括)之间的字符串</span></span><br><span class="line">    String str2 = sb.substring(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    System.out.println(str2);</span><br><span class="line">    <span class="comment">// 获取sb中从位置3(包括)到位置5(不包括)之间的字符串，获取的对象是CharSequence对象，此处转型为String</span></span><br><span class="line">    String str3 = (String)sb.subSequence(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    System.out.println(str3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">123456789</span></span><br><span class="line"><span class="number">123789</span></span><br><span class="line"><span class="number">23789</span></span><br><span class="line"><span class="number">78</span></span><br><span class="line"><span class="number">78</span></span><br></pre></td></tr></table></figure><h3 id="index方法"><a href="#index方法" class="headerlink" title="index方法"></a>index方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;abcAbcABCabCaBcAbCaBCabc&quot;</span>);</span><br><span class="line">    <span class="comment">//从前往后，找出&quot;bc&quot;第一次出现的位置</span></span><br><span class="line">    System.out.println(sb.indexOf(<span class="string">&quot;bc&quot;</span>));</span><br><span class="line">    <span class="comment">//从位置5开始，从前往后，找出&quot;bc&quot;第一次出现的位置</span></span><br><span class="line">    System.out.println(sb.indexOf(<span class="string">&quot;bc&quot;</span>, <span class="number">5</span>));</span><br><span class="line">    <span class="comment">//从后往前，找出&quot;bc&quot;第一次出现的位置</span></span><br><span class="line">    System.out.println(sb.lastIndexOf(<span class="string">&quot;bc&quot;</span>));</span><br><span class="line">    <span class="comment">//从位置4开始，从后往前，找出&quot;bc&quot;第一次出现的位置</span></span><br><span class="line">    System.out.println(sb.lastIndexOf(<span class="string">&quot;bc&quot;</span>, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">others</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//StringBuffer( ); 分配16个字符的缓冲区</span></span><br><span class="line">    StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">//capacity()返回的是字符串缓冲区的容量</span></span><br><span class="line">    System.out.println(sb1.capacity());</span><br><span class="line">    System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">    StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;0123456789&quot;</span>);</span><br><span class="line">    <span class="comment">//除了按照s的大小分配空间外,再分配16个字符的缓冲区</span></span><br><span class="line">    System.out.println(sb2.capacity());</span><br><span class="line">    System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">    StringBuilder sb3 = <span class="keyword">new</span> StringBuilder(<span class="number">7</span>);</span><br><span class="line">    <span class="comment">//StringBuffer(int len); 分配len个字符的缓冲区</span></span><br><span class="line">    System.out.println(sb3.capacity());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringBuilder与StringBuffer的区别，StringBuilder与String的区别"><a href="#StringBuilder与StringBuffer的区别，StringBuilder与String的区别" class="headerlink" title="StringBuilder与StringBuffer的区别，StringBuilder与String的区别"></a>StringBuilder与StringBuffer的区别，StringBuilder与String的区别</h2><ul><li><p>StringBuilder效率高，线程不安全，StringBuffer效率低，线程安全。</p></li><li><p>String是不可变字符串，是因为源码中由final进行修饰，StringBuilder是可变字符串。</p></li><li><p>如果是简单的声明一个字符串没有后续过多的操作，使用String,StringBuilder均可，若后续对字符串做频繁的添加，删除操作,或者是在循环当中动态的改变字符串的长度应该用StringBuilder。使用String会产生多余的字符串，占用内存空间。</p></li></ul><h1 id="日期时间类"><a href="#日期时间类" class="headerlink" title="日期时间类"></a>日期时间类</h1><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dateTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">// 使用 toString() 函数显示日期时间</span></span><br><span class="line">    System.out.println(date);</span><br><span class="line">    System.out.println(date.toLocaleString());</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">    <span class="comment">//日期按(自1970年1月1日经历的毫秒数值)进行比较</span></span><br><span class="line">    <span class="keyword">long</span> time = date.getTime();</span><br><span class="line">    <span class="keyword">long</span> time2 = date.getTime();</span><br><span class="line">    System.out.println(time==time2);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">    <span class="comment">//使用方法 before()，after() 和 equals()</span></span><br><span class="line">    <span class="keyword">boolean</span> before = <span class="keyword">new</span> Date(<span class="number">2021</span>, <span class="number">11</span>, <span class="number">18</span>).before(<span class="keyword">new</span> Date(<span class="number">2021</span>, <span class="number">11</span>, <span class="number">19</span>));</span><br><span class="line">    System.out.println(before);</span><br><span class="line">    <span class="keyword">boolean</span> after = <span class="keyword">new</span> Date(<span class="number">2021</span>, <span class="number">11</span>, <span class="number">18</span>).after(<span class="keyword">new</span> Date(<span class="number">2021</span>, <span class="number">11</span>, <span class="number">19</span>));</span><br><span class="line">    System.out.println(after);</span><br><span class="line">    <span class="keyword">boolean</span> eq = <span class="keyword">new</span> Date(<span class="number">2021</span>, <span class="number">11</span>, <span class="number">18</span>).equals(<span class="keyword">new</span> Date(<span class="number">2021</span>, <span class="number">11</span>, <span class="number">18</span>));</span><br><span class="line">    System.out.println(eq);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">    Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">    Date date2 = <span class="keyword">new</span> Date(date1.getTime()-(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">1000</span>));</span><br><span class="line">    <span class="comment">//相等返回0，大于返回1，小于返回-1</span></span><br><span class="line">    System.out.println(date1.compareTo(date2));</span><br><span class="line">    System.out.println(date2.compareTo(date1));</span><br><span class="line">    System.out.println(date1.compareTo(date1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">Sat Nov <span class="number">27</span> <span class="number">15</span>:<span class="number">26</span>:<span class="number">06</span> CST <span class="number">2021</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">11</span>-<span class="number">27</span> <span class="number">15</span>:<span class="number">26</span>:<span class="number">06</span></span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">-----------</span><br><span class="line"><span class="number">1</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a>SimpleDateFormat类</h2><ul><li>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。</li><li>SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sdfTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Date dNow = <span class="keyword">new</span> Date( );</span><br><span class="line">    <span class="comment">//其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</span></span><br><span class="line">    <span class="comment">//有的格式大写，有的格式小写，例如 MM 是月份，mm 是分;HH 是 24 小时制，而 hh 是 12 小时制</span></span><br><span class="line">    SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat (<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前时间为: &quot;</span> + ft.format(dNow));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">当前时间为: <span class="number">2021</span>-<span class="number">11</span>-<span class="number">27</span> <span class="number">03</span>:<span class="number">30</span>:<span class="number">01</span></span><br></pre></td></tr></table></figure><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Calendar c1 = Calendar.getInstance();</span><br><span class="line">    System.out.println(c1.getTime().toLocaleString());</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    c1.set(<span class="number">2021</span>, <span class="number">11</span>-<span class="number">1</span>, <span class="number">27</span>);</span><br><span class="line">    <span class="comment">// 获得年份</span></span><br><span class="line">    <span class="keyword">int</span> year = c1.get(Calendar.YEAR);</span><br><span class="line">    <span class="comment">// 获得月份</span></span><br><span class="line">    <span class="keyword">int</span> month = c1.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 获得日期</span></span><br><span class="line">    <span class="keyword">int</span> date = c1.get(Calendar.DATE);</span><br><span class="line">    <span class="comment">// 获得小时</span></span><br><span class="line">    <span class="keyword">int</span> hour = c1.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">    <span class="comment">// 获得分钟</span></span><br><span class="line">    <span class="keyword">int</span> minute = c1.get(Calendar.MINUTE);</span><br><span class="line">    <span class="comment">// 获得秒</span></span><br><span class="line">    <span class="keyword">int</span> second = c1.get(Calendar.SECOND);</span><br><span class="line">    <span class="comment">// 获得星期几(注意(这个与Date类是不同的):1代表星期日、2代表星期一、3代表星期二，以此类推)</span></span><br><span class="line">    <span class="keyword">int</span> day = c1.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">    System.out.println(<span class="string">&quot;今天星期&quot;</span>+day);</span><br><span class="line">    System.out.println(year+<span class="string">&quot;:&quot;</span>+month+<span class="string">&quot;:&quot;</span>+date+<span class="string">&quot; &quot;</span>+hour+<span class="string">&quot;:&quot;</span>+minute+<span class="string">&quot;:&quot;</span>+second);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    Calendar c2 = Calendar.getInstance();</span><br><span class="line">    <span class="comment">//设置完整日期</span></span><br><span class="line">    c2.set(<span class="number">2021</span>,<span class="number">11</span>-<span class="number">1</span>,<span class="number">20</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>);<span class="comment">//把Calendar对象c1的年月日分别设这为:2009、6、12</span></span><br><span class="line">    <span class="comment">//设置某个字段</span></span><br><span class="line">    System.out.println(c2.getTime().toLocaleString());</span><br><span class="line">    c2.set(Calendar.DATE,<span class="number">10</span>);</span><br><span class="line">    c2.set(Calendar.YEAR,<span class="number">2008</span>); <span class="comment">//其他字段属性set的意义以此类推</span></span><br><span class="line">    System.out.println(c2.getTime().toLocaleString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">11</span>-<span class="number">27</span> <span class="number">15</span>:<span class="number">48</span>:<span class="number">21</span></span><br><span class="line">---------------</span><br><span class="line">今天星期<span class="number">7</span></span><br><span class="line"><span class="number">2021</span>:<span class="number">11</span>:<span class="number">27</span> <span class="number">15</span>:<span class="number">48</span>:<span class="number">21</span></span><br><span class="line">---------------</span><br><span class="line"><span class="number">2021</span>-<span class="number">11</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">11</span></span><br><span class="line"><span class="number">2008</span>-<span class="number">11</span>-<span class="number">10</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">11</span></span><br></pre></td></tr></table></figure><h1 id="Bigdecimal类"><a href="#Bigdecimal类" class="headerlink" title="Bigdecimal类"></a>Bigdecimal类</h1><ul><li>不论是float 还是double都是浮点数，而计算机是二进制的，浮点数会失去一定的精确度。十进制值通常没有完全相同的二进制表示形式，十进制数的二进制表示形式可能不精确。只能无限接近于那个值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="number">0.1</span>+<span class="number">0.2</span>);</span><br><span class="line">      System.out.println(<span class="number">0.3</span>-<span class="number">0.1</span>);</span><br><span class="line">      <span class="comment">//BigDecimal大浮点数精确计算</span></span><br><span class="line">      BigDecimal b1=<span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.1&quot;</span>);</span><br><span class="line">      BigDecimal b2=<span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.2&quot;</span>);</span><br><span class="line">      <span class="comment">//加法</span></span><br><span class="line">      System.out.println(b1.add(b2));</span><br><span class="line">      <span class="comment">//减法</span></span><br><span class="line">      System.out.println(b1.subtract(b2));</span><br><span class="line">      <span class="comment">//乘法</span></span><br><span class="line">      System.out.println(b1.multiply(b2));</span><br><span class="line">      <span class="comment">//除法</span></span><br><span class="line">      System.out.println(b1.divide(b2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br><span class="line"><span class="number">0.19999999999999998</span></span><br><span class="line"><span class="number">0.3</span></span><br><span class="line">-<span class="number">0.1</span></span><br><span class="line"><span class="number">0.02</span></span><br><span class="line"><span class="number">0.5</span></span><br></pre></td></tr></table></figure><h1 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,<span class="keyword">int</span> srcPos,Object dest,<span class="keyword">int</span> destPos,<span class="keyword">int</span> length)</span>:复制数组</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span>:获取当前系统时间，返回的是毫秒值</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span>:建议JVM赶快启动垃圾回收器回收垃圾</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span>:退出JVM，如果参数是0表示正常退出JVM，非0表示异常退出JVM</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">//例子</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length):复制数组</span></span><br><span class="line">      <span class="comment">//src：原数组，srcPos：原数组从哪个位置开始复制</span></span><br><span class="line">      <span class="comment">//dest：目标数组，destPos：目标数组从哪个位置开始复制，length：复制的长度</span></span><br><span class="line">      <span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">      <span class="keyword">int</span>[] dest=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">      System.arraycopy(arr,<span class="number">1</span>,dest,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dest.length;i++)&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d &quot;</span>,dest[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">      <span class="comment">//static long currentTimeMillis():获取当前系统时间，返回的是毫秒值</span></span><br><span class="line">      <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">999999999</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">999999999</span>;j++)&#123;</span><br><span class="line">          <span class="keyword">int</span> result=i+j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">long</span> end=System.currentTimeMillis();</span><br><span class="line">      System.out.println(<span class="string">&quot;用时:&quot;</span>+(end-start));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">-----------</span><br><span class="line">用时:<span class="number">15</span></span><br></pre></td></tr></table></figure><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="File的构造方法"><a href="#File的构造方法" class="headerlink" title="File的构造方法"></a>File的构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//路径分隔符</span></span><br><span class="line">      String pathSeparator= File.pathSeparator;</span><br><span class="line">      System.out.println(pathSeparator);</span><br><span class="line">      <span class="comment">//文件名分隔符</span></span><br><span class="line">      String separator=File.separator;</span><br><span class="line">      System.out.println(separator);</span><br><span class="line">      System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">      <span class="comment">//File的构造方法</span></span><br><span class="line">      <span class="comment">//1.File(String pathname):通过将给定路径名字符串转换为抽象路径名来创建一个新File实例</span></span><br><span class="line">      <span class="comment">//路径可以是文件末尾，也可以是文件夹末尾；路径可以是相对路径，也可以是绝对路径；路径可以存在，也可以不存在</span></span><br><span class="line">      <span class="comment">//创建File对象，只是把字符串路径封装为File对象，不考虑路径真假情况</span></span><br><span class="line">      File f1=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test/photo1.jpeg&quot;</span>);</span><br><span class="line">      System.out.println(f1);</span><br><span class="line">      File f2=<span class="keyword">new</span> File(<span class="string">&quot;photo2.jpeg&quot;</span>);</span><br><span class="line">      System.out.println(f2);</span><br><span class="line">      File f3=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test&quot;</span>);</span><br><span class="line">      System.out.println(f3);</span><br><span class="line">      System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">      <span class="comment">//2.File(String parent,String child) 根据parent路径名字符串和child路径名字符串创建一个新File实例</span></span><br><span class="line">      File f4=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test/&quot;</span>,<span class="string">&quot;photo1.jpeg&quot;</span>);</span><br><span class="line">      System.out.println(f4);</span><br><span class="line">      System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">      <span class="comment">//3.File(File parent,String child) 根据parent抽象路径名和child路径名字符串创建一个新File实例</span></span><br><span class="line">      File parent=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test/&quot;</span>);</span><br><span class="line">      File f5=<span class="keyword">new</span> File(parent,<span class="string">&quot;photo1.jpeg&quot;</span>);</span><br><span class="line">      System.out.println(f5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">:</span><br><span class="line">/</span><br><span class="line">-------------</span><br><span class="line">/Users/test/photo1.jpeg</span><br><span class="line">photo2.jpeg</span><br><span class="line">/Users/test</span><br><span class="line">-------------</span><br><span class="line">/Users/test/photo1.jpeg</span><br><span class="line">-------------</span><br><span class="line">/Users/test/photo1.jpeg</span><br></pre></td></tr></table></figure><h2 id="File的获取方法"><a href="#File的获取方法" class="headerlink" title="File的获取方法"></a>File的获取方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAbsolutePath</span><span class="params">()</span>:返回此File的绝对路径名字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span>:将此File转换为路径名字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span>:返回此File表示的文件或文件夹<span class="params">(目录)</span>名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span>:返回此File表示的文件的长度，获得的是构造方法指定的文件的大小，以字节为单位</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">//例子</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      File f1=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test/photo1.jpeg&quot;</span>);</span><br><span class="line">      File f2=<span class="keyword">new</span> File(<span class="string">&quot;photo2.jpeg&quot;</span>);</span><br><span class="line">      File f3=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test&quot;</span>);</span><br><span class="line">      <span class="comment">//public String getAbsolutePath():返回此File的绝对路径名字符串</span></span><br><span class="line">      System.out.println(f1.getAbsolutePath());</span><br><span class="line">      System.out.println(f2.getAbsolutePath());</span><br><span class="line">      System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">      <span class="comment">//public String getPath():将此File转换为路径名字符串</span></span><br><span class="line">      System.out.println(f1.getPath());</span><br><span class="line">      System.out.println(f2.getPath());</span><br><span class="line">      System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">      <span class="comment">//public String getName():返回此File表示的文件或文件夹(目录)名称</span></span><br><span class="line">      System.out.println(f1.getName());</span><br><span class="line">      System.out.println(f2.getName());</span><br><span class="line">      System.out.println(f3.getName());</span><br><span class="line">      System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">      <span class="comment">//public long length():返回此File表示的文件的长度,获得的是构造方法指定的文件的大小，以字节为单位</span></span><br><span class="line">      <span class="comment">//文件夹是没有大小概念的，不能获取文件夹的大小</span></span><br><span class="line">      <span class="comment">//如果构造方法中给出的路径不存在，那么length方法返回0</span></span><br><span class="line">      System.out.println(f1.length());</span><br><span class="line">      System.out.println(f2.length());<span class="comment">//路径错误</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">/Users/test/photo1.jpeg</span><br><span class="line">/Users/xxx/IdeaProjects/JavaSE/photo2.jpeg</span><br><span class="line">-------------</span><br><span class="line">/Users/test/photo1.jpeg</span><br><span class="line">photo2.jpeg</span><br><span class="line">-------------</span><br><span class="line">photo1.jpeg</span><br><span class="line">photo2.jpeg</span><br><span class="line">test</span><br><span class="line">-------------</span><br><span class="line"><span class="number">800574</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="File的判断方法"><a href="#File的判断方法" class="headerlink" title="File的判断方法"></a>File的判断方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span>:此File表示的文件或目录是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span>:此File表示的是否为目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span>:此File表示的是否为文件</span></span><br></pre></td></tr></table></figure><h2 id="File的创建删除方法"><a href="#File的创建删除方法" class="headerlink" title="File的创建删除方法"></a>File的创建删除方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span>:当且仅当具有该名称的文件尚不存在时，创建一个新的空文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span>:删除由此File表示的文件或目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span>:创建由此File表示的目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span>:创建由此File表示的目录，包括任何必须但不存在的父目录</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//例子</span></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          public boolean createNewFile():当且仅当具有该名称的文件尚不存在时，创建一个新的空文件</span></span><br><span class="line"><span class="comment">          true 文件不存在，创建文件；false 文件存在，不会创建</span></span><br><span class="line"><span class="comment">          此方法只能创建文件，不能创建文件夹，创建文件的路径必须存在，否则会抛出异常</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        File f1=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test/infor.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(f1.createNewFile());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件路径不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        File f2=<span class="keyword">new</span> File(<span class="string">&quot;/Us/test/infor.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(f2.createNewFile());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件路径不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        <span class="comment">/*public boolean mkdir():创建单级空文件夹</span></span><br><span class="line"><span class="comment">          public boolean mkdirs():既可以创建单极空文件夹，也可以创建多级文件夹</span></span><br><span class="line"><span class="comment">          true 文件夹不存在，创建文件；false 文件夹存在，不会创建；构造方法中路径不存在</span></span><br><span class="line"><span class="comment">          这两个方法只能创建文件夹，不能创建文件</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        File f3=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test/animal/dog&quot;</span>);</span><br><span class="line">        System.out.println(f3.mkdirs());</span><br><span class="line">        File f4=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test/plant&quot;</span>);</span><br><span class="line">        System.out.println(f4.mkdir());</span><br><span class="line">        File f5=<span class="keyword">new</span> File(<span class="string">&quot;/Us/test/plant&quot;</span>);</span><br><span class="line">        System.out.println(f5.mkdir());<span class="comment">//不会抛出异常，路径不存在，不会创建</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           public boolean delete():删除由此File表示的文件或目录</span></span><br><span class="line"><span class="comment">           true 文件/文件夹删除成功，创建文件；false 文件夹中有内容，不会删除；构造方法中路径不存在</span></span><br><span class="line"><span class="comment">           delete方法是直接在硬盘删除文件/文件夹。不走回收站，删除需谨慎</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        File f6=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test/animal&quot;</span>);</span><br><span class="line">        System.out.println(f6.delete());</span><br><span class="line">        System.out.println(f2.delete());</span><br><span class="line">        System.out.println(f1.delete());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">文件路径不存在</span><br><span class="line">-------------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">-------------</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="File的遍历方法"><a href="#File的遍历方法" class="headerlink" title="File的遍历方法"></a>File的遍历方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] list():返回一个String数组，表示该File目录中所有字文件或目录</span><br><span class="line"><span class="keyword">public</span> File[] listFiles():返回一个File数组，表示该File目录中所有的字文件或目录</span><br><span class="line"></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//public String[] list():返回一个String数组，表示该File目录中所有字文件或目录</span></span><br><span class="line">      File f1=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test&quot;</span>);</span><br><span class="line">      String[] arr=f1.list();</span><br><span class="line">      <span class="keyword">for</span> (String s : arr) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s &quot;</span>,s);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">      <span class="comment">//public File[] listFiles():返回一个File数组，表示该File目录中所有的字文件或目录</span></span><br><span class="line">      File f2=<span class="keyword">new</span> File(<span class="string">&quot;/Users/test&quot;</span>);</span><br><span class="line">      File[] files=f2.listFiles();</span><br><span class="line">      <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        System.out.println(file);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">photo1.jpeg .DS_Store plant animal photo2.jpeg </span><br><span class="line">-------------</span><br><span class="line">/Users/test/photo1.jpeg</span><br><span class="line">/Users/test/.DS_Store</span><br><span class="line">/Users/test/plant</span><br><span class="line">/Users/test/animal</span><br><span class="line">/Users/test/photo2.jpeg</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常｜异常体系结构和处理机制</title>
      <link href="/articles/1b73a25a.html"/>
      <url>/articles/1b73a25a.html</url>
      
        <content type="html"><![CDATA[<h1 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h1><ul><li>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</li></ul><h2 id="异常发生的原因"><a href="#异常发生的原因" class="headerlink" title="异常发生的原因"></a>异常发生的原因</h2><ul><li>异常发生的原因有很多，通常包含以下几大类<ul><li>用户输入了非法数据。</li><li>要打开的文件不存在。</li><li>网络通信时连接中断，或者JVM内存溢出。</li></ul></li><li>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。</li></ul><h2 id="异常的三种类型"><a href="#异常的三种类型" class="headerlink" title="异常的三种类型"></a>异常的三种类型</h2><ul><li><strong>检查性异常</strong>：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li><strong>运行时异常</strong>： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li><strong>错误</strong>： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li></ul><h1 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h1><ul><li>所有异常类型都是内置类 Throwable 的子类，因而 Throwable 在异常类的层次结构的顶层。 </li><li>Throwable 分成两个不同的分支<ul><li>一个分支是Error，它表示不希望被程序捕获或者是程序无法处理的错误。</li><li>另一个分支是Exception，它表示用户程序可能捕捉的异常情况或者说是程序可以处理的异常。</li></ul></li><li>异常类 Exception 又分为运行时异常( RuntimeException )和非运行时异常。</li><li>Java异常又可以分为不受检查异常（ Unchecked Exception ）和检查异常（ Checked Exception ）。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/exception.JPG"></p><h1 id="异常之间的区别和联系"><a href="#异常之间的区别和联系" class="headerlink" title="异常之间的区别和联系"></a>异常之间的区别和联系</h1><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><ul><li>Error 类对象由 Java 虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>比如说： Java虚拟机运行错误（ Virtual MachineError ），当JVM不再有继续执行操作所需的内存资源时， 将出现 OutOfMemoryError 。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</li><li>还有发生在虚拟机试图执行应用时，如类定义错误（ NoClassDefFoundError ）、链接错误 （ LinkageError ）。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。</li></ul><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><ul><li>Exception 分支中有一个重要的子类 RuntimeException （运行时异常），该类型的异常自动为你所编写的程序定义 ArrayIndexOutOfBoundsException （数组下标越界）、 NullPointerException （空指针异常）、ArithmeticException （算术异常）、 MissingResourceException （丢失资源）、 ClassNotFoundException （找不到类）等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。 这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</li><li>而 RuntimeException 之外的异常我们统称为非运行时异常，类型上属于 Exception 类及其子类， 从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如 IOException 、 SQLException 等以及用户自定义的 Exception 异常，一般情况下不自定义检查异常。</li></ul><h2 id="检查异常和不受检查异常"><a href="#检查异常和不受检查异常" class="headerlink" title="检查异常和不受检查异常"></a>检查异常和不受检查异常</h2><h3 id="检查异常"><a href="#检查异常" class="headerlink" title="检查异常"></a>检查异常</h3><ul><li>在正确的程序运行过程中，很容易出现的、情理可容的异常状况，在一定程度上这种异常的 发生是可以预测的，并且一旦发生该种异常，就必须采取某种方式进行处理。</li><li>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于检查异常，当程序中可能出现这类异常，要么使用try-catch语句进行捕获，要么用throws子句抛出，否则编译无法通过。</li></ul><h3 id="不受检查异常"><a href="#不受检查异常" class="headerlink" title="不受检查异常"></a>不受检查异常</h3><ul><li>包括RuntimeException及其子类和Error。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>不受检查异常为编译器不要求强制处理的异常， 检查异常则是编译器要求必须处置的异常。</li></ul><h1 id="Java异常处理机制"><a href="#Java异常处理机制" class="headerlink" title="Java异常处理机制"></a>Java异常处理机制</h1><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><ul><li>当一个方法出现错误引发异常时，方法创建异常对象并交付运行时系统，异常对象中包含了异常类型和异常出现时的程序状态等异常信息。运行时系统负责寻找处置异常的代码并执行。</li></ul><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><ul><li>在方法抛出异常之后，运行时系统将转为寻找合适的异常处理器（exception handler）。潜在的异常处理器是异常发生时依次存留在调用栈中的方法的集合。当异常处理器所能处理的异常类型与方法抛出的异常类型相符时，即为合适的异常处理器。</li><li>运行时系统从发生异常的方法开始，依次回查调用栈中的方法，直至找到含有合适异常处理器的方法并执行。当运行时系统遍历调用栈而未找到合适的异常处理器，则运行时系统终止。同时，意味着Java程序的终止。</li><li>对于运行时异常 、错误 和检查异常 ，Java技术所要求的异常处理方式有所不同<ul><li>由于运行时异常及其子类的不可查性，为了更合理、更容易地实现应用程序，Java规定，运行时异常将由Java运行时系统自动抛出，允许应用程序忽略运行时异常。</li><li>对于方法运行中可能出现的 Error ，当运行方法不欲捕捉时，Java允许该方法不做任何抛出声明。因为，大多数 Error 异常属于永远不能被允许发生的状况，也属于合理的应用程序不该捕捉的异常。</li><li>对于所有的检查异常，Java规定，一个方法必须捕捉，或者声明抛出方法之外。也就是说，当一个方法选择不捕捉检查异常时，它必须声明将抛出异常。</li></ul></li></ul><h1 id="异常处理5个关键字"><a href="#异常处理5个关键字" class="headerlink" title="异常处理5个关键字"></a>异常处理5个关键字</h1><ul><li>try – 用于监听。将要被监听的代码(可能抛出异常的代码)放在try语句块之内，当try语句块内发生异常时，异常就被抛出。</li><li>catch – 用于捕获异常。catch用来捕获try语句块中发生的异常。 </li><li>finally – finally语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络 连接和磁盘文件)。只有finally块执行完成之后，才会回来执行try或者catch块中的return或者throw语句，如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1</span></span><br><span class="line"><span class="comment">//如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testFinally</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch is begin&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally is begin&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(testFinally());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">catch is begin</span></span><br><span class="line"><span class="comment">finally is begin</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例子2 </span></span><br><span class="line"><span class="comment">//只有finally块执行完成之后，才会回来执行try或者catch块中的return或者throw语句</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testFinally</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch is begin&quot;</span>);</span><br><span class="line">            <span class="comment">//return 1;</span></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally is begin&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(testFinally());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">catch is begin</span></span><br><span class="line"><span class="comment">finally is begin</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>throw – 用于抛出异常。 </li><li>throws – 用在方法签名中，用于声明该方法可能抛出的异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//throws表示一个方法声明可能抛出一个异常，throw表示此处抛出一个已定义的异常（可以是自定义需继承Exception，也可以是java自己给出的异常类</span></span><br></pre></td></tr></table></figure><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h2><h3 id="语法形式"><a href="#语法形式" class="headerlink" title="语法形式"></a>语法形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//code that might generate exceptions</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="comment">//the code of handling exception1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="comment">//the code of handling exception2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>try 后的一对大括号将一块可能发生异常的代码包起来，即为监控区域。Java方法在运行过程中发生了异常，则创建异常对象。</li><li>将异常抛出监控区域之外，由Java运行时系统负责寻找匹配的 catch 子句来捕获异常。若有一个 catch 语句匹配到了，则执行该 catch 块中的异常处理代码，就不再尝试匹配别的 catch 块了。</li><li>如果抛出的异常对象属于 catch 子句的异常类，或者属于该异常类的子类，则认为生成 的异常对象与 catch 块捕获的异常类型相匹配。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1</span></span><br><span class="line"><span class="comment">//try-catch捕获异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;a/b的值是：&quot; + a / b);</span></span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// try监控区域</span></span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(); <span class="comment">// 通过throw语句抛出异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;a/b的值是：&quot;</span> + a / b);</span><br><span class="line">            System.out.println(<span class="string">&quot;this will not be printed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ArithmeticException e) &#123; <span class="comment">// catch捕捉异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常，变量b不能为0！&quot;</span>);</span><br><span class="line">            <span class="comment">//若为语句System.out.println(&quot;程序出现异常&quot;+e);</span></span><br><span class="line">            <span class="comment">//输出 程序出现异常java.lang.ArithmeticException</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序正常结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">    程序出现异常，变量b不能为0！</span></span><br><span class="line"><span class="comment">    程序正常结束。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例子2</span></span><br><span class="line"><span class="comment">//算术异常属于运行时异常，因而实际上该异常不需要程序抛出，运行时系统自动抛出。如果不用try-catch程序就不会往下执行了.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a/b的值是：&quot;</span> + a / b);</span><br><span class="line">System.out.println(<span class="string">&quot;this will not be printed!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">    Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">    at TestException.main(TestException.java:34)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="使用多重的catch语句"><a href="#使用多重的catch语句" class="headerlink" title="使用多重的catch语句"></a>使用多重的catch语句</h3><ul><li><p>很多情况下，由单个的代码段可能引起多个异常。处理这种情况，我们需要定义两个或者更多的 catch 子句，每个子句捕获一种类型的异常，当异常被引发时，每个 catch子句被依次检查，第一个匹配异常类型的子句执行，当一个 catch 子句执行以后，其他的子句将不执行。</p></li><li><p>编写多重catch语句块异常顺序先小后大，即先子类后父类。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;a/b的值是：&quot; + a / b);</span></span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// try监控区域</span></span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(); <span class="comment">// 通过throw语句抛出异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;a/b的值是：&quot;</span> + a / b);</span><br><span class="line">            System.out.println(<span class="string">&quot;this will not be printed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ArrayIndexOutOfBoundsException 数组越界！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ArithmeticException e) &#123; <span class="comment">// catch捕捉异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;ArithmeticException 程序出现异常，变量b不能为0！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exception 程序出现异常，变量b不能为0！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">    ArithmeticException 程序出现异常，变量b不能为0！</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="嵌套try语句"><a href="#嵌套try语句" class="headerlink" title="嵌套try语句"></a>嵌套try语句</h3><ul><li> try 语句可以被嵌套。也就是说，一个 try 语句可以在另一个 try 块的内部。每次进入 try 语句，异常的前后关系都会被推入堆栈。如果一个内部的 try 语句不含特殊异常的 catch 处理程序，堆栈将弹出，下一个 try 语句的 catch 处理程序将检查是否与之匹配。</li><li>这个过程将继续直到一个 catch 语句被匹配成功，或者是直到所有的嵌套 try 语句被检查完毕。如果没有 catch 语句匹配，Java运行时系统将处理这个异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//嵌套try的多种情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况1 嵌套try，内层中没有catch语句</span></span><br><span class="line"><span class="comment">//最外部的try语句块中嵌套了一个try-finally语句，内部的try语句中抛出了一个异常</span></span><br><span class="line"><span class="comment">//但是内部没有catch语句块，所以会执行最近的一个catch语句块，但是在跳出外部try包含语句块之前，需要先执行内部的finally语句块中的代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ex&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;out &quot;</span>+e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//in finally</span></span><br><span class="line"><span class="comment">//out java.lang.Exception: ex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况2 嵌套try，但内层有catch</span></span><br><span class="line"><span class="comment">//内部嵌套的语句块中有catch语句，所以当内部try语句块中抛出异常时，会接着执行内部的catch语句块，然后执行finally子句</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ex&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in &quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;out &quot;</span>+e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//in java.lang.Exception: ex</span></span><br><span class="line"><span class="comment">//in finally</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况3 嵌套try，但内层有catch且在内层catch再throw</span></span><br><span class="line"><span class="comment">//上面例子的基础上，内部的catch语句块中又抛出了一个异常,在执行完内部相应语句后，会接着执行外部的catch语句</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ex&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in &quot;</span>+e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ex2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;out &quot;</span>+e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//in java.lang.Exception: ex</span></span><br><span class="line"><span class="comment">//in finally</span></span><br><span class="line"><span class="comment">//out java.lang.Exception: ex2</span></span><br></pre></td></tr></table></figure><h2 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h2><h3 id="语法形式-1"><a href="#语法形式-1" class="headerlink" title="语法形式"></a>语法形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> ThrowableInstance;</span><br></pre></td></tr></table></figure><ul><li>这里的ThrowableInstance一定是 Throwable 类类型或者 Throwable 子类类型的一个对象。</li><li>有两种方法可以获取 Throwable 对象：在catch子句中使用参数或者使用 new 操作符创建。程序执行完 throw 语句之后立即停止； throw 后面的任何语句不被执行，最邻近的 try 块用来检查它是否含有一个与异常类型匹配的 catch 语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该程序两次处理相同的错误，首先， main() 方法设立了一个异常关系然后调用proc()。proc()方法设立了另一个异常处理关系并且立即抛出一个 NullPointerException 实例，NullPointerException 在 main() 中被再次捕获。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">proc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;null pointer&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Caught inside proc&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> e;<span class="comment">//在catch子句中使用参数或者使用 new 操作符创建</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        proc();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Recaught: &quot;</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//Caught inside proc</span></span><br><span class="line"><span class="comment">//Recaught: null pointer</span></span><br></pre></td></tr></table></figure><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><h3 id="语法形式-2"><a href="#语法形式-2" class="headerlink" title="语法形式"></a>语法形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//body of method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果一个方法可以导致一个异常但不处理它，它必须指定这种行为以使方法的调用者可以保护它们自己而不发生异常。要做到这点，我们可以在方法声明中包含一个 throws 子句。、</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">throw1</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Inside throw1 . &quot;</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">throw1();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IllegalAccessException e )&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Caught &quot;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//Inside throw1. </span></span><br><span class="line"><span class="comment">//Caught java.lang.IllegalAccessException: demo</span></span><br></pre></td></tr></table></figure><ul><li><p>如果是不受检查异常（ unchecked exception ），即 Error 、 RuntimeException 或它们的子类，那么可以不使用 throws 关键字来声明要抛出的异常，编译仍能顺利通过，但在运行 时会被系统抛出。</p></li><li><p>必须声明方法可抛出的任何检查异常（ checked exception ）。即如果一个方法可能出现受可 查异常，要么用 try-catch 语句捕获，要么用 throws 子句声明将它抛出，否则会导致编译错误。</p></li><li><p>仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异 常的时候，应该继续抛出。</p></li><li><p>调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同 的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。</p></li></ul><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><ul><li>finally 创建的代码块在 try/catch 块完成之后另一个 try/catch 出现之前执行。finally 块无论有没有异常抛出都会执行。如果抛出异常，即使没有 catch 子句匹配， finally 也会执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1 finally 块无论有没有异常抛出都会执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;begin finally&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;end finally&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//begin finally</span></span><br><span class="line"><span class="comment">//end finally</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例子2 如果抛出异常，即使没有catch子句匹配， finally也会执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFinally</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ex&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method finally&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;begin finally&quot;</span>);</span><br><span class="line">        testFinally();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Exception:&quot;</span>+e.getMessage());</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;end finally&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//begin finally</span></span><br><span class="line"><span class="comment">//method finally</span></span><br><span class="line"><span class="comment">//Exception:ex</span></span><br><span class="line"><span class="comment">//end finally</span></span><br></pre></td></tr></table></figure><h3 id="try-catch-finally-return-执行顺序"><a href="#try-catch-finally-return-执行顺序" class="headerlink" title="try, catch,finally ,return 执行顺序"></a>try, catch,finally ,return 执行顺序</h3><ul><li>1.执行try，catch ， 给返回值赋值 </li><li>2.执行finally </li><li>3.return</li></ul><h1 id="自定义异常步骤"><a href="#自定义异常步骤" class="headerlink" title="自定义异常步骤"></a>自定义异常步骤</h1><ul><li>创建自定义异常类。 </li><li>在方法中通过 throw 关键字抛出异常对象。 </li><li>如果在当前抛出异常的方法中处理异常，可以使用 try-catch 语句捕获并处理；否则在方法的 声明处通过 throws 关键字指明要抛出给方法调用者的异常，继续进行下一步操作。 </li><li>在出现异常方法的调用者中捕获并处理异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line">    MyException(<span class="keyword">int</span> a)&#123;</span><br><span class="line">        detail = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException [&quot;</span>+ detail + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Called compute(&quot;</span> + a + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Normal exit!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">compute(<span class="number">1</span>);</span><br><span class="line">compute(<span class="number">20</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyException me)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Caught &quot;</span> + me.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//Called compute(1)</span></span><br><span class="line"><span class="comment">//Normal exit!</span></span><br><span class="line"><span class="comment">//Called compute(20)</span></span><br><span class="line"><span class="comment">//Caught MyException [20]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象｜封装、继承和多态</title>
      <link href="/articles/dff13482.html"/>
      <url>/articles/dff13482.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h1><ul><li><p>Java的编程语言是面向对象的，采用这种语言进行编程称为面向对象编程(Object-Oriented Programming, OOP)。</p></li><li><p>面向对象的方法主要是把事物给对象化，包括其属性和行为。面向对象编程更贴近实际生活的思想。总体来说面向对象的底层还是面向过程，面向过程抽象成类，然后封装，方便使用就是面向对象。</p></li><li><p>面向对象的三个基本特征：封装、继承和多态。</p></li></ul><h1 id="抽象-Abstract"><a href="#抽象-Abstract" class="headerlink" title="抽象(Abstract)"></a>抽象(Abstract)</h1><ul><li>忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用关注细节。 </li><li>比如：需要设计一个学生体检的系统，我们只需要关注学生的身高、体重和肺活量等信息，而不需要关注学生的兴趣爱好等信息。所以说，抽象就是将多个物体的共同点归纳出来，就是抽出像的部分！</li></ul><h1 id="封装-Encapsulation"><a href="#封装-Encapsulation" class="headerlink" title="封装(Encapsulation)"></a>封装(Encapsulation)</h1><ul><li><p>封装是把过程和数据包围起来，对数据的访问只能通过指定的方式。也就是说把复杂的内部细节全部封装起来，只暴露简单的接口。</p></li><li><p>我们程序设计要追求“高内聚，低耦合”。</p><ul><li>高内聚就是类的内部数据操作细节自己完成，不允许外部干涉。</li><li>低耦合：仅暴露少量的方法给外部使用。</li></ul></li></ul><h2 id="封装的步骤"><a href="#封装的步骤" class="headerlink" title="封装的步骤"></a>封装的步骤</h2><ul><li>修改属性的可见性来限制对属性的访问（一般限制为private）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提供一个公开的方法设置或者访问私有的属性 。<ul><li>设置 通过set方法，命名格式： set属性名（）; 属性的首字母要大写 。</li><li>访问 通过get方法，命名格式： get属性名（）; 属性的首字母要大写。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作用和意义"><a href="#作用和意义" class="headerlink" title="作用和意义"></a>作用和意义</h2><ul><li>提高程序的安全性，保护数据 。</li><li>隐藏代码的实现细节。</li><li>统一用户的调用接口。</li><li>提高系统的可维护性。</li><li>便于调用者调用。</li></ul><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><ul><li><p>方法重载必须满足的条件</p><ul><li>方法名必须相同。</li><li>参数列表必须不同(参数的类型、个数、顺序的不同)。</li><li>方法的返回值可以不同，也可以相同。</li><li>修饰符可以不同，也可以相同。</li></ul></li><li><p>Java中，判断一个类中的俩个方法是否相同，主要参考俩个方面：方法名字和参数列表</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数类型不同</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Strig str)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//参数个数不同</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Strig str,<span class="keyword">double</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Strig str)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//参数顺序不同</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Strig str,<span class="keyword">double</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> d,Strig str)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承的概述"><a href="#继承的概述" class="headerlink" title="继承的概述"></a>继承的概述</h2><ul><li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的俩个类，一个为子类(派生类)，一个为父类(基类)。子类继承父类，使用关键字extends来表示。</li><li>子类中继承了父类中的属性和方法后，在子类中能不能直接使用这些属性和方法，是和这些属性和方法原有的修饰符(public protected default private)相关的。<ul><li>父类中的属性和方法使用public修饰，在子类中继承后”可以直接”使用。</li><li>父类中的属性和方法使用private修饰，在子类中继承后”不可以直接”使用。</li></ul></li></ul><h2 id="继承的格式"><a href="#继承的格式" class="headerlink" title="继承的格式"></a>继承的格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h2><ul><li>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, String myid)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//初始化属性值</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h2><ul><li>implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="super-与-this-关键字"><a href="#super-与-this-关键字" class="headerlink" title="super 与 this 关键字"></a>super 与 this 关键字</h2><ul><li>如果不显示调用父类有参构造函数，系统会默认调用父类无参构造函数super();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//super();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Cat创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat=<span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//Animal创建了</span></span><br><span class="line"><span class="comment">//Cat创建了</span></span><br></pre></td></tr></table></figure><ul><li>不管是显式还是隐式的父类的构造器，super语句一定要出现在子类构造器中第一行代码。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;super语句要在第一行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> super只能出现在子类的方法或者构造方法中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Animal无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗:&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;柯基&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.color=color;</span><br><span class="line">        System.out.println(<span class="string">&quot;颜色:&quot;</span>+color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat=<span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="comment">//这里因为父类显示调用有参构造，所以系统不会默认调用无参构造,也就不会输出&quot;Animal无参&quot;。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><ul><li>super与this的区别<ul><li>this：代表所属方法的调用者对象；super：代表父类对象的引用空间。</li><li>this：在非继承的条件下也可以使用；super：只能在继承的条件下才能使用。</li><li>this：调用本类的构造方法；super：调用的父类的构造方法。</li></ul></li></ul><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ul><li>final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;<span class="comment">//类体&#125;</span></span><br><span class="line"><span class="comment">//声明方法</span></span><br><span class="line">修饰符(<span class="keyword">public</span>/<span class="keyword">private</span>/<span class="keyword">default</span>/<span class="keyword">protected</span>) <span class="keyword">final</span> 返回值类型 方法名()&#123;<span class="comment">//方法体&#125;</span></span><br></pre></td></tr></table></figure><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><ul><li>方法重写只存在于子类和父类(包括直接父类和间接父类)之间。在同一个类中方法只能被重载，不能被重写。</li><li>静态方法不能重写。 <ul><li>父类的静态方法不能被子类重写为非静态方法。//编译出错 </li><li>父类的非静态方法不能被子类重写为静态方法。//编译出错</li><li>子类可以定义与父类的静态方法同名的静态方法。(但是这个不是覆盖)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以看出静态方法的调用只和变量声明的类型相关，这个和非静态方法的重写之后的效果完全不同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person=<span class="keyword">new</span> Student();</span><br><span class="line">        Student student=<span class="keyword">new</span> Student();</span><br><span class="line">        person.show();</span><br><span class="line">        student.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//我是人</span></span><br><span class="line"><span class="comment">//我是学生</span></span><br></pre></td></tr></table></figure><ul><li>私有方法不能被子类重写，子类继承父类后，是不能直接访问父类中的私有方法的，那么就更谈不上重写了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译通过,但这不是重写,只是俩个类中分别有自己的私有方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重写的语法<ul><li>方法名必须相同</li><li>参数列表必须相同</li><li>访问控制修饰符可以被扩大，但是不能被缩小： public protected default private </li><li>抛出异常类型的范围可以被缩小，但是不能被扩大： ClassNotFoundException —&gt; Exception </li><li>返回类型可以相同，也可以不同，如果不同的话，子类重写后的方法返回类型必须是父类方法返回类型的子类型。比如，父类方法的返回类型是Person,子类重写后的返回类可以是Person也可以是Person的子类型。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以看出静态方法的调用只和变量声明的类型相关，这个和非静态方法的重写之后的效果完全不同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person=<span class="keyword">new</span> Student();</span><br><span class="line">        Student student=<span class="keyword">new</span> Student();</span><br><span class="line">        person.show();</span><br><span class="line">        student.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//我是学生</span></span><br><span class="line"><span class="comment">//我是学生</span></span><br></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态的概述"><a href="#多态的概述" class="headerlink" title="多态的概述"></a>多态的概述</h2><ul><li>多态是同一个行为具有多个不同表现形式或形态的能力。</li><li>多态就是同一个接口，使用不同的实例而执行不同操作。</li></ul><h2 id="多态存在的三个条件"><a href="#多态存在的三个条件" class="headerlink" title="多态存在的三个条件"></a>多态存在的三个条件</h2><ul><li>①继承 ②重写 ③父类引用子类对象</li><li>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/polymorphic.JPG"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Triangle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写、重载和多态的关系"><a href="#重写、重载和多态的关系" class="headerlink" title="重写、重载和多态的关系"></a>重写、重载和多态的关系</h2><ul><li>重载是编译时多态。调用重载的方法，在编译期间就要确定调用的方法是谁,如果不能确定则编译报错。</li><li>重写是运行时多态。调用重写的方法，在运行期间才能确定这个方法到底是哪个对象中的。这个取决于调用方法的引用，在运行期间所指向的对象是谁，这个引用指向哪个对象那么调用的就是哪个对象中的方法。(java中的方法调用, 是运行时动态和对象绑定的)</li></ul><h2 id="无法表现多态特性的三种情况"><a href="#无法表现多态特性的三种情况" class="headerlink" title="无法表现多态特性的三种情况"></a>无法表现多态特性的三种情况</h2><ul><li>static方法，因为被static修饰的方法是属于类的，而不是属于实例的 </li><li>final方法，因为被final修饰的方法无法被子类重写 </li><li>private方法和protected方法，前者是因为被private修饰的方法对子类不可见，后者是因为尽管被 protected修饰的方法可以被子类见到，也可以被子类重写，但是它是无法被外部所引用的，一个不能被外部引用的方法，怎么能谈多态呢。</li></ul><h2 id="方法绑定"><a href="#方法绑定" class="headerlink" title="方法绑定"></a>方法绑定</h2><ul><li>执行调用方法时，系统根据相关信息，能够执行内存地址中代表该方法的代码。分为静态绑定和动态绑定。<ul><li>静态绑定。在编译期完成，可以提高代码执行速度。</li><li>动态绑定。通过对象调用的方法，采用动态绑定机制。这虽然让我们编程灵活，但是降低了代码的执行速度。这也是Java比C/C++速度慢的主要因素之一。Java中除了final类、final方、static方法，所有方法都是JVM在运行期才进行动态绑定的。</li></ul></li></ul><h2 id="instance-of和类型转换"><a href="#instance-of和类型转换" class="headerlink" title="instance of和类型转换"></a>instance of和类型转换</h2><ul><li>instance of</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   <span class="comment">//Object--&gt;Person--&gt;Student</span></span><br><span class="line">    <span class="comment">//Object--&gt;Person--&gt;Teacher</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Object o = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> String);<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(p <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(p <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(p <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(p <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//System.out.println(p instanceof String); 编译报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">        Person q = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(q <span class="keyword">instanceof</span> Student);<span class="comment">//false</span></span><br><span class="line">        System.out.println(q <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(q <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(q <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//System.out.println(q instanceof String); 编译报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(x instanceof Y); </span></span><br><span class="line"><span class="comment">//该代码能否编译通过,主要是看声明变量x的类型和Y是否存在子父类的关系.有子父类关系就编译通过, 没有子父类关系就是编译报错。</span></span><br><span class="line"><span class="comment">//System.out.println(x instanceof Y);</span></span><br><span class="line"><span class="comment">//输出结果是true还是false,主要是看变量x所指向的对象实际类型是不是Y类型的&quot;子类型&quot;。</span></span><br></pre></td></tr></table></figure><ul><li>类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//编译报错,因为p声明的类型Person中没有go方法</span></span><br><span class="line">    Person p = <span class="keyword">new</span> Student();</span><br><span class="line">    p.go();</span><br><span class="line">    <span class="comment">//需要把变量p的类型进行转换</span></span><br><span class="line">    Person p = <span class="keyword">new</span> Student();</span><br><span class="line">    Student s = (Student)p;</span><br><span class="line">    s.go();</span><br><span class="line">    <span class="comment">//或者下面这种形式，注意这种形式前面必须要俩个小括号</span></span><br><span class="line">    ((Student)p).go();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        编译通过 运行没问题</span></span><br><span class="line"><span class="comment">        Object o = new Student();</span></span><br><span class="line"><span class="comment">        Person p = (Person)o;</span></span><br><span class="line"><span class="comment">        编译通过 运行没问题</span></span><br><span class="line"><span class="comment">        Object o = new Student();</span></span><br><span class="line"><span class="comment">        Student s = (Student)o;</span></span><br><span class="line"><span class="comment">        编译通过,运行报错</span></span><br><span class="line"><span class="comment">        Object o = new Teacher();</span></span><br><span class="line"><span class="comment">        Student s = (Student)o;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//X x = (X)o;</span></span><br><span class="line"><span class="comment">//运行是否报错,主要是变量o所指向的对象实现类型,是不是X类型的子类型,如果不是则运行就会报错。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总结<ul><li>父类引用可以指向子类对象，子类引用不能指向父类对象。</li><li>把子类对象直接赋给父类引用叫向上转型（upcasting），向上转型不用强制转型。 如Father father = new Son();</li><li>把指向子类对象的父类引用赋给子类引用叫向下转型（downcasting），要强制转型。如father就是一个指向子类对象的父类引用，把father赋给子类引用son 即Son son =（Son） father。</li><li>upcasting 会丢失子类特有的方法,但是子类overriding 父类的方法，子类方法有效。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person person=<span class="keyword">new</span> Student();<span class="comment">//upcasting 会丢失子类特有的方法,但是子类overriding 父类的方法，子类方法有效</span></span><br><span class="line">    person.show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：我是学生</span></span><br></pre></td></tr></table></figure><h1 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h1><h2 id="abstract修饰符"><a href="#abstract修饰符" class="headerlink" title="abstract修饰符"></a>abstract修饰符</h2><ul><li>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</li><li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</li><li>抽象类，不能使用new关键字来创建对象，它是用来让子类继承的。</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类继承父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sleep</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"><span class="comment">//实现父类中没有实现的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//编译报错,抽象类不能new对象</span></span><br><span class="line">    Action a = <span class="keyword">new</span> Action();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用子类的重写方法</span></span><br><span class="line">    Action a = <span class="keyword">new</span> Sleep();</span><br><span class="line">a.doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h2><ul><li>抽象类也是类，除了可以写抽象方法以及不能直接new对象之外,其他的和普通类没有什么不一样的。接口已经另一种类型了，和类是有本质的区别的，所以不能用类的标准去衡量接口。</li><li>声明类的关键字是class,声明接口的关键字是interface。</li><li>抽象类是用来被继承的，Java中的类是单继承。 类A继承了抽象类B,那么类A的对象就属于B类型了，可以使用多态 一个父类的引用，可以指向这个父类的任意子类对象。</li><li>接口是用来被类实现的，Java中的接口可以被多实现。 类A实现接口B、C、D，那么类A的对象就属于B、C、D类型了，可以使用多态，一个接口的引用,可以指向这个接口的任意实现类对象</li></ul><h2 id="接口的特征"><a href="#接口的特征" class="headerlink" title="接口的特征"></a>接口的特征</h2><ul><li>接口中的方法都是抽象方法。接口中的变量都是静态常量(public static final修饰)。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Behavior</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">&quot;jasper&quot;</span>;</span><br><span class="line"><span class="comment">//默认就是public static final修饰的</span></span><br><span class="line"><span class="keyword">int</span> AGE = <span class="number">18</span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//默认就是public abstract修饰的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个类可以实现多个接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Student需要实现接口A,B中所有的抽象方法</span></span><br><span class="line"><span class="comment">//否则Student类就要声明为抽象类,因为有抽象方法没实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    A a=<span class="keyword">new</span> C();<span class="comment">//A只能调用接口A中声明的方法以及Object中的方法</span></span><br><span class="line">    B b=<span class="keyword">new</span> C();<span class="comment">//B只能调用接口B中声明的方法以及Object中的方法</span></span><br><span class="line">    a.run();</span><br><span class="line">    b.sleep();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(a <span class="keyword">instanceof</span> B)&#123;</span><br><span class="line">((B)a).sleep();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//run</span></span><br><span class="line"><span class="comment">//sleep</span></span><br><span class="line"><span class="comment">//sleep</span></span><br></pre></td></tr></table></figure><ul><li>一个接口可以继承多个父接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口C把接口A,B中的方法都继承过来了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student相当于实现了A B C三个接口,需要实现所有的抽象方法</span></span><br><span class="line"><span class="comment">//Student的对象也就同时属于A类型 B类型 C类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    C o = <span class="keyword">new</span> Student();</span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> A);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> B);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> C);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">    <span class="comment">//编译报错</span></span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> String);<span class="comment">//String类final修饰</span></span><br><span class="line">    <span class="comment">//System.out.println(o instanceof X);</span></span><br><span class="line">    <span class="comment">//如果o是一个接口类型声明的变量,那么只要X不是一个final修饰的类,该代码就能通过编译,至于其结果</span></span><br><span class="line"><span class="comment">//是不是true,就要看变量o指向的对象的实际类型,是不是X的子类或者实现类了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h2><ul><li>接口的最主要的作用是达到统一访问，就是在创建对象的时候用接口创建 【接口名】 【对象名】= new 【实现接口的类】 这样你像用哪个类的对象就可以new哪个对象了，不需要改原来的代码。 </li><li>假如我们两个类中都有个function()的方法，如果我用接口，那样我new a()；就是用a的方法，new b()；就是用b的方法 这个就叫统一访问，因为你实现这个接口的类的方法名相同，但是实现内容不同。</li></ul><h2 id="接口的总结"><a href="#接口的总结" class="headerlink" title="接口的总结"></a>接口的总结</h2><ul><li>Java接口中的成员变量默认都是public，static,final类型的(都可省略),必须被显示初始化,即接口中的成员变量为常量(大写,单词之间用”_”分隔)。</li><li>Java接口中的方法默认都是public，abstract类型的(都可省略)，没有方法体，不能被实例化。</li><li>Java接口中只能包含public，static，final类型的成员变量和public，abstract类型的成员方法。</li><li>一个接口不能实现(implements)另一个接口，但它可以继承多个其它的接口。</li><li>Java接口必须通过类来实现它的抽象方法。</li><li>当类实现了某个Java接口时,它必须实现接口中的所有抽象方法,否则这个类必须声明为抽象类。</li><li>不允许创建接口的实例(实例化)，但允许定义接口类型的引用变量，该引用变量引用实现了这个接口的类的实例。</li><li>一个类只能继承一个直接的父类,但可以实现多个接口，间接的实现了多继承。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组｜数组的声明创建和使用</title>
      <link href="/articles/e8f64a1a.html"/>
      <url>/articles/e8f64a1a.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h1><ul><li>数组是相同类型数据的有序集合。</li><li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。 </li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们。</li></ul><h1 id="数组的基本特点"><a href="#数组的基本特点" class="headerlink" title="数组的基本特点"></a>数组的基本特点</h1><ul><li>数组的长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li><li>数组元素必须是相同类型,不允许出现混合类型。</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li><li>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中的。</li></ul><h1 id="数组的声明创建"><a href="#数组的声明创建" class="headerlink" title="数组的声明创建"></a>数组的声明创建</h1><h2 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;   <span class="comment">// 首选的方法</span></span><br><span class="line">或</span><br><span class="line">dataType arrayRefVar[];  <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure><ul><li>使用 dataType[arraySize] 创建了一个数组</li><li>把新创建的数组的引用赋值给变量 arrayRefVar</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">或者 dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><ul><li><p>Java内存</p><ul><li>堆  存放new的对象和数组，可以被所有线程共享，不会存放别的对象引用。</li><li>栈  存放基本变量类型（会包含这个基本类型的具体数值）</li></ul><p>​            引用对象的变量（会存放这个引用在堆里面的具体地址）</p><ul><li>方法区  可以被所有的线程共享，包含了所有的class和static变量。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/arraymemory.JPG"></p><ul><li>声明的时候并没有实例化任何对象，只有在实例化数组对象时，JVM才分配空间，这时才与长度有关。因此，声明数组时不能指定其长度(数组中元素的个数)，例如： int arr[5]; //非法。</li><li>声明一个数组的时候并没有数组被真正的创建。</li><li>构造一个数组，必须指定长度。</li></ul><h1 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h2><ul><li>除了用new关键字来产生数组以外,还可以直接在定义数组的同时就为数组元素分配空间并赋值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Person[] persons = &#123;<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>),<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>)&#125;;</span><br></pre></td></tr></table></figure><h2 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h2><ul><li>数组定义、为数组元素分配空间、赋值的操作、分开进行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person[] person=<span class="keyword">null</span>;</span><br><span class="line">person=<span class="keyword">new</span> Person[<span class="number">2</span>];</span><br><span class="line">person[<span class="number">0</span>]=<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">person[<span class="number">1</span>]=<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;person.length;i++)&#123;</span><br><span class="line">    System.out.println(person[i].getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h2><ul><li>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li></ul><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><ul><li>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</li><li>arr.length获取的二维数组第一维数组的长度，arr[0].length才是获取二维第一个数组长度。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type[][] typeName = <span class="keyword">new</span> type[typeLength1][typeLength2] <span class="comment">//多维数组格式</span></span><br><span class="line"><span class="comment">//比如    </span></span><br><span class="line"><span class="keyword">int</span> arr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];<span class="comment">//二维数组arr可以看成一个两行三列的数组</span></span><br></pre></td></tr></table></figure><h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/arraysclass.JPG"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//binarySearch</span></span><br><span class="line"><span class="keyword">int</span>[] numbers=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">System.out.println(Arrays.binarySearch(numbers,<span class="number">6</span>));<span class="comment">//输出-(插入点) 即-5</span></span><br><span class="line">System.out.println(Arrays.binarySearch(numbers,<span class="number">2</span>));<span class="comment">//输出1</span></span><br><span class="line"><span class="comment">//equals</span></span><br><span class="line"><span class="keyword">int</span>[] numbers2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">System.out.println(Arrays.equals(numbers,numbers2));<span class="comment">//输出true</span></span><br><span class="line"><span class="comment">//tostring</span></span><br><span class="line">System.out.println(Arrays.toString(numbers));<span class="comment">//输出[1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">//fill</span></span><br><span class="line">Arrays.fill(numbers,<span class="number">1</span>,<span class="number">3</span>,<span class="number">100</span>);</span><br><span class="line">System.out.println(Arrays.toString(numbers));<span class="comment">//输出[1, 100, 100, 4]</span></span><br><span class="line"><span class="comment">//sort</span></span><br><span class="line"><span class="keyword">int</span>[] numbers3=numbers;</span><br><span class="line">Arrays.sort(numbers3);</span><br><span class="line">System.out.println(Arrays.toString(numbers3));<span class="comment">//输出[1, 4, 100, 100]</span></span><br></pre></td></tr></table></figure><h1 id="常见排序算法"><a href="#常见排序算法" class="headerlink" title="常见排序算法"></a>常见排序算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * N个数字要排序完成，总共进行N-1趟排序，每i趟的排序次数为(N-i)次，所以可以用双重循环语句，外层控制循环多少趟，内层控制每一趟的循环次数。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> arr[] = &#123;<span class="number">26</span>,<span class="number">15</span>,<span class="number">29</span>,<span class="number">66</span>,<span class="number">99</span>,<span class="number">88</span>,<span class="number">36</span>,<span class="number">77</span>,<span class="number">111</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; arr.length-<span class="number">1</span>;i++) &#123;<span class="comment">//外层循环控制排序趟数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt; arr.length-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line">                <span class="comment">//内层循环控制每一趟排序多少次</span></span><br><span class="line">                <span class="comment">// 把小的值交换到前面</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;次排序结果：&quot;</span>);</span><br><span class="line">            <span class="comment">//列举每次排序的数据</span></span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终排序结果：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">    第1次排序结果：[15, 26, 29, 66, 88, 36, 77, 99, 1, 6, 8, 8, 111]</span></span><br><span class="line"><span class="comment">    第2次排序结果：[15, 26, 29, 66, 36, 77, 88, 1, 6, 8, 8, 99, 111]</span></span><br><span class="line"><span class="comment">    第3次排序结果：[15, 26, 29, 36, 66, 77, 1, 6, 8, 8, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    第4次排序结果：[15, 26, 29, 36, 66, 1, 6, 8, 8, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    第5次排序结果：[15, 26, 29, 36, 1, 6, 8, 8, 66, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    第6次排序结果：[15, 26, 29, 1, 6, 8, 8, 36, 66, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    第7次排序结果：[15, 26, 1, 6, 8, 8, 29, 36, 66, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    第8次排序结果：[15, 1, 6, 8, 8, 26, 29, 36, 66, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    第9次排序结果：[1, 6, 8, 8, 15, 26, 29, 36, 66, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    第10次排序结果：[1, 6, 8, 8, 15, 26, 29, 36, 66, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    第11次排序结果：[1, 6, 8, 8, 15, 26, 29, 36, 66, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    第12次排序结果：[1, 6, 8, 8, 15, 26, 29, 36, 66, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">    最终排序结果：[1, 6, 8, 8, 15, 26, 29, 36, 66, 77, 88, 99, 111]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaArray</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span> arr[]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;<span class="comment">// 认为目前的数就是最小的, 记录最小数的下标</span></span><br><span class="line"><span class="keyword">int</span> minIndex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;<span class="comment">// 修改最小值的下标</span></span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">// 当退出for就找到这次的最小值,就需要交换位置了</span></span><br><span class="line">        <span class="keyword">if</span> (i != minIndex) &#123;<span class="comment">//交换当前值和找到的最小值的位置</span></span><br><span class="line">            temp = arr[i];</span><br><span class="line">            arr[i] = arr[minIndex];</span><br><span class="line">            arr[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JavaArray javaArray=<span class="keyword">new</span> JavaArray();</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sort = javaArray.sort(array);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : sort) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//输出0124578</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法｜方法的定义、调用和重载</title>
      <link href="/articles/1c5891d8.html"/>
      <url>/articles/1c5891d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h1><h2 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h2><ul><li><p>在我们的日常生活中，方法可以理解为要做某件事情，而采取的解决办法。而Java方法是语句的集合，它们在一起执行一个功能。</p></li><li><p>Java中方法是解决一类问题的步骤的有序组合，包含于类或对象中，在程序中被创建，在其他地方被引用。</p></li><li><p>我们经常使用到 System.out.println()中，println() 是一个方法。System 是系统类。 out 是标准输出对象。 这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。</p></li></ul><h2 id="设计方法的原则"><a href="#设计方法的原则" class="headerlink" title="设计方法的原则"></a>设计方法的原则</h2><ul><li>方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，就是一个方法只完成1个功能，这样利于我们后期的扩展。</li></ul><h2 id="方法的优点"><a href="#方法的优点" class="headerlink" title="方法的优点"></a>方法的优点</h2><ul><li><p>使程序变得更简短而清晰。</p></li><li><p>有利于程序维护。</p></li><li><p>可以提高程序开发的效率。</p></li><li><p>提高了代码的重用性。</p></li></ul><h2 id="方法的定义-1"><a href="#方法的定义-1" class="headerlink" title="方法的定义"></a>方法的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>修饰符：</strong>修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。 </li><li><strong>返回值类型 ：</strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字void。 </li><li><strong>方法名：</strong>是方法的实际名称。方法名和参数类型共同构成方法签名。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法声明的两个组件构成了方法签名 - 方法的名称和参数类型。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculateAnswer</span><span class="params">(<span class="keyword">double</span> number1, <span class="keyword">double</span> number2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do the calculation here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面方法的签名：calculateAnswer(double,double)</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>参数类型：</strong>参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。 </p><ul><li><strong>形式参数：</strong>在方法被调用时用于接收外界输入的数据。 </li><li><strong>实际参数：</strong>调用方法时实际传给方法的数据。</li></ul></li><li><p><strong>方法体：</strong>方法体包含具体的语句，定义该方法的功能。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    result=num1+num2;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h1><ul><li><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</p></li><li><p>当程序调用一个方法时，程序的控制权交给了被调用的方法。</p></li><li><p>当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。</p></li><li><p>当方法返回一个值的时候，方法调用通常被当做一个值。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> larger = add(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><ul><li>当方法返回值是void，方法调用一定是一条语句。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用add方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        result=num1+num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> number2=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> result = add(number1, number2);</span><br><span class="line">        System.out.println(<span class="string">&quot;number1+number2=&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：number1+number2=3</span></span><br></pre></td></tr></table></figure><h1 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h1><ul><li>所谓方法重载就是如果你调用add方法时传递的是int型参数，则int型参数的add方法就会被调用；如果传递的是double型参数，则double型的add方法会被调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    result=num1+num2;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> num1, <span class="keyword">double</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result;</span><br><span class="line">    result=num1+num2;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</li><li>重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。</li></ul><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeName... parameterName <span class="comment">//声明格式</span></span><br></pre></td></tr></table></figure><ul><li>在方法声明中，在指定参数类型后加一个省略号(…) 。</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span>[] d=&#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">// 调用可变参数的方法</span></span><br><span class="line">    printMax(<span class="number">59</span>,<span class="number">44</span>,<span class="number">77</span>);</span><br><span class="line">    printMax(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... numbers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;No argument passed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//排序！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt; result) &#123;</span><br><span class="line">            result = numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;The max value is &quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//The max value is 77.0</span></span><br><span class="line"><span class="comment">//The max value is 4.0</span></span><br></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><ul><li><p><strong>递归头。</strong>什么时候不调用自身方法。如果没有头，将陷入死循环。</p></li><li><p><strong>递归体。</strong>什么时候需要调用自身方法。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//5*4*3*2*1</span></span><br><span class="line">    System.out.println(f(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：120</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制｜顺序、选择和循环结构</title>
      <link href="/articles/5ccabb79.html"/>
      <url>/articles/5ccabb79.html</url>
      
        <content type="html"><![CDATA[<h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><ul><li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行。顺序结构是最简单的算法结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按照自上而下的顺序执行！依次输出。</span></span><br></pre></td></tr></table></figure><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><h2 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h2><ul><li>if语句对条件表达式进行一次测试，若测试为真，则执行下面的语句，否则跳过该语句。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">  <span class="comment">//如果布尔表达式为true将执行的语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果布尔表达式为false则跳过上面的if语句</span></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (s1.equals(<span class="string">&quot;hello&quot;</span>))&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：YES</span></span><br></pre></td></tr></table></figure><h2 id="if双选择结构"><a href="#if双选择结构" class="headerlink" title="if双选择结构"></a>if双选择结构</h2><ul><li>我们需要有两个判断，需要一个双选择结构，所以就有了if-else结构。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式的值为true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式的值为false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> s2=<span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (s2)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：false</span></span><br></pre></td></tr></table></figure><h2 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h2><ul><li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。 </li><li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li><li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式 1的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">3</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式 3的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果以上布尔表达式都不为true执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line">    <span class="keyword">if</span> (score&gt;<span class="number">100</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成绩输入有误&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成绩合格&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成绩不合格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">请输入成绩：80</span></span><br><span class="line"><span class="comment">成绩合格</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="嵌套的if结构"><a href="#嵌套的if结构" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式 1的值为true执行代码</span></span><br><span class="line">    <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果布尔表达式 2的值为false执行代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式 1的值为false执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">switch</span>(name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;张三&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;张三在&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;李四&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;李四在&quot;</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;未知姓名&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：张三在</span></span><br></pre></td></tr></table></figure><ul><li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。case 语句中值的数据类型必须与变量的数据类型相同。</li><li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现 才会跳出 switch 语句。</li><li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">switch</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;我是1&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;我是2&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;我是3&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;跳出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"><span class="comment">//我是2</span></span><br><span class="line"><span class="comment">//我是3</span></span><br></pre></td></tr></table></figure><ul><li>switch 语句可以包含一个 default 分支，该分支一般是switch语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> character=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">switch</span>(character)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;我是a&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;我是b&quot;</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;跳出&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;我是c&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当character=&#x27;b&#x27;时输出结果：    </span></span><br><span class="line"><span class="comment">我是b</span></span><br><span class="line"><span class="comment">跳出</span></span><br><span class="line"><span class="comment">我是c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当character=&#x27;c&#x27;时输出结果：</span></span><br><span class="line"><span class="comment">我是c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当character=&#x27;d&#x27;时输出结果：</span></span><br><span class="line"><span class="comment">跳出</span></span><br><span class="line"><span class="comment">我是c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="循坏结构"><a href="#循坏结构" class="headerlink" title="循坏结构"></a>循坏结构</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><ul><li>循环条件一直为true就会造成无限循环，正常的业务编程中应该尽量避免死循环。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( 布尔表达式 ) &#123;</span><br><span class="line"><span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        sum = sum+i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Sum= &quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：Sum= 5050</span></span><br></pre></td></tr></table></figure><h2 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h2><ul><li>while先判断后执行。dowhile是先执行后判断。dowhile总是保证循环体会被至少执行一次，这是他们的主要差别。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">    sum = sum+i;</span><br><span class="line">    i++;</span><br><span class="line">    &#125;<span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Sum= &quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：Sum= 5050</span></span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line"><span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例子 打印99乘法表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span> ; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            System.out.print(j + <span class="string">&quot;*&quot;</span> + i + <span class="string">&quot;=&quot;</span> + (i * j)+ <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">1*1=1</span></span><br><span class="line"><span class="comment">    1*2=22*2=4</span></span><br><span class="line"><span class="comment">    1*3=32*3=63*3=9</span></span><br><span class="line"><span class="comment">    1*4=42*4=83*4=124*4=16</span></span><br><span class="line"><span class="comment">    1*5=52*5=103*5=154*5=205*5=25</span></span><br><span class="line"><span class="comment">    1*6=62*6=123*6=184*6=245*6=306*6=36</span></span><br><span class="line"><span class="comment">    1*7=72*7=143*7=214*7=285*7=356*7=427*7=49</span></span><br><span class="line"><span class="comment">    1*8=82*8=163*8=244*8=325*8=406*8=487*8=568*8=64</span></span><br><span class="line"><span class="comment">    1*9=92*9=183*9=274*9=365*9=456*9=547*9=638*9=729*9=81</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">        System.out.print( x );</span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：1020304050</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法04｜包机制和用户交互Scanner</title>
      <link href="/articles/2289f534.html"/>
      <url>/articles/2289f534.html</url>
      
        <content type="html"><![CDATA[<h1 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>在java中，包（package），相当于文件夹。包里通常存放的是类文件，因为我们在编写程序的时候，难免会有类名相同的情况。为了对类进行分类管理，java提出了包机制解决方案，在不同包中可以有相同的类名，调用的时候连同包名一起就行。</li><li>Java允许将一组功能相关的类放在同一个包下，从而组成逻辑上的类库单元。包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li><li>Java默认所有源文件导入java.lang包下的所有类。</li></ul><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/accessright.JPG"></p><h2 id="package关键字"><a href="#package关键字" class="headerlink" title="package关键字"></a>package关键字</h2><ul><li>package语句必须作为源文件的第一条非注释性语句，且一个源文件只能指定一个包，即只能包含一条package语句。</li><li>如果没有显式指定package语句，则处于默认包下。</li><li>一般利用公司域名倒置作为包名，比如域名：<a href="http://www.baidu.com/">www.baidu.com</a> 包名：com.baidu.www。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包的语法格式</span></span><br><span class="line"><span class="keyword">package</span> pkg1[．pkg2[．pkg3…]];</span><br><span class="line"><span class="comment">//比如 Something.java文件的路径就是net/java/util/Something.java这样保存的。</span></span><br><span class="line"><span class="keyword">package</span> net.java.util; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span></span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h2 id="import关键字"><a href="#import关键字" class="headerlink" title="import关键字"></a>import关键字</h2><ul><li><p>为了能够使用某一个包的成员，我们需要在 Java 程序中明确导入该包。使用 import 语句可完成此功能。</p></li><li><p>在 java 源文件中 import 语句应位于 package 语句之后，所有类的定义之前，可以没有，也可以有多条。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import 语法格式</span></span><br><span class="line"><span class="keyword">import</span> package1[.package2…].(classname|*); </span><br></pre></td></tr></table></figure><ul><li>如果两个类重名，需要导入对应的包，否则就需要写出完整地址。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.javabase.Hello hello = <span class="keyword">new</span> com.javabase.Hello()</span><br></pre></td></tr></table></figure><h1 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><ul><li>可以通过 Scanner 类来获取用户的输入。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Scanner对象的基本语法</span></span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><h2 id="next-amp-nextLine"><a href="#next-amp-nextLine" class="headerlink" title="next &amp; nextLine"></a>next &amp; nextLine</h2><ul><li>Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用 hasNext() 与 hasNextLine() 判断是否还有输入的数据。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建扫描器对象，用于接收键盘数据</span></span><br><span class="line">        Scanner scanner1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Scanner scanner2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//next方式接收字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Next方式接收:&quot;</span>);</span><br><span class="line">        <span class="comment">//判断用户还有没有输入字符</span></span><br><span class="line">        <span class="keyword">if</span> (scanner1.hasNext())&#123;</span><br><span class="line">            String str = scanner1.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入内容：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源.要养成好习惯用完就关掉.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;nextLine方式接收：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner2.hasNextLine()) &#123;</span><br><span class="line">            String str2 = scanner2.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入内容：&quot;</span> + str2);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner1.close();</span><br><span class="line">        scanner2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">Next方式接收:</span></span><br><span class="line"><span class="comment">    Hello World</span></span><br><span class="line"><span class="comment">    输入内容：Hello</span></span><br><span class="line"><span class="comment">    nextLine方式接收：</span></span><br><span class="line"><span class="comment">    Hello World</span></span><br><span class="line"><span class="comment">    输入内容：Hello World</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>next()</strong></li></ul><p>1.一定要读取到有效字符后才可以结束输入。 </p><p>2.对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。 </p><p>3.只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。 </p><p>4.next() 不能得到带有空格的字符串。</p><ul><li><strong>nextLine()</strong></li></ul><p>1.以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。 </p><p>2.可以获得空白。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法03｜变量和常量</title>
      <link href="/articles/3af186df.html"/>
      <url>/articles/3af186df.html</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><ul><li>在程序执行的过程中变量的值会发生变化，直白来说就是用来存储可变化的数据。从本质上讲，变量其实指代的是内存中的一小块存储空间，空间位置是确定的，但是里面放置什么值不确定。</li><li>比如屋子里有多个鞋柜，而你有很多双不同品牌的鞋，鞋柜里可以放A品牌的鞋，也可以放B品牌的鞋等等，你给每一个鞋柜设计个标签，至于这些鞋柜里放哪些品牌的鞋需要你自己去放。这些标签相当于我们定义的变量，至于变量里放什么，你可以自行决定。</li></ul><h2 id="变量的声明格式"><a href="#变量的声明格式" class="headerlink" title="变量的声明格式"></a>变量的声明格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type identifier [ = value][, identifier [= value] ...] ;</span><br><span class="line"><span class="comment">//数据类型 变量名 = 值；可以使用逗号隔开来声明多个同类型变量。</span></span><br><span class="line"><span class="comment">//比如int a = 1, b = 2, c = 3;</span></span><br></pre></td></tr></table></figure><h2 id="变量的注意事项"><a href="#变量的注意事项" class="headerlink" title="变量的注意事项"></a>变量的注意事项</h2><ul><li><p>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</p></li><li><p>变量名必须是合法的标识符。</p></li><li><p>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</p></li><li><p>逐一声明每一个变量可以提高程序可读性。</p></li></ul><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><ul><li><p>类变量（静态变量： static variable）：独立于方法之外的变量，用 static 修饰。</p></li><li><p>实例变量（成员变量：member variable）：独立于方法之外的变量，不过没有 static 修饰。</p></li><li><p>局部变量（lacal variable）：类的方法中的变量。</p></li></ul><h3 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h3><ul><li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li><li>Java 中被 static 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。</li><li>静态变量从属于类，生命周期伴随类始终，从类加载到卸载。</li><li>静态变量默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name;<span class="comment">//静态变量 方法之外</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        name=<span class="string">&quot;Jasper&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的名字是&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：我的名字是Jasper</span></span><br></pre></td></tr></table></figure><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><ul><li>实例变量声明在一个类中，但在方法、构造方法和语句块之外。当一个对象被实例化之后，每个实例变量的值就跟着确定。</li><li>实例变量从属于对象，生命周期伴随对象始终，在对象创建的时候创建，在对象被销毁的时候销毁。</li><li>实例变量可以声明在使用前或者使用后，访问修饰符可以修饰实例变量，一般情况下应该把实例变量设为私有。</li><li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在初始化块和构造方法中指定。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase03</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个实例变量对子类可见</span></span><br><span class="line">    <span class="keyword">public</span> String animal;</span><br><span class="line">    <span class="comment">// 这个实例变量是私有变量，仅在该类可见</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String hobby=<span class="string">&quot;奔跑&quot;</span>;<span class="comment">//1.声明赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        animal=<span class="string">&quot;老虎&quot;</span>;<span class="comment">//2.代码块赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaBase03</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal=&quot;</span>+animal+<span class="string">&quot;,age=&quot;</span>+age+<span class="string">&quot;,hobby=&quot;</span>+hobby);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JavaBase03 info=<span class="keyword">new</span> JavaBase03(<span class="number">4</span>);<span class="comment">//3.构造方法赋值</span></span><br><span class="line">        info.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：animal=老虎,age=4,hobby=奔跑</span></span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li>局部变量声明在方法、构造方法或者语句块中，在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁。</li><li>访问修饰符不能用于局部变量，局部变量是在栈上分配的。</li><li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number=<span class="number">0</span>;<span class="comment">//全局变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number=<span class="number">1</span>;<span class="comment">//局部变量</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;number&lt;<span class="number">3</span>;number++)&#123;</span><br><span class="line">            sum=sum+number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;<span class="comment">//当函数执行完毕，变量被销毁</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JavaBase03 info=<span class="keyword">new</span> JavaBase03();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span>+info.sum()+<span class="string">&quot;;number=&quot;</span>+info.number);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：sum=3;number=0</span></span><br></pre></td></tr></table></figure><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><ul><li>所谓常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。</li><li>常量名一般使用大写字符。程序中使用常量可以提高代码的可维护性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常量声明格式 final 常量名=值;</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI=<span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">final</span> String SEX=<span class="string">&quot;男&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><ul><li><p>所有变量、方法、类名：见名知意。</p></li><li><p>类变量、实例变量和局部变量首字母小写，并且遵循驼峰原则。比如：nextMonth。</p></li><li><p>常量大写字母和下划线。比如：MIN_VALUE。</p></li><li><p>类名首字母大写，并且遵循驼峰原则。比如：HelloWorld。</p></li><li><p>方法名首字母小写，并且遵循驼峰原则。比如：twiceJump()。</p></li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">25</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;a + b = &quot;</span> + (a + b) );</span><br><span class="line">    System.out.println(<span class="string">&quot;a - b = &quot;</span> + (a - b) );</span><br><span class="line">    System.out.println(<span class="string">&quot;a * b = &quot;</span> + (a * b) );</span><br><span class="line">    System.out.println(<span class="string">&quot;b / a = &quot;</span> + (b / a) );</span><br><span class="line">    System.out.println(<span class="string">&quot;b % a = &quot;</span> + (b % a) );</span><br><span class="line">    System.out.println(<span class="string">&quot;c % a = &quot;</span> + (c % a) );</span><br><span class="line">    System.out.println(<span class="string">&quot;a++   = &quot;</span> +  (a++) );</span><br><span class="line">    System.out.println(<span class="string">&quot;a--   = &quot;</span> +  (a--) );</span><br><span class="line">    <span class="comment">// 查看  d++ 与 ++d 的不同</span></span><br><span class="line">    <span class="comment">//首先在控制台输出，然后d自增为26</span></span><br><span class="line">    System.out.println(<span class="string">&quot;d++   = &quot;</span> +  (d++) );</span><br><span class="line">    <span class="comment">//首先将d自增为27，然后在控制台输出</span></span><br><span class="line">    System.out.println(<span class="string">&quot;++d   = &quot;</span> +  (++d) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  输出结果：</span></span><br><span class="line"><span class="comment">a + b = 30</span></span><br><span class="line"><span class="comment">    a - b = -10</span></span><br><span class="line"><span class="comment">    a * b = 200</span></span><br><span class="line"><span class="comment">    b / a = 2</span></span><br><span class="line"><span class="comment">    b % a = 0</span></span><br><span class="line"><span class="comment">    c % a = 5</span></span><br><span class="line"><span class="comment">    a++ = 10</span></span><br><span class="line"><span class="comment">    a-- = 11</span></span><br><span class="line"><span class="comment">    d++ = 25</span></span><br><span class="line"><span class="comment">    ++d = 27</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;a == b = &quot;</span> + (a == b) );</span><br><span class="line">    System.out.println(<span class="string">&quot;a != b = &quot;</span> + (a != b) );</span><br><span class="line">    System.out.println(<span class="string">&quot;a &gt; b = &quot;</span> + (a &gt; b) );</span><br><span class="line">    System.out.println(<span class="string">&quot;a &lt; b = &quot;</span> + (a &lt; b) );</span><br><span class="line">    System.out.println(<span class="string">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );</span><br><span class="line">    System.out.println(<span class="string">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">a == b = false</span></span><br><span class="line"><span class="comment">    a != b = true</span></span><br><span class="line"><span class="comment">    a &gt; b = false</span></span><br><span class="line"><span class="comment">    a &lt; b = true</span></span><br><span class="line"><span class="comment">    b &gt;= a = true</span></span><br><span class="line"><span class="comment">    b &lt;= a = false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span> </span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//&amp; 如果相对应位都是1，则结果为1，否则为0</span></span><br><span class="line">    c = a &amp; b;       <span class="comment">/* 12 = 0000 1100 */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;a &amp; b = &quot;</span> + c );</span><br><span class="line">    <span class="comment">//| 如果相对应位都是0，则结果为0，否则为1</span></span><br><span class="line">    c = a | b;       <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;a | b = &quot;</span> + c );</span><br><span class="line">    <span class="comment">//^ 如果相对应位值相同，则结果为0，否则为1</span></span><br><span class="line">    c = a ^ b;       <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;a ^ b = &quot;</span> + c );</span><br><span class="line">    <span class="comment">//~ 按位取反运算符翻转操作数的每一位，即0变成1，1变成0</span></span><br><span class="line">    c = ~a;          <span class="comment">/*-61 = 1100 0011 */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;~a = &quot;</span> + c );</span><br><span class="line">    <span class="comment">//&lt;&lt; 按位左移运算符。左操作数按位左移右操作数指定的位数</span></span><br><span class="line">    c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;a &lt;&lt; 2 = &quot;</span> + c );</span><br><span class="line">    <span class="comment">//&gt;&gt; 按位右移运算符。左操作数按位右移右操作数指定的位数</span></span><br><span class="line">    c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 1111 */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;a &gt;&gt; 2  = &quot;</span> + c );</span><br><span class="line">    <span class="comment">//&gt;&gt;&gt; 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</span></span><br><span class="line">    c = a &gt;&gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">a &amp; b = 12</span></span><br><span class="line"><span class="comment">    a | b = 61</span></span><br><span class="line"><span class="comment">    a ^ b = 49</span></span><br><span class="line"><span class="comment">    ~a = -61</span></span><br><span class="line"><span class="comment">    a &lt;&lt; 2 = 240</span></span><br><span class="line"><span class="comment">    a &gt;&gt; 2  = 15</span></span><br><span class="line"><span class="comment">    a &gt;&gt;&gt; 2 = 15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">     <span class="comment">//&amp;&amp; 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));</span><br><span class="line">     <span class="comment">//|| 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a || b = &quot;</span> + (a||b) );</span><br><span class="line">     <span class="comment">//! 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false</span></span><br><span class="line">     System.out.println(<span class="string">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">    a &amp;&amp; b = false</span></span><br><span class="line"><span class="comment">    a || b = true</span></span><br><span class="line"><span class="comment">    !(a &amp;&amp; b) = true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = a + b;</span><br><span class="line">    System.out.println(<span class="string">&quot;c = a + b = &quot;</span> + c );</span><br><span class="line">    c += a ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c += a  = &quot;</span> + c );</span><br><span class="line">    c -= a ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c -= a = &quot;</span> + c );</span><br><span class="line">    c *= a ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c *= a = &quot;</span> + c );</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    c = <span class="number">15</span>;</span><br><span class="line">    c /= a ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c /= a = &quot;</span> + c );</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    c = <span class="number">15</span>;</span><br><span class="line">    c %= a ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c %= a  = &quot;</span> + c );</span><br><span class="line">    c &lt;&lt;= <span class="number">2</span> ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c &lt;&lt;= 2 = &quot;</span> + c );</span><br><span class="line">    c &gt;&gt;= <span class="number">2</span> ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class="line">    c &gt;&gt;= <span class="number">2</span> ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class="line">    c &amp;= a ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c &amp;= a = &quot;</span> + c );</span><br><span class="line">    c ^= a ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c ^= a = &quot;</span> + c );</span><br><span class="line">    c |= a ;</span><br><span class="line">    System.out.println(<span class="string">&quot;c |= a = &quot;</span> + c );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">c = a + b = 30</span></span><br><span class="line"><span class="comment">    c += a  = 40</span></span><br><span class="line"><span class="comment">    c -= a = 30</span></span><br><span class="line"><span class="comment">    c *= a = 300</span></span><br><span class="line"><span class="comment">    c /= a = 1</span></span><br><span class="line"><span class="comment">    c %= a  = 5</span></span><br><span class="line"><span class="comment">    c &lt;&lt;= 2 = 20</span></span><br><span class="line"><span class="comment">    c &gt;&gt;= 2 = 5</span></span><br><span class="line"><span class="comment">    c &gt;&gt;= 2 = 1</span></span><br><span class="line"><span class="comment">    c &amp;= a = 0</span></span><br><span class="line"><span class="comment">    c ^= a = 10</span></span><br><span class="line"><span class="comment">    c |= a = 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本格式：variable x = (expression) ? value if true : value if false</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a , b;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">    b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">    System.out.println( <span class="string">&quot;Value of b is : &quot;</span> +  b );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">    b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">    System.out.println( <span class="string">&quot;Value of b is : &quot;</span> + b );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">Value of b is : 30</span></span><br><span class="line"><span class="comment">Value of b is : 20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h2><ul><li>只要有一个是字符串(String)类型，系统会自动将另一个操作数转换为字符串然后再进行连接。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String a=<span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">String b=<span class="number">3.14</span>+a;</span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line"><span class="comment">//输出结果：b=3.14Hello world</span></span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><ul><li>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/operator.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法02｜数据类型</title>
      <link href="/articles/8275623e.html"/>
      <url>/articles/8275623e.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机相关知识"><a href="#计算机相关知识" class="headerlink" title="计算机相关知识"></a>计算机相关知识</h1><h2 id="计算机采用二进制进行数据运算和处理"><a href="#计算机采用二进制进行数据运算和处理" class="headerlink" title="计算机采用二进制进行数据运算和处理"></a>计算机采用二进制进行数据运算和处理</h2><ol><li>计算机不像人一样会列式子算算术，它更喜欢用高低两个电平来表示两个不同的状态，因为这样对它来说处理数据更加容易。</li><li>计算机内部采用二进制进行数据运算和处理，其中0和1两个数码，刚好数码1可以表示高电平，数码0可以表示低电平。将数据转换为二进制这样计算机就能分的清楚了。</li><li>举个简单的例子，以8位运算为例（现在计算机大多32位或者64位），将1和2进行相加，计算机先将这两个数转换为自己看的懂的二进制补码00000001和00000010，然后通过加法器相加为00000011，最后再将结果转换为3。</li></ol><h2 id="计算机位和字节的概念"><a href="#计算机位和字节的概念" class="headerlink" title="计算机位和字节的概念"></a>计算机位和字节的概念</h2><ol><li><p>位是计算机内部数据存储的最小单位，通常也称为比特（bit），简称为b。每1个二进制数字0或1就是1个位。</p><p>比如说1100就是一个4位二进制数，01101011就是一个8位二进制数。</p></li><li><p>字节（Byte），简称B，是计算机中数据处理的基本单位，每8位就是一个字节。</p></li><li><p>字符是计算机中字母、数字、符号的统称。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1B(字节，Byte)=8b（位，bit，比特）</span><br><span class="line">1KB=1024B </span><br><span class="line">1MB=1024KB </span><br><span class="line">1GB=1024MB</span><br><span class="line"><span class="number">1001100110011001</span>是一个<span class="number">16</span>位二进制数，可表示为<span class="number">2</span>个字节</span><br></pre></td></tr></table></figure><h2 id="原码、反码、补码之间的关系"><a href="#原码、反码、补码之间的关系" class="headerlink" title="原码、反码、补码之间的关系"></a>原码、反码、补码之间的关系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以<span class="number">8</span>位运算为例</span><br><span class="line">+<span class="number">3</span>(真值)--<span class="number">00000011</span>(原码)--<span class="number">00000011</span>(反码)--<span class="number">00000011</span>(补码)</span><br><span class="line">-<span class="number">3</span>(真值)--<span class="number">10000011</span>(原码)--<span class="number">11111100</span>(反码)--<span class="number">11111101</span>(补码)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/threecode.jpg" alt="原反补关系"></p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/datatype.jpg" alt="数据类型"></p><h2 id="1-基本数据类型及大小、封装类"><a href="#1-基本数据类型及大小、封装类" class="headerlink" title="1.基本数据类型及大小、封装类"></a>1.基本数据类型及大小、封装类</h2><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/basicdatatype.jpg" alt="基本数据类型"></p><h2 id="2-基本数据类型在编译器中的实践"><a href="#2-基本数据类型在编译器中的实践" class="headerlink" title="2.基本数据类型在编译器中的实践"></a>2.基本数据类型在编译器中的实践</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//基本类型byte</span></span><br><span class="line">        System.out.println(<span class="string">&quot;二进制位数：&quot;</span> + Byte.SIZE);</span><br><span class="line">        System.out.println(<span class="string">&quot;字节：Byte.BYTE=&quot;</span>+Integer.BYTES);</span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Byte&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基本类型int</span></span><br><span class="line">        System.out.println(<span class="string">&quot;二进制位数：&quot;</span> + Integer.SIZE);</span><br><span class="line">        System.out.println(<span class="string">&quot;字节：Byte.BYTE=&quot;</span>+Integer.BYTES);</span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Integer&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);</span><br><span class="line">        <span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">          二进制位数：8</span></span><br><span class="line"><span class="comment">          字节：Byte.BYTE=4</span></span><br><span class="line"><span class="comment">          包装类：java.lang.Byte</span></span><br><span class="line"><span class="comment">          最小值：Byte.MIN_VALUE=-128</span></span><br><span class="line"><span class="comment">          最大值：Byte.MAX_VALUE=127</span></span><br><span class="line"><span class="comment">          二进制位数：32</span></span><br><span class="line"><span class="comment">          字节：Byte.BYTE=4</span></span><br><span class="line"><span class="comment">          包装类：java.lang.Integer</span></span><br><span class="line"><span class="comment">          最小值：Byte.MIN_VALUE=-2147483648</span></span><br><span class="line"><span class="comment">          最大值：Byte.MAX_VALUE=2147483647</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//其他数据类型也同理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-字节型-整型-短整型-长整型（byte-int-short-long）"><a href="#3-字节型-整型-短整型-长整型（byte-int-short-long）" class="headerlink" title="3.字节型/整型/短整型/长整型（byte/int/short/long）"></a>3.字节型/整型/短整型/长整型（byte/int/short/long）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java语言的整型常数默认为int型，浮点数默认是Double</span></span><br><span class="line"><span class="comment">//byte、int、short和long都可以用十进制、16进制以及8进制的方式来表示</span></span><br><span class="line"><span class="comment">//byte</span></span><br><span class="line"><span class="keyword">byte</span> b1=<span class="number">50</span>;</span><br><span class="line"><span class="comment">//int</span></span><br><span class="line"><span class="keyword">int</span> i1=<span class="number">10</span>; <span class="comment">//十进制形式表示 输出10</span></span><br><span class="line"><span class="keyword">int</span> i2=<span class="number">010</span>; <span class="comment">//八进制形式，以0开头 输出8</span></span><br><span class="line"><span class="keyword">int</span> i3=<span class="number">0x10</span>; <span class="comment">//十六进制形式，以0x/0X开头 输出16</span></span><br><span class="line"><span class="keyword">int</span> i4=<span class="number">0X10</span>;</span><br><span class="line"><span class="comment">//short</span></span><br><span class="line"><span class="keyword">short</span> s1=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//long</span></span><br><span class="line"><span class="keyword">long</span> l1=<span class="number">10000000000l</span>;</span><br><span class="line"><span class="keyword">long</span> l2=<span class="number">10000000000L</span>; </span><br></pre></td></tr></table></figure><h2 id="4-单精度浮点型-双精度浮点型（float-double）"><a href="#4-单精度浮点型-双精度浮点型（float-double）" class="headerlink" title="4.单精度浮点型/双精度浮点型（float/double）"></a>4.单精度浮点型/双精度浮点型（float/double）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java语言的整型常数默认为int型，浮点数默认是Double</span></span><br><span class="line"><span class="comment">//double</span></span><br><span class="line"><span class="keyword">double</span> d1=<span class="number">3.14d</span>;</span><br><span class="line"><span class="keyword">double</span> d2=<span class="number">3.14D</span>; </span><br><span class="line"><span class="comment">//float</span></span><br><span class="line"><span class="keyword">float</span> f1=<span class="number">3.14f</span>;</span><br><span class="line"><span class="keyword">float</span> f2=<span class="number">3.14F</span>; </span><br><span class="line"><span class="comment">/*浮点数在计算机中大部分都是表示近似值</span></span><br><span class="line"><span class="comment">  并不是所有的小数都能可以精确的用二进制浮点数表示</span></span><br><span class="line"><span class="comment">  因此浮点数之间不能比较大小，避免比较中使用浮点数 */</span></span><br><span class="line">System.out.println(d1==f1); <span class="comment">//false</span></span><br><span class="line">System.out.println(d1==d2); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="5-字符型（char）"><a href="#5-字符型（char）" class="headerlink" title="5.字符型（char）"></a>5.字符型（char）</h2><ul><li><p>char 类型是一个单一的 16 位 Unicode 字符，char 数据类型可以储存任何字符。</p></li><li><p>char类型最小值是 \u0000（十进制等效值为0），最大值是 \uffff（十进制等效值为65535）。</p></li><li><p>ASCII编码是1个字节，而Unicode编码通常是2个字节。<br>比如说字母A用ASCII编码表示是十进制的65，二进制的01000001；</p><p>而在Unicode中，只需要在前面补0，即为：00000000 01000001。</p></li><li><p>char类型的字符转换为int类型，即将字母转换为对应的ASCII编码值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//char</span></span><br><span class="line">        <span class="keyword">char</span> c1=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> i5 = c1;<span class="comment">//char自动类型转换为int</span></span><br><span class="line">        System.out.println(<span class="string">&quot;char-&gt;int i5值=&quot;</span>+i5); <span class="comment">//输出结果：i5=97 因为a的ASCII码=97</span></span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;A&#x27;</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">        <span class="keyword">int</span> i6 = c2+<span class="number">1</span>;<span class="comment">//char 类型和 int 类型计算</span></span><br><span class="line">        System.out.println(<span class="string">&quot;char-&gt;int i6值=&quot;</span>+i6);<span class="comment">//输出结果：i6=66 因为A的ASCII码=65，65+1=66</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-布尔型（boolean）"><a href="#6-布尔型（boolean）" class="headerlink" title="6.布尔型（boolean）"></a>6.布尔型（boolean）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//boolean数据类型表示一位的信息</span></span><br><span class="line"><span class="keyword">boolean</span> b1=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> b2=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (b1)&#123; <span class="comment">//b1等价于b1==true</span></span><br><span class="line">    System.out.println(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="1-类型转换注意事项"><a href="#1-类型转换注意事项" class="headerlink" title="1.类型转换注意事项"></a>1.类型转换注意事项</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>,<span class="keyword">short</span>,<span class="keyword">char</span>—&gt; <span class="keyword">int</span> —&gt; <span class="keyword">long</span>—&gt; <span class="keyword">float</span> —&gt; <span class="keyword">double</span> </span><br><span class="line">低------------------------------------------&gt;高</span><br></pre></td></tr></table></figure><ol><li>不能对boolean类型进行类型转换。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//boolean b3=(boolean) 3; 错误，不能将int类型的3转换为boolean类型</span></span><br><span class="line"><span class="comment">//int i7=(int) true; 错误 不能将boolean类型的true转换为int类型</span></span><br></pre></td></tr></table></figure><ol start="2"><li>不能把对象类型转换成不相关类的对象。</li></ol><ul><li>类是对象的集合，对象是类的实例。对象是通过new className产生的，用来调用类的方法、类的构造方法。总之，类就是有相同特征的事物的集合，而对象就是类的一个具体实例。</li><li>Java中的一切都可以称为对象，基本数据类型都有对应的包装类（比如int的包装类是Integer），包装类自然就是对象，比如我创建了peron类和plant类，有姓名、身高和体重三个对象，我总不能把人(person)类的名字转换成植物(plant)类的名字吧。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="keyword">new</span> String(); <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height=<span class="keyword">new</span> Integer(<span class="number">0</span>); <span class="comment">//身高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> weight=<span class="keyword">new</span> Integer(<span class="number">0</span>); <span class="comment">//体重</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> height, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//... do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//some methods...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person personA=<span class="keyword">new</span> Person();</span><br><span class="line">        personA.name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        personA.height=<span class="number">178</span>;</span><br><span class="line">        personA.weight=<span class="number">70</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+personA.name+<span class="string">&quot;;身高:&quot;</span>+personA.height+<span class="string">&quot;m;体重:&quot;</span>+personA.weight+<span class="string">&quot;斤&quot;</span>);</span><br><span class="line"><span class="comment">//输出结果：姓名:张三;身高:178m;体重:70斤</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i7=<span class="number">97</span>;</span><br><span class="line"><span class="keyword">char</span> c3=(<span class="keyword">char</span>)i7;</span><br><span class="line">System.out.println(<span class="string">&quot;c3=&quot;</span>+c3); <span class="comment">//输出结果:c3=a</span></span><br></pre></td></tr></table></figure><ol start="4"><li>转换过程中可能导致溢出或损失精度。</li><li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i8 =<span class="number">128</span>;</span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>)i8;</span><br><span class="line">System.out.println(<span class="string">&quot;b3=&quot;</span>+b3);</span><br><span class="line"><span class="comment">//输出结果：b3=-128 因为byte类型是8位，最大值为127，值128时候就会导致溢出</span></span><br><span class="line"><span class="keyword">double</span> d4=<span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> i9= (<span class="keyword">int</span>) d4;</span><br><span class="line">System.out.println(<span class="string">&quot;i9=&quot;</span>+i9);</span><br><span class="line"><span class="comment">//输出结果：i9=3 因为浮点数转换为整数损失精度，舍弃小数而不是四舍五入</span></span><br></pre></td></tr></table></figure><h2 id="2-自动类型转换"><a href="#2-自动类型转换" class="headerlink" title="2.自动类型转换"></a>2.自动类型转换</h2><ul><li>容量小的数据类型可以自动转换为容量大的数据类型，比如内存空间16位的short可以自动转换为内存空间32位的int，内存空间32位的float可以自动转换为内存空间64位的double，既不会溢出，也不会损失精度。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">short</span> s3=<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> i10=s3;</span><br><span class="line">        System.out.println(<span class="string">&quot;i10=&quot;</span>+i10);<span class="comment">//输出结果：i10=12</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> f3 = <span class="number">12.5F</span>;</span><br><span class="line">        <span class="keyword">double</span> d5 = f3;</span><br><span class="line">        System.out.println(<span class="string">&quot;d5=&quot;</span>+d5);<span class="comment">//输出结果：d5=12.5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-强制类型转换"><a href="#3-强制类型转换" class="headerlink" title="3.强制类型转换"></a>3.强制类型转换</h2><ul><li>在有可能丢失信息的情况下进行的转换，但可能造成精度降低或溢出。</li><li>格式：(type)value，其中type是要强制类型转换后的数据类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> money=<span class="number">1000000000</span>; <span class="comment">//10亿</span></span><br><span class="line">        <span class="keyword">int</span> years=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> all1=money*years;</span><br><span class="line">        <span class="comment">//返回的是负数,将money*years算出来的结果转换为int类型的时候发生溢出</span></span><br><span class="line">        <span class="keyword">long</span> all2=money*years;</span><br><span class="line">        <span class="comment">//返回的是负数,将money*years算出来的结果转换为int类型的时候已经发生溢出</span></span><br><span class="line">        <span class="comment">//当int类型再自动转换为long类型时已经是负数</span></span><br><span class="line">        <span class="keyword">long</span> all3=money*((<span class="keyword">long</span>)years);</span><br><span class="line">        <span class="comment">//返回的结果正常，将int类型的years强制转换为long类型，int*long，全部用long来计算。</span></span><br><span class="line">        System.out.println(all1);</span><br><span class="line">        System.out.println(all2);</span><br><span class="line">        System.out.println(all3);</span><br><span class="line">        <span class="comment">//输出结果：</span></span><br><span class="line">        <span class="comment">//-1474836480 -1474836480 20000000000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法01｜注释、标识符和关键字</title>
      <link href="/articles/772b1d9.html"/>
      <url>/articles/772b1d9.html</url>
      
        <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ol><li><strong>单行注释（只能注释当前行，以//开始，直到行结束）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输出Hello World</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>多行注释（注释一段文字，以/开始， /结束）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            输出Hello World</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><em><em>文档注释（在开始的 <strong>/*</strong></em> 之后，第一行或几行是关于类、变量和方法的主要描述）</em>*</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Jasper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 注释理解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算a+b的和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a+b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将计算得到的int值赋值给sum</span></span><br><span class="line">        <span class="keyword">int</span> sum = getSum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//控制台输出sum</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ol><li>每个人都有自己的名字，而在Java中，标识符是为方法、变量或其他用户定义项所定义的名称。类名、变量名以及方法名都被称为标识符。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中HelloWorld就是类名,mian就是方法名,args就是变量名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>表示类名的标识符用大写字母开始。类名类似于HelloWorld、PostMan等等</p></li><li><p>表示方法和变量的标识符用小写字母开始，后面的描述性词以大写开始，尽量使用规范的驼峰命名原则。</p><p>变量名类似于drinkMilk、doSport等等<br>方法名类似于getSum()、makeFriend()等等</p></li></ol><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><ol><li><p>Java关键字是电脑语言里事先定义的，又叫保留字，是整个语言范围内预先保留的标识符，需要注意的是，Java中已经规定的关键字，我们自己就不能拿它当做名字。</p></li><li><p>Java的关键字对Java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，关键字不能用作变量名、方法名、类名、包名和参数。比如public、static就是关键字，我们无法用此命名。</p><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/keyword.JPG"></p></li></ol><h1 id="标识符的注意事项"><a href="#标识符的注意事项" class="headerlink" title="标识符的注意事项"></a>标识符的注意事项</h1><ol><li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Apple; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">int</span> $cash; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">int</span> _sale; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">int</span> +cd; <span class="comment">//错误，只能字母、美元符、下划线开头</span></span><br><span class="line"><span class="keyword">int</span> #children <span class="comment">//错误，只能字母、美元符、下划线开头</span></span><br></pre></td></tr></table></figure><ol start="2"><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a1$c; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">int</span> a#c； <span class="comment">//错误，只能是字母、美元符、下划线、数字的组合不能使用关键字作为变量名或方法名</span></span><br></pre></td></tr></table></figure><ol start="3"><li>不能使用关键字作为变量名或方法名。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这样命名就不行，因为作为方法名的public是关键字，作为变量名的static也是关键字</span></span><br><span class="line"><span class="comment">        public int public(int staic)&#123;</span></span><br><span class="line"><span class="comment">            return 1；</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>标识符是大小写敏感的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我下面定义的是两个变量，而并非一个变量</span></span><br><span class="line"><span class="keyword">int</span> Book;</span><br><span class="line"><span class="keyword">int</span> book;</span><br></pre></td></tr></table></figure><ol start="5"><li>在Java语言的使用中，一般不建议中文命名，也不建议拼音命名。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java初步认识</title>
      <link href="/articles/3571064f.html"/>
      <url>/articles/3571064f.html</url>
      
        <content type="html"><![CDATA[<h1 id="JDK、JRE-和-JVM"><a href="#JDK、JRE-和-JVM" class="headerlink" title="JDK、JRE 和 JVM"></a>JDK、JRE 和 JVM</h1><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><ol><li><p>JDK是Java Development Kit 的缩写，意思是Java程序开发的工具包，也可以说Java 语言的软件开发工具包(SDK)。</p></li><li><p>JDK是整个Java开发的核心，它包含了Java的运行环境，Java工具和Java基础的类库。</p></li><li><p>JDK是给开发者提供的开发工具箱，是给程序开发者用的。</p></li></ol><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><ol><li><p>JRE是Java Runtime Environment 的缩写，意思是Java程序的运行环境。</p></li><li><p>普通用户并不需要安装JDK来运行Java程序，而只需要安装JRE，而程序开发者必须安装JDK来编译、调试程序。</p></li></ol><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ol><li><p>JVM是Java Virtual Machine 的缩写，意思是Java虚拟机。</p></li><li><p>JVM是一种规范，可以使用软件来实现，也可以使用硬件来实现。它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p></li><li><p>Java的跨平台实现的核心是不同平台使用不同的虚拟机。Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，随处运行”。</p></li></ol><h2 id="区别和联系"><a href="#区别和联系" class="headerlink" title="区别和联系"></a>区别和联系</h2><ol><li>JDK是给开发人员用的，JRE和JVM是普通用户用的。 如果只是要运行Java程序，只需要JRE就可以， JRE通常非常小，其中也包含了JVM。如果要开发Java程序，就需要安装JDK。简单来说JDK包含JRE，JRE又包含JVM。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/threerelationship.jpg"></p><h1 id="Java程序运行机制"><a href="#Java程序运行机制" class="headerlink" title="Java程序运行机制"></a>Java程序运行机制</h1><ol><li><p>计算机的高级编程语言类型: 编译型 ，解释型。Java 语言是两种类型的结合。</p></li><li><p>所谓编译型就是有一个负责翻译的程序来对我们的源代码进行转换，生成相对应的可执行代码，而负责编译的程序自然就称为编译器。打个比方你看不懂这本英文书，找了名翻译，翻译官将这本书从头到尾全部翻译成中文供你阅读。</p></li><li><p>所谓解释型就是在运行的时候将程序翻译成机器语言，所以运行速度相对于编译型语言要慢。打个比方你看不懂这本英文书，找了名翻译，翻译官将一本英文书一句句帮你翻译成中文。</p></li><li><p>编译型由于程序执行速度快，同等条件下对系统要求较低，因此像开发操作系统、大型应用程序、数据库系统等时都采用它；而一些网页脚本、服务器脚本及辅助开发接口这样的对速度要求不高、对不同系统平台间的兼容性有一定要求的程序通常使用解释性语言。</p></li><li><p>简单来说Java程序的运行机制分为编写、编译和运行三个步骤。从编写出来的Java源文件，到编译为字节码文件，再到通过JVM解释执行Class字节码文件，然后将程序的运行结果展示给用户，这是一个完整的Java运行流程。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/operatingmechanism.jpg" alt="Java程序运行机制"></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
