<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"><title>Java基础语法04｜包机制和用户交互Scanner | JasperのBlog</title><meta name="keywords" content="Java"><meta name="author" content="Jasper"><meta name="copyright" content="Jasper"><meta name="format-detection" content="telephone=no"><meta name="theme-color" content="#ffffff"><meta name="description" content="包机制概述 在java中，包（package），相当于文件夹。包里通常存放的是类文件，因为我们在编写程序的时候，难免会有类名相同的情况。为了对类进行分类管理，java提出了包机制解决方案，在不同包中可以有相同的类名，调用的时候连同包名一起就行。 Java允许将一组功能相关的类放在同一个包下，从而组成逻辑上的类库单元。包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。 Java默认所有源文">
<meta property="og:type" content="article">
<meta property="og:title" content="Java基础语法04｜包机制和用户交互Scanner">
<meta property="og:url" content="https://jasper807.top/archives/2289f534.xml">
<meta property="og:site_name" content="JasperのBlog">
<meta property="og:description" content="包机制概述 在java中，包（package），相当于文件夹。包里通常存放的是类文件，因为我们在编写程序的时候，难免会有类名相同的情况。为了对类进行分类管理，java提出了包机制解决方案，在不同包中可以有相同的类名，调用的时候连同包名一起就行。 Java允许将一组功能相关的类放在同一个包下，从而组成逻辑上的类库单元。包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。 Java默认所有源文">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javagrammar.png">
<meta property="article:published_time" content="2021-12-02T13:42:22.000Z">
<meta property="article:modified_time" content="2021-12-03T07:11:19.765Z">
<meta property="article:author" content="Jasper">
<meta property="article:tag" content="Java">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javagrammar.png"><link rel="shortcut icon" href="/img/favicon.png"><link rel="canonical" href="https://jasper807.top/archives/2289f534.xml"><link rel="preconnect" href="//cdn.jsdelivr.net"/><link rel="preconnect" href="//busuanzi.ibruce.info"/><link rel="stylesheet" href="/css/index.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css" media="print" onload="this.media='all'"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fancyapps/ui/dist/fancybox.css" media="print" onload="this.media='all'"><script>const GLOBAL_CONFIG = { 
  root: '/',
  algolia: undefined,
  localSearch: {"path":"search.xml","languages":{"hits_empty":"找不到您查询的内容：${query}"}},
  translate: undefined,
  noticeOutdate: undefined,
  highlight: {"plugin":"highlighjs","highlightCopy":true,"highlightLang":true,"highlightHeightLimit":false},
  copy: {
    success: '复制成功',
    error: '复制错误',
    noSupport: '浏览器不支持'
  },
  relativeDate: {
    homepage: false,
    post: false
  },
  runtime: '',
  date_suffix: {
    just: '刚刚',
    min: '分钟前',
    hour: '小时前',
    day: '天前',
    month: '个月前'
  },
  copyright: {"limitCount":50,"languages":{"author":"作者: Jasper","link":"链接: ","source":"来源: JasperのBlog","info":"著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"}},
  lightbox: 'fancybox',
  Snackbar: undefined,
  source: {
    justifiedGallery: {
      js: 'https://cdn.jsdelivr.net/npm/flickr-justified-gallery@2/dist/fjGallery.min.js',
      css: 'https://cdn.jsdelivr.net/npm/flickr-justified-gallery@2/dist/fjGallery.min.css'
    }
  },
  isPhotoFigcaption: false,
  islazyload: false,
  isAnchor: true
}</script><script id="config-diff">var GLOBAL_CONFIG_SITE = {
  title: 'Java基础语法04｜包机制和用户交互Scanner',
  isPost: true,
  isHome: false,
  isHighlightShrink: false,
  isToc: true,
  postUpdate: '2021-12-03 15:11:19'
}</script><noscript><style type="text/css">
  #nav {
    opacity: 1
  }
  .justified-gallery img {
    opacity: 1
  }

  #recent-posts time,
  #post-meta time {
    display: inline !important
  }
</style></noscript><script>(win=>{
    win.saveToLocal = {
      set: function setWithExpiry(key, value, ttl) {
        if (ttl === 0) return
        const now = new Date()
        const expiryDay = ttl * 86400000
        const item = {
          value: value,
          expiry: now.getTime() + expiryDay,
        }
        localStorage.setItem(key, JSON.stringify(item))
      },

      get: function getWithExpiry(key) {
        const itemStr = localStorage.getItem(key)

        if (!itemStr) {
          return undefined
        }
        const item = JSON.parse(itemStr)
        const now = new Date()

        if (now.getTime() > item.expiry) {
          localStorage.removeItem(key)
          return undefined
        }
        return item.value
      }
    }
  
    win.getScript = url => new Promise((resolve, reject) => {
      const script = document.createElement('script')
      script.src = url
      script.async = true
      script.onerror = reject
      script.onload = script.onreadystatechange = function() {
        const loadState = this.readyState
        if (loadState && loadState !== 'loaded' && loadState !== 'complete') return
        script.onload = script.onreadystatechange = null
        resolve()
      }
      document.head.appendChild(script)
    })
  
      win.activateDarkMode = function () {
        document.documentElement.setAttribute('data-theme', 'dark')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0d0d0d')
        }
      }
      win.activateLightMode = function () {
        document.documentElement.setAttribute('data-theme', 'light')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff')
        }
      }
      const t = saveToLocal.get('theme')
    
          if (t === 'dark') activateDarkMode()
          else if (t === 'light') activateLightMode()
        
      const asideStatus = saveToLocal.get('aside-status')
      if (asideStatus !== undefined) {
        if (asideStatus === 'hide') {
          document.documentElement.classList.add('hide-aside')
        } else {
          document.documentElement.classList.remove('hide-aside')
        }
      }
    
    const detectApple = () => {
      if(/iPad|iPhone|iPod|Macintosh/.test(navigator.userAgent)){
        document.documentElement.classList.add('apple')
      }
    }
    detectApple()
    })(window)</script><meta name="generator" content="Hexo 5.4.0"><link rel="alternate" href="/atom.xml" title="JasperのBlog" type="application/atom+xml">
</head><body><div id="sidebar"><div id="menu-mask"></div><div id="sidebar-menus"><div class="avatar-img is-center"><img src="/./img/avatar.jpeg" onerror="onerror=null;src='/img/friend_404.gif'" alt="avatar"/></div><div class="site-data is-center"><div class="data-item"><a href="/archives/"><div class="headline">文章</div><div class="length-num">14</div></a></div><div class="data-item"><a href="/tags/"><div class="headline">标签</div><div class="length-num">1</div></a></div><div class="data-item"><a href="/categories/"><div class="headline">分类</div><div class="length-num">2</div></a></div></div><hr/><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><i class="fa-fw fas fa-home"></i><span> 首页</span></a></div><div class="menus_item"><a class="site-page" href="/tags/"><i class="fa-fw fas fa-tags"></i><span> 标签</span></a></div><div class="menus_item"><a class="site-page" href="/categories/"><i class="fa-fw fas fa-folder-open"></i><span> 分类</span></a></div><div class="menus_item"><a class="site-page" href="/link/"><i class="fa-fw fas fa-link"></i><span> 链接</span></a></div></div></div></div><div class="post" id="body-wrap"><header class="post-bg" id="page-header" style="background-image: url('https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javagrammar.png')"><nav id="nav"><span id="blog_name"><a id="site-name" href="/">JasperのBlog</a></span><div id="menus"><div id="search-button"><a class="site-page social-icon search"><i class="fas fa-search fa-fw"></i><span> 搜索</span></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><i class="fa-fw fas fa-home"></i><span> 首页</span></a></div><div class="menus_item"><a class="site-page" href="/tags/"><i class="fa-fw fas fa-tags"></i><span> 标签</span></a></div><div class="menus_item"><a class="site-page" href="/categories/"><i class="fa-fw fas fa-folder-open"></i><span> 分类</span></a></div><div class="menus_item"><a class="site-page" href="/link/"><i class="fa-fw fas fa-link"></i><span> 链接</span></a></div></div><div id="toggle-menu"><a class="site-page"><i class="fas fa-bars fa-fw"></i></a></div></div></nav><div id="post-info"><h1 class="post-title">Java基础语法04｜包机制和用户交互Scanner</h1><div id="post-meta"><div class="meta-firstline"><span class="post-meta-date"><i class="far fa-calendar-alt fa-fw post-meta-icon"></i><span class="post-meta-label">发表于</span><time class="post-meta-date-created" datetime="2021-12-02T13:42:22.000Z" title="发表于 2021-12-02 21:42:22">2021-12-02</time><span class="post-meta-separator">|</span><i class="fas fa-history fa-fw post-meta-icon"></i><span class="post-meta-label">更新于</span><time class="post-meta-date-updated" datetime="2021-12-03T07:11:19.765Z" title="更新于 2021-12-03 15:11:19">2021-12-03</time></span><span class="post-meta-categories"><span class="post-meta-separator">|</span><i class="fas fa-inbox fa-fw post-meta-icon"></i><a class="post-meta-categories" href="/categories/JavaSE/">JavaSE</a></span></div><div class="meta-secondline"><span class="post-meta-separator">|</span><span class="post-meta-wordcount"><i class="far fa-file-word fa-fw post-meta-icon"></i><span class="post-meta-label">字数总计:</span><span class="word-count">818</span><span class="post-meta-separator">|</span><i class="far fa-clock fa-fw post-meta-icon"></i><span class="post-meta-label">阅读时长:</span><span>2分钟</span></span><span class="post-meta-separator">|</span><span class="post-meta-pv-cv" id="" data-flag-title="Java基础语法04｜包机制和用户交互Scanner"><i class="far fa-eye fa-fw post-meta-icon"></i><span class="post-meta-label">阅读量:</span><span id="busuanzi_value_page_pv"></span></span></div></div></div></header><main class="layout" id="content-inner"><div id="post"><article class="post-content" id="article-container"><h1 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>在java中，包（package），相当于文件夹。包里通常存放的是类文件，因为我们在编写程序的时候，难免会有类名相同的情况。为了对类进行分类管理，java提出了包机制解决方案，在不同包中可以有相同的类名，调用的时候连同包名一起就行。</li>
<li>Java允许将一组功能相关的类放在同一个包下，从而组成逻辑上的类库单元。包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li>
<li>Java默认所有源文件导入java.lang包下的所有类。</li>
</ul>
<h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/javase/accessright.JPG"></p>
<h2 id="package关键字"><a href="#package关键字" class="headerlink" title="package关键字"></a>package关键字</h2><ul>
<li>package语句必须作为源文件的第一条非注释性语句，且一个源文件只能指定一个包，即只能包含一条package语句。</li>
<li>如果没有显式指定package语句，则处于默认包下。</li>
<li>一般利用公司域名倒置作为包名，比如域名：<a target="_blank" rel="noopener" href="http://www.baidu.com/">www.baidu.com</a> 包名：com.baidu.www。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包的语法格式</span></span><br><span class="line"><span class="keyword">package</span> pkg1[．pkg2[．pkg3…]];</span><br><span class="line"><span class="comment">//比如 Something.java文件的路径就是net/java/util/Something.java这样保存的。</span></span><br><span class="line"><span class="keyword">package</span> net.java.util; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span></span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="import关键字"><a href="#import关键字" class="headerlink" title="import关键字"></a>import关键字</h2><ul>
<li><p>为了能够使用某一个包的成员，我们需要在 Java 程序中明确导入该包。使用 import 语句可完成此功能。</p>
</li>
<li><p>在 java 源文件中 import 语句应位于 package 语句之后，所有类的定义之前，可以没有，也可以有多条。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import 语法格式</span></span><br><span class="line"><span class="keyword">import</span> package1[.package2…].(classname|*); </span><br></pre></td></tr></table></figure>

<ul>
<li>如果两个类重名，需要导入对应的包，否则就需要写出完整地址。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.javabase.Hello hello = <span class="keyword">new</span> com.javabase.Hello()</span><br></pre></td></tr></table></figure>

<h1 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><ul>
<li>可以通过 Scanner 类来获取用户的输入。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Scanner对象的基本语法</span></span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure>

<h2 id="next-amp-nextLine"><a href="#next-amp-nextLine" class="headerlink" title="next &amp; nextLine"></a>next &amp; nextLine</h2><ul>
<li>Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用 hasNext() 与 hasNextLine() 判断是否还有输入的数据。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaBase04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建扫描器对象，用于接收键盘数据</span></span><br><span class="line">        Scanner scanner1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Scanner scanner2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//next方式接收字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Next方式接收:&quot;</span>);</span><br><span class="line">        <span class="comment">//判断用户还有没有输入字符</span></span><br><span class="line">        <span class="keyword">if</span> (scanner1.hasNext())&#123;</span><br><span class="line">            String str = scanner1.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入内容：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源.要养成好习惯用完就关掉.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;nextLine方式接收：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner2.hasNextLine()) &#123;</span><br><span class="line">            String str2 = scanner2.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入内容：&quot;</span> + str2);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner1.close();</span><br><span class="line">        scanner2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	输出结果：</span></span><br><span class="line"><span class="comment">	Next方式接收:</span></span><br><span class="line"><span class="comment">    Hello World</span></span><br><span class="line"><span class="comment">    输入内容：Hello</span></span><br><span class="line"><span class="comment">    nextLine方式接收：</span></span><br><span class="line"><span class="comment">    Hello World</span></span><br><span class="line"><span class="comment">    输入内容：Hello World</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>next()</strong></li>
</ul>
<p>1.一定要读取到有效字符后才可以结束输入。 </p>
<p>2.对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。 </p>
<p>3.只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。 </p>
<p>4.next() 不能得到带有空格的字符串。</p>
<ul>
<li><strong>nextLine()</strong></li>
</ul>
<p>1.以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。 </p>
<p>2.可以获得空白。</p>
</article><div class="post-copyright"><div class="post-copyright__author"><span class="post-copyright-meta">文章作者: </span><span class="post-copyright-info"><a href="mailto:undefined">Jasper</a></span></div><div class="post-copyright__type"><span class="post-copyright-meta">文章链接: </span><span class="post-copyright-info"><a href="https://jasper807.top/archives/2289f534.xml">https://jasper807.top/archives/2289f534.xml</a></span></div><div class="post-copyright__notice"><span class="post-copyright-meta">版权声明: </span><span class="post-copyright-info">本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="https://jasper807.top" target="_blank">JasperのBlog</a>！</span></div></div><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Java/">Java</a></div><div class="post_share"><div class="social-share" data-image="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javagrammar.png" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css" media="print" onload="this.media='all'"><script src="https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js" defer></script></div></div><nav class="pagination-post" id="pagination"><div class="prev-post pull-left"><a href="/archives/5ccabb79.xml"><img class="prev-cover" src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javacontrol.png" onerror="onerror=null;src='/img/404.jpg'" alt="cover of previous post"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">Java流程控制｜顺序、选择和循环结构</div></div></a></div><div class="next-post pull-right"><a href="/archives/3af186df.xml"><img class="next-cover" src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javagrammar.png" onerror="onerror=null;src='/img/404.jpg'" alt="cover of next post"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">Java基础语法03｜变量和常量</div></div></a></div></nav><div class="relatedPosts"><div class="headline"><i class="fas fa-thumbs-up fa-fw"></i><span>相关推荐</span></div><div class="relatedPosts-list"><div><a href="/archives/b2084f96.xml" title="Java知识梳理03|内部类详解"><img class="cover" src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/outerclass.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2021-12-03</div><div class="title">Java知识梳理03|内部类详解</div></div></a></div><div><a href="/archives/108617ef.xml" title="Java知识梳理02|关键字及部分重点作用详解"><img class="cover" src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/keysolution.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2021-12-03</div><div class="title">Java知识梳理02|关键字及部分重点作用详解</div></div></a></div><div><a href="/archives/772b1d9.xml" title="Java基础语法01｜注释、标识符和关键字"><img class="cover" src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javagrammar.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2021-12-02</div><div class="title">Java基础语法01｜注释、标识符和关键字</div></div></a></div><div><a href="/archives/8275623e.xml" title="Java基础语法02｜数据类型"><img class="cover" src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javagrammar.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2021-12-02</div><div class="title">Java基础语法02｜数据类型</div></div></a></div><div><a href="/archives/92ce4ef6.xml" title="Java知识梳理01｜类和对象"><img class="cover" src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/classandobj.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2021-12-03</div><div class="title">Java知识梳理01｜类和对象</div></div></a></div><div><a href="/archives/db963a9e.xml" title="Java常用类及其常用方法的使用"><img class="cover" src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javaclass.png" alt="cover"><div class="content is-center"><div class="date"><i class="far fa-calendar-alt fa-fw"></i> 2021-12-02</div><div class="title">Java常用类及其常用方法的使用</div></div></a></div></div></div></div><div class="aside-content" id="aside-content"><div class="card-widget card-info"><div class="is-center"><div class="avatar-img"><img src="/./img/avatar.jpeg" onerror="this.onerror=null;this.src='/img/friend_404.gif'" alt="avatar"/></div><div class="author-info__name">Jasper</div><div class="author-info__description"></div></div><div class="card-info-data is-center"><div class="card-info-data-item"><a href="/archives/"><div class="headline">文章</div><div class="length-num">14</div></a></div><div class="card-info-data-item"><a href="/tags/"><div class="headline">标签</div><div class="length-num">1</div></a></div><div class="card-info-data-item"><a href="/categories/"><div class="headline">分类</div><div class="length-num">2</div></a></div></div><a class="button--animated" id="card-info-btn" target="_blank" rel="noopener" href="https://github.com/jasper807"><i class="fab fa-github"></i><span>Follow me</span></a></div><div class="card-widget card-announcement"><div class="item-headline"><i class="fas fa-bullhorn card-announcement-animation"></i><span>公告</span></div><div class="announcement_content">Hi, welcome to JasperのBlog！</div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="fas fa-stream"></i><span>目录</span><span class="toc-percentage"></span></div><div class="toc-content is-expand"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%8C%85%E6%9C%BA%E5%88%B6"><span class="toc-number">1.</span> <span class="toc-text">包机制</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%A6%82%E8%BF%B0"><span class="toc-number">1.1.</span> <span class="toc-text">概述</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90"><span class="toc-number">1.2.</span> <span class="toc-text">访问权限</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#package%E5%85%B3%E9%94%AE%E5%AD%97"><span class="toc-number">1.3.</span> <span class="toc-text">package关键字</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#import%E5%85%B3%E9%94%AE%E5%AD%97"><span class="toc-number">1.4.</span> <span class="toc-text">import关键字</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92Scanner"><span class="toc-number">2.</span> <span class="toc-text">用户交互Scanner</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%A6%82%E8%BF%B0-1"><span class="toc-number">2.1.</span> <span class="toc-text">概述</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#next-amp-nextLine"><span class="toc-number">2.2.</span> <span class="toc-text">next &amp; nextLine</span></a></li></ol></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="fas fa-history"></i><span>最新文章</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/archives/b2084f96.xml" title="Java知识梳理03|内部类详解"><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/outerclass.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="Java知识梳理03|内部类详解"/></a><div class="content"><a class="title" href="/archives/b2084f96.xml" title="Java知识梳理03|内部类详解">Java知识梳理03|内部类详解</a><time datetime="2021-12-03T07:45:44.000Z" title="发表于 2021-12-03 15:45:44">2021-12-03</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/archives/108617ef.xml" title="Java知识梳理02|关键字及部分重点作用详解"><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/keysolution.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="Java知识梳理02|关键字及部分重点作用详解"/></a><div class="content"><a class="title" href="/archives/108617ef.xml" title="Java知识梳理02|关键字及部分重点作用详解">Java知识梳理02|关键字及部分重点作用详解</a><time datetime="2021-12-03T07:43:12.000Z" title="发表于 2021-12-03 15:43:12">2021-12-03</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/archives/92ce4ef6.xml" title="Java知识梳理01｜类和对象"><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/classandobj.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="Java知识梳理01｜类和对象"/></a><div class="content"><a class="title" href="/archives/92ce4ef6.xml" title="Java知识梳理01｜类和对象">Java知识梳理01｜类和对象</a><time datetime="2021-12-03T07:39:02.000Z" title="发表于 2021-12-03 15:39:02">2021-12-03</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/archives/db963a9e.xml" title="Java常用类及其常用方法的使用"><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javaclass.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="Java常用类及其常用方法的使用"/></a><div class="content"><a class="title" href="/archives/db963a9e.xml" title="Java常用类及其常用方法的使用">Java常用类及其常用方法的使用</a><time datetime="2021-12-02T14:15:52.000Z" title="发表于 2021-12-02 22:15:52">2021-12-02</time></div></div><div class="aside-list-item"><a class="thumbnail" href="/archives/1b73a25a.xml" title="Java异常｜异常体系结构和处理机制"><img src="https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javaexception.png" onerror="this.onerror=null;this.src='/img/404.jpg'" alt="Java异常｜异常体系结构和处理机制"/></a><div class="content"><a class="title" href="/archives/1b73a25a.xml" title="Java异常｜异常体系结构和处理机制">Java异常｜异常体系结构和处理机制</a><time datetime="2021-12-02T14:14:11.000Z" title="发表于 2021-12-02 22:14:11">2021-12-02</time></div></div></div></div></div></div></main><footer id="footer" style="background-image: url('https://cdn.jsdelivr.net/gh/jasper807/picgo/cover/javagrammar.png')"><div id="footer-wrap"><div class="copyright">&copy;2020 - 2021 By Jasper</div></div></footer></div><div id="rightside"><div id="rightside-config-hide"><button id="darkmode" type="button" title="浅色和深色模式转换"><i class="fas fa-adjust"></i></button><button id="hide-aside-btn" type="button" title="单栏和双栏切换"><i class="fas fa-arrows-alt-h"></i></button></div><div id="rightside-config-show"><button id="rightside_config" type="button" title="设置"><i class="fas fa-cog fa-spin"></i></button><button class="close" id="mobile-toc-button" type="button" title="目录"><i class="fas fa-list-ul"></i></button><button id="go-up" type="button" title="回到顶部"><i class="fas fa-arrow-up"></i></button></div></div><div id="local-search"><div class="search-dialog"><nav class="search-nav"><span class="search-dialog-title">本地搜索</span><span id="loading-status"></span><button class="search-close-button"><i class="fas fa-times"></i></button></nav><div class="is-center" id="loading-database"><i class="fas fa-spinner fa-pulse"></i><span>  数据库加载中</span></div><div class="search-wrap"><div id="local-search-input"><div class="local-search-box"><input class="local-search-box--input" placeholder="搜索文章" type="text"/></div></div><hr/><div id="local-search-results"></div></div></div><div id="search-mask"></div></div><div><script src="/js/utils.js"></script><script src="/js/main.js"></script><script src="https://cdn.jsdelivr.net/npm/@fancyapps/ui/dist/fancybox.umd.js"></script><script src="https://cdn.jsdelivr.net/npm/instant.page/instantpage.min.js" type="module"></script><script>function panguFn () {
  if (typeof pangu === 'object') pangu.autoSpacingPage()
  else {
    getScript('https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js')
      .then(() => {
        pangu.autoSpacingPage()
      })
  }
}

function panguInit () {
  if (false){
    GLOBAL_CONFIG_SITE.isPost && panguFn()
  } else {
    panguFn()
  }
}

document.addEventListener('DOMContentLoaded', panguInit)</script><script src="/js/search/local-search.js"></script><div class="js-pjax"></div><script src="https://cdn.jsdelivr.net/npm/pjax/pjax.min.js"></script><script>let pjaxSelectors = [
  'title',
  '#config-diff',
  '#body-wrap',
  '#rightside-config-hide',
  '#rightside-config-show',
  '.js-pjax'
]

if (false) {
  pjaxSelectors.unshift('meta[property="og:image"]', 'meta[property="og:title"]', 'meta[property="og:url"]')
}

var pjax = new Pjax({
  elements: 'a:not([target="_blank"])',
  selectors: pjaxSelectors,
  cacheBust: false,
  analytics: false,
  scrollRestoration: false
})

document.addEventListener('pjax:send', function () {

  // removeEventListener scroll 
  window.removeEventListener('scroll', window.tocScrollFn)
  window.removeEventListener('scroll', scrollCollect)

  typeof preloader === 'object' && preloader.initLoading()
  
  if (window.aplayers) {
    for (let i = 0; i < window.aplayers.length; i++) {
      if (!window.aplayers[i].options.fixed) {
        window.aplayers[i].destroy()
      }
    }
  }

  typeof typed === 'object' && typed.destroy()

  //reset readmode
  const $bodyClassList = document.body.classList
  $bodyClassList.contains('read-mode') && $bodyClassList.remove('read-mode')

})

document.addEventListener('pjax:complete', function () {
  window.refreshFn()

  document.querySelectorAll('script[data-pjax]').forEach(item => {
    const newScript = document.createElement('script')
    const content = item.text || item.textContent || item.innerHTML || ""
    Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
    newScript.appendChild(document.createTextNode(content))
    item.parentNode.replaceChild(newScript, item)
  })

  GLOBAL_CONFIG.islazyload && window.lazyLoadInstance.update()

  typeof chatBtnFn === 'function' && chatBtnFn()
  typeof panguInit === 'function' && panguInit()

  // google analytics
  typeof gtag === 'function' && gtag('config', '', {'page_path': window.location.pathname});

  // baidu analytics
  typeof _hmt === 'object' && _hmt.push(['_trackPageview',window.location.pathname]);

  typeof loadMeting === 'function' && document.getElementsByClassName('aplayer').length && loadMeting()

  // prismjs
  typeof Prism === 'object' && Prism.highlightAll()

  typeof preloader === 'object' && preloader.endLoading()
})

document.addEventListener('pjax:error', (e) => {
  if (e.request.status === 404) {
    pjax.loadUrl('/404.html')
  }
})</script><script async data-pjax src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script></div></body></html>